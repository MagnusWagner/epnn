import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.456430699011213     0.979187560675720     0.474594387399309
    C                0.779569300988787    -0.965812439324280     1.830594387399309
    S               -0.821430699011213    -0.142812439324280     1.810594387399310
    H               -1.074430699011213     0.717187560675720    -0.379405612600691
    H               -0.672430699011213     1.966187560675720     0.865594387399309
    H                0.597569300988787     0.967187560675720     0.202594387399309
    H                0.766569300988787    -1.718812439324280     2.610594387399309
    H                1.532569300988787    -0.220812439324280     2.092594387399309
    H                1.080229300988787    -1.481542439324280     0.906674387399309
    C                0.049569300988787     0.552187560675720    -2.907405612600691
    C                1.293569300988787    -0.272812439324280    -3.216405612600691
    H               -0.441430699011213     0.831187560675720    -3.841405612600691
    H               -0.647430699011213    -0.035812439324280    -2.311405612600691
    H                0.331569300988787     1.458187560675720    -2.367405612600691
    H                1.801569300988787    -0.439812439324280    -2.273405612600691
    H                1.975819300988787     0.260057560675720    -3.895065612600691
    H                0.968679300988787    -1.258372439324280    -3.581265612600691

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-036MET-049LEU-1-dimer.npy', np.array(charges))