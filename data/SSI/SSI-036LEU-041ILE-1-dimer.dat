import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.172092002408897    -0.510135005241085     1.752663539624858
    C               -0.478092002408897    -1.832135005241085     1.439663539624858
    H               -0.473092002408897     0.156864994758915     2.252663539624858
    H               -1.530092002408897    -0.039135005241085     0.840663539624858
    H               -2.031092002408897    -0.686135005241085     2.399663539624858
    H                0.421907997591103    -1.608135005241085     0.866663539624858
    H               -0.179926002408897    -2.332195005241085     2.372958939624858
    H               -1.127883002408897    -2.457185005241085     0.809518539624858
    C                0.420907997591103     1.384864994758915    -0.993336460375142
    C                1.223907997591103     0.956864994758915    -2.199336460375142
    H               -0.392092002408897     0.680864994758915    -0.845336460375142
    H                1.056907997591103     1.386864994758915    -0.108336460375142
    H               -0.000092002408897     2.372864994758915    -1.153336460375142
    H                1.482907997591103    -0.098135005241085    -2.089336460375142
    H                2.147907997591103     1.515864994758915    -2.194336460375142
    H                0.688552997591103     1.114024994758915    -3.147331460375142

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-036LEU-041ILE-1-dimer.npy', np.array(charges))