import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.965109750765047     1.201355253307475    -0.861544882362043
    C                0.684109750765047     1.762355253307474    -2.258544882362043
    H                1.274109750765047     0.157355253307474    -0.928544882362043
    H                1.758109750765047     1.779355253307474    -0.386544882362043
    H                0.073109750765047     1.279355253307475    -0.239544882362043
    H                0.267109750765047     2.765355253307475    -2.163544882362043
    H               -0.005120249234953     1.126634253307474    -2.833720882362043
    H                1.619899750765047     1.803877253307475    -2.835241882362042
    C               -0.785890249234953    -0.813644746692526     1.901455117637957
    C               -0.867890249234953    -2.155644746692525     1.222455117637957
    H               -1.197890249234953    -0.874644746692525     2.909455117637957
    H                0.255109750765047    -0.496644746692526     1.962455117637957
    H               -1.340890249234953    -0.068644746692526     1.331455117637957
    H               -0.431890249234953    -2.058644746692525     0.229455117637957
    H               -1.927040249234953    -2.438036746692526     1.130480217637957
    H               -0.290310249234953    -2.908888746692525     1.778351917637957

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-049THR-053LEU-1-dimer.npy', np.array(charges))