import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                1.147364270235010     2.856720350958131    -1.432677967068754
    S                1.423364270235010     1.397720350958131    -0.419677967068754
    H                0.624364270235010     1.746720350958131     0.599322032931246
    H                1.431364270235010     3.701720350958131    -0.821677967068754
    H                0.103364270235010     2.927720350958131    -1.745677967068754
    H                1.837084270235010     2.912565350958131    -2.287757967068754
    C               -1.282635729764990    -0.257279649041869     0.349322032931246
    C               -2.148635729764990    -0.215279649041869     1.604322032931246
    C               -0.511635729764990    -1.557279649041869     0.185322032931246
    O                0.046364270235010    -2.062279649041869     1.187322032931246
    O               -0.442635729764990    -2.056279649041869    -0.964677967068754
    H               -1.883635729764990    -0.098279649041869    -0.546677967068754
    H               -0.632635729764990     0.572720350958131     0.496322032931246
    H               -1.515635729764990    -0.298279649041869     2.488322032931246
    H               -2.874895729764990    -1.040854649041869     1.573242032931246
    H               -2.668775729764990     0.753912350958131     1.615202032931246

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-087CYS-119ASP-1-dimer.npy', np.array(charges))