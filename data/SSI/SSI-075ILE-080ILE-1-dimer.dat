import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.913848599094295     0.783818608312703    -0.815684229585889
    C               -2.088848599094295     1.389818608312703    -1.659684229585889
    H               -1.302848599094295     0.171818608312703    -0.002684229585889
    H               -0.281848599094295     0.165818608312703    -1.452684229585889
    H               -0.285848599094295     1.573818608312703    -0.404684229585889
    H               -1.635848599094295     1.860818608312703    -2.534684229585889
    H               -2.615946599094295     2.193589608312704    -1.124784229585889
    H               -2.776023599094295     0.616746608312703    -2.034054229585889
    C                1.911151400905705    -0.500181391687297     0.985315770414111
    C                1.084151400905705    -1.681181391687297     1.500315770414111
    H                2.976151400905705    -0.716181391687297     1.082315770414111
    H                1.693151400905705    -0.296181391687297    -0.061684229585889
    H                1.678151400905705     0.403818608312703     1.546315770414111
    H                0.028151400905705    -1.424181391687297     1.431315770414111
    H                1.331531400905705    -1.888640291687297     2.551865770414111
    H                1.279271400905705    -2.569257791687296     0.881245770414111

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-075ILE-080ILE-1-dimer.npy', np.array(charges))