import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.588090357930712     0.647929517448639    -0.875227388101003
    C                2.556090357930712     1.660929517448639    -1.469227388101003
    H                1.958090357930712    -0.366070482551361    -0.999227388101003
    H                1.471090357930712     0.844929517448639     0.187772611898997
    H                0.616090357930712     0.740929517448639    -1.358227388101003
    H                3.523090357930712     1.536929517448639    -0.980227388101003
    H                2.204090357930712     2.650929517448640    -1.201227388101003
    H                2.691570357930712     1.564879517448639    -2.556617388101003
    C               -1.370909642069288    -0.978070482551361     0.927772611898997
    C               -2.779909642069288    -1.335070482551361     1.406772611898997
    H               -1.378909642069288    -0.750070482551361    -0.139227388101003
    H               -0.981909642069288    -0.110070482551361     1.456772611898997
    H               -0.679909642069288    -1.803070482551361     1.110772611898997
    H               -2.716909642069288    -1.700070482551361     2.433772611898998
    H               -3.218979642069288    -2.125680482551361     0.780552611898997
    H               -3.408359642069288    -0.432580482551361     1.383102611898997

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-102ILE-145ILE-1-dimer.npy', np.array(charges))