import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.702034225416228     0.895769839804286     0.283503195676437
    C               -0.239034225416228     1.275769839804286     1.696503195676437
    O               -1.966034225416228     1.457769839804286    -0.014496804323563
    H                0.028965774583772     1.247769839804286    -0.445496804323563
    H               -0.791034225416228    -0.188230160195714     0.238503195676437
    H                0.822965774583772     1.075769839804286     1.795503195676437
    H               -2.632034225416228     1.035769839804286     0.543503195676437
    H               -0.776176225416228     0.698003839804286     2.463096195676437
    H               -0.374572225416228     2.351423839804286     1.882508195676437
    C                1.042965774583772    -1.707230160195714    -1.549496804323563
    C                2.053965774583772    -1.992230160195714    -0.449496804323563
    H                0.495965774583772    -2.619230160195714    -1.790496804323563
    H                0.337965774583772    -0.961230160195714    -1.234496804323563
    H                1.539965774583772    -1.355230160195714    -2.455496804323563
    H                1.551965774583772    -2.540230160195714     0.347503195676437
    H                2.471418774583772    -1.064078160195714    -0.032043804323563
    H                2.857500774583772    -2.623684160195714    -0.856433804323563

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-098SER-127VAL-1-dimer.npy', np.array(charges))