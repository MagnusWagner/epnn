import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.738566199773464     0.651940790792583     1.400513318449987
    C                1.453566199773464     1.378940790792583     2.534513318449987
    H                1.447566199773464     0.051940790792583     0.827513318449987
    H               -0.010433800226536    -0.019059209207417     1.818513318449987
    H                0.232566199773464     1.362940790792583     0.748513318449987
    H                2.092566199773465     0.659940790792583     3.045513318449987
    H                2.074916199773464     2.195750790792583     2.138593318449987
    H                0.751426199773464     1.786120790792583     3.276943318449987
    C               -0.479433800226536    -1.289059209207417    -1.645486681550013
    C               -1.716433800226536    -0.739059209207417    -2.294486681550013
    H               -0.570433800226536    -2.369059209207417    -1.535486681550013
    H                0.394566199773464    -1.059059209207417    -2.257486681550013
    H               -0.350433800226536    -0.842059209207417    -0.661486681550013
    H               -1.552433800226536     0.320940790792583    -2.430486681550013
    H               -2.587243800226535    -0.899929209207417    -1.641946681550013
    H               -1.878153800226536    -1.221369209207417    -3.269796681550013

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-098LEU-117ALA-1-dimer.npy', np.array(charges))