import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.434509938892220    -0.107528714546782    -0.619966313133959
    C               -2.774509938892220    -0.846528714546782    -0.802966313133959
    H               -0.896509938892221    -0.074528714546782    -1.563966313133959
    H               -1.616509938892220     0.913471285453219    -0.295966313133959
    H               -0.833509938892220    -0.630528714546781     0.123033686866041
    H               -3.181509938892220    -1.070528714546781     0.174033686866041
    H               -2.629821938892220    -1.773388714546781    -1.377419313133959
    H               -3.508263938892220    -0.191003714546782    -1.294791313133959
    C                1.924490061107780    -0.021528714546782     1.256033686866041
    C                2.292490061107779     0.974471285453218     0.165033686866041
    H                1.069490061107780     0.346471285453218     1.815033686866041
    H                1.659490061107779    -0.972528714546782     0.800033686866041
    H                2.766490061107779    -0.166528714546782     1.933033686866041
    H                1.458490061107780     1.028471285453219    -0.532966313133959
    H                2.433683061107780     1.961374285453219     0.629884686866041
    H                3.183701061107780     0.642522285453218    -0.387734313133959

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-045LEU-097LEU-1-dimer.npy', np.array(charges))