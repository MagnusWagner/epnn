import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                1.451543587068672     1.516861201010143     0.817532502804100
    C                0.278543587068672     1.253861201010143     1.712532502804100
    O               -0.760456412931328     1.883861201010143     1.565532502804100
    N                0.416543587068672     0.299861201010143     2.640532502804100
    H                1.471543587068673     0.761861201010143     0.034532502804100
    H                2.368543587068672     1.405861201010143     1.396532502804100
    H               -0.366456412931328     0.095861201010143     3.240532502804100
    H                1.271543587068672    -0.231138798989857     2.701532502804100
    H                1.443633587068672     2.521081201010142     0.368652502804100
    C               -1.080456412931327    -2.281138798989858    -2.377467497195900
    C               -0.302456412931328    -1.161138798989857    -1.670467497195900
    O               -0.591456412931328    -0.933138798989857    -0.474467497195900
    O                0.584543587068672    -0.510138798989857    -2.273467497195900
    H               -2.141456412931328    -2.125138798989858    -2.181467497195900
    H               -0.812456412931328    -3.245138798989858    -1.939467497195900
    H               -0.977536412931328    -2.345913798989857    -3.470727497195900

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-037ASN-067GLU-1-dimer.npy', np.array(charges))