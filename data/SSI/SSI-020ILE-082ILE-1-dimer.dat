import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                2.081325047339272    -0.338784325208327     0.082544003804193
    C                2.542325047339272    -0.683784325208327    -1.347455996195807
    H                2.460325047339271     0.639215674791673     0.355544003804193
    H                0.996325047339272    -0.346784325208327     0.130544003804193
    H                2.451325047339272    -1.078784325208327     0.793544003804193
    H                2.276325047339272    -1.724784325208327    -1.540455996195807
    H                3.635080047339272    -0.582099325208327    -1.421928996195807
    H                2.013339047339272    -0.087512155208327    -2.105501996195807
    C               -1.574674952660728     0.341215674791673     0.512544003804193
    C               -3.047674952660728     0.681215674791673     0.751544003804193
    H               -1.470674952660728    -0.372784325208327    -0.303455996195807
    H               -1.039674952660728     1.252215674791673     0.243544003804193
    H               -1.138674952660728    -0.075784325208327     1.419544003804193
    H               -3.467674952660729     1.085215674791673    -0.169455996195807
    H               -3.081674952660728     1.464215674791673     1.507544003804193
    H               -3.649825652660728    -0.170694775208327     1.100346003804193

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-020ILE-082ILE-1-dimer.npy', np.array(charges))