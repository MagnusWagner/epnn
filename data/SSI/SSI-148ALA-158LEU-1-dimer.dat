import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.831337339179979     1.697088938623892     0.850153886798910
    C                0.622337339179980     2.989088938623892     0.074153886798910
    H               -0.112662660820020     1.376088938623892     1.289153886798910
    H                1.194337339179980     0.925088938623892     0.172153886798910
    H                1.565337339179980     1.859088938623892     1.640153886798910
    H                1.575337339179980     3.285088938623892    -0.360846113201090
    H                0.294087339179979     3.789808938623892     0.753193886798910
    H               -0.089452660820020     2.838748938623892    -0.750926113201090
    C               -0.650662660820021    -1.661911061376108    -0.116846113201090
    C               -0.809662660820020    -3.022911061376108    -0.801846113201090
    H               -1.444662660820020    -1.524911061376108     0.616153886798910
    H                0.317337339179980    -1.614911061376108     0.383153886798910
    H               -0.706662660820020    -0.866911061376108    -0.862846113201090
    H               -0.011662660820020    -3.140911061376108    -1.532846113201090
    H               -1.779002660820020    -3.081271061376108    -1.318546113201090
    H               -0.723142660820021    -3.861141061376108    -0.094816113201090

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-148ALA-158LEU-1-dimer.npy', np.array(charges))