import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.087400684272747     0.666936993414584    -0.492010538396270
    C               -1.987400684272747    -0.058063006585416    -1.514010538396270
    O               -1.432400684272747     2.028936993414584    -0.350010538396270
    H               -1.179400684272746     0.177936993414584     0.478989461603730
    H               -0.048400684272747     0.598936993414584    -0.813010538396270
    H               -1.693400684272747    -1.109063006585416    -1.552010538396270
    H               -0.934400684272747     2.526936993414584    -1.027010538396270
    H               -1.894263684272746     0.384906993414584    -2.516559538396270
    H               -3.035819684272747    -0.003573006585416    -1.185607538396270
    C                2.073599315727253    -0.829063006585416     0.756989461603730
    C                2.493599315727253    -1.995063006585416     1.653989461603730
    H                1.097599315727253    -1.022063006585416     0.317989461603730
    H                2.006599315727254     0.077936993414584     1.358989461603730
    H                2.807599315727253    -0.665063006585416    -0.032010538396270
    H                1.815599315727253    -2.043063006585416     2.504989461603730
    H                3.483599315727253    -1.780063006585416     2.055989461603730
    H                2.538209315727253    -2.967843006585416     1.142419461603730

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-141SER-154ILE-1-dimer.npy', np.array(charges))