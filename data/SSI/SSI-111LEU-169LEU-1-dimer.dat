import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.830880812531735     0.177887917620494    -1.892811492433435
    C                2.295880812531735     0.656887917620494    -1.628811492433435
    H                0.699880812531735    -0.850112082379506    -1.553811492433435
    H                0.144880812531735     0.825887917620494    -1.348811492433435
    H                0.595880812531735     0.256887917620494    -2.947811492433436
    H                2.424880812531735     1.645887917620494    -2.062811492433435
    H                3.016700812531735    -0.046032082379506    -2.071895692433436
    H                2.485790812531735     0.712867917620494    -0.546775492433436
    C               -0.975119187468265    -0.522112082379506     1.267188507566565
    C               -2.151119187468265    -0.314112082379506     2.255188507566564
    H               -0.095119187468265     0.026887917620494     1.605188507566565
    H               -0.735119187468265    -1.584112082379506     1.204188507566565
    H               -1.266119187468265    -0.173112082379506     0.277188507566564
    H               -3.010119187468264    -0.874112082379506     1.887188507566564
    H               -2.385249187468265     0.760007917620494     2.293369507566565
    H               -1.882519187468265    -0.683702082379506     3.255815507566564

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-111LEU-169LEU-1-dimer.npy', np.array(charges))