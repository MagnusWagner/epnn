import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.444980460154857     0.199332450688047    -2.060857785072230
    C               -0.173980460154857     0.463332450688047    -1.267857785072230
    O                0.814019539845143    -0.267667549311953    -1.324857785072230
    N               -0.232980460154857     1.476332450688047    -0.458857785072230
    H               -2.264980460154857     0.813332450688047    -1.683857785072230
    H               -1.716980460154857    -0.848667549311953    -1.928857785072230
    H                0.593019539845143     1.697332450688047     0.077142214927770
    H               -1.075980460154857     2.020332450688047    -0.352857785072230
    H               -1.277739460154857     0.414572450688047    -3.126547785072230
    C               -0.120980460154857    -0.623667549311953     2.192142214927770
    C                1.152019539845143    -1.265667549311953     2.768142214927770
    H                0.185019539845143     0.128332450688047     1.488142214927770
    H               -0.740980460154857    -1.376667549311953     1.706142214927770
    H               -0.686980460154857    -0.151667549311953     2.995142214927770
    H                0.820019539845143    -1.905667549311953     3.582142214927770
    H                1.845739539845143    -0.515797549311953     3.176132214927770
    H                1.638159539845143    -1.934284549311953     2.042452214927770

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-183GLN-205LEU-1-dimer.npy', np.array(charges))