import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.059607618463608     1.662702820761239     1.026451577314182
    C               -1.240607618463608     2.290702820761239     1.766451577314182
    H               -0.026607618463608     0.588702820761239     1.215451577314182
    H               -0.154607618463608     1.824702820761239    -0.046548422685818
    H                0.876392381536392     2.114702820761239     1.359451577314182
    H               -2.148607618463608     1.759702820761239     1.477451577314182
    H               -1.099724618463608     2.207032820761239     2.854181577314182
    H               -1.353585618463608     3.344432820761239     1.471691577314182
    C                0.530392381536392    -1.245297179238761    -1.212548422685818
    C                0.769392381536392    -2.709297179238761    -1.576548422685818
    H                1.036392381536392    -1.014297179238761    -0.273548422685818
    H                0.933392381536392    -0.595297179238761    -1.971548422685818
    H               -0.529607618463608    -1.037297179238761    -1.105548422685818
    H                0.196392381536392    -2.942297179238761    -2.473548422685818
    H                0.440291381536392    -3.364637179238761    -0.756658422685818
    H                1.835005381536392    -2.871297179238761    -1.796148422685818

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-034VAL-072VAL-1-dimer.npy', np.array(charges))