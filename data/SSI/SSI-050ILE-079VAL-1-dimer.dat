import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.584540830774714     0.561857891607185     0.127615363249278
    C                2.914540830774714    -0.085142108392814     0.436615363249278
    H                0.783540830774714     0.043857891607186     0.654615363249278
    H                1.617540830774714     1.591857891607185     0.478615363249278
    H                1.391540830774714     0.576857891607185    -0.944384636750722
    H                3.033540830774714    -0.165142108392815     1.518615363249278
    H                3.701540830774714     0.569857891607185     0.067615363249278
    H                3.052920830774714    -1.068121108392815    -0.037308636750722
    C               -1.851459169225286     0.233857891607185    -0.718384636750722
    C               -2.655459169225285    -0.720142108392814     0.147615363249278
    H               -2.371459169225286     0.431857891607186    -1.657384636750722
    H               -1.719459169225286     1.172857891607185    -0.190384636750722
    H               -0.877459169225286    -0.198142108392815    -0.939384636750722
    H               -2.225459169225286    -0.711142108392814     1.149615363249278
    H               -2.593119169225286    -1.746313108392815    -0.243647636750722
    H               -3.700359169225286    -0.384357108392815     0.221271363249278

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-050ILE-079VAL-1-dimer.npy', np.array(charges))