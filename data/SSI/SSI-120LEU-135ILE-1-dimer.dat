import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.732605807681228    -1.239502887925243     1.668734531541616
    C                0.023394192318772    -0.276502887925242     2.570734531541616
    H               -1.249605807681228    -0.695502887925243     0.881734531541616
    H               -0.031605807681228    -1.932502887925242     1.218734531541616
    H               -1.459605807681228    -1.807502887925242     2.249734531541617
    H                0.738394192318772     0.276497112074758     1.963734531541616
    H               -0.677595807681228     0.425937112074758     3.045275531541616
    H                0.588184192318772    -0.824672887925243     3.339189531541616
    C                0.218394192318772     0.546497112074757    -1.403265468458383
    C                0.484394192318772     0.962497112074757    -2.838265468458384
    H                0.723394192318772    -0.391502887925242    -1.175265468458383
    H                0.606394192318772     1.312497112074757    -0.729265468458384
    H               -0.851605807681228     0.436497112074758    -1.232265468458383
    H                1.563394192318772     0.966497112074758    -3.009265468458383
    H                0.130394192318772     1.989497112074758    -2.935265468458384
    H               -0.003655807681228     0.327747112074758    -3.592525468458384

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-120LEU-135ILE-1-dimer.npy', np.array(charges))