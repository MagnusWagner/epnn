import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.950092720464378    -0.423019790821453    -2.556573066346206
    C                0.143907279535622    -0.382019790821453    -1.551573066346207
    O               -0.063092720464378    -0.960019790821453    -0.488573066346207
    O                1.199907279535622     0.214980209178547    -1.848573066346207
    H               -1.104092720464378    -1.462019790821453    -2.855573066346206
    H               -0.677092720464378     0.142980209178547    -3.449573066346207
    H               -1.891922720464378    -0.026199790821453    -2.149773066346206
    C               -0.021092720464378     1.083980209178548     2.090426933653793
    C               -1.453092720464378     0.481980209178547     2.251426933653794
    N                1.020907279535622     0.026980209178547     1.887426933653793
    H               -0.027092720464378     1.763980209178547     1.232426933653793
    H                0.214907279535622     1.671980209178547     2.982426933653794
    H               -1.471092720464378    -0.209019790821453     3.095426933653794
    H               -1.701092720464378    -0.071019790821453     1.345426933653793
    H                0.794907279535622    -0.501019790821453     1.041426933653794
    H                1.939907279535622     0.431980209178547     1.765426933653793
    H                1.056907279535622    -0.617019790821453     2.665426933653793
    H               -2.209172720464378     1.264670209178547     2.411846933653794

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-211ASP-214LYS-1-dimer.npy', np.array(charges))