import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.272957756436893     1.569921330704517    -0.589431524950530
    C                1.408957756436893     0.104921330704516    -0.241431524950530
    O                1.246957756436893    -0.777078669295484    -1.081431524950530
    N                1.724957756436893    -0.162078669295484     1.015568475049470
    H                2.279957756436893     1.957921330704516    -0.742431524950530
    H                0.828957756436893     2.084921330704516     0.264568475049470
    H                1.929957756436893    -1.110078669295483     1.276568475049470
    H                1.959957756436893     0.596921330704516     1.651568475049470
    H                0.649277756436893     1.757171330704516    -1.475977524950530
    C               -2.288042243563107    -0.630078669295484    -0.099431524950530
    C               -3.306042243563107    -0.084078669295484     0.904568475049470
    H               -2.717042243563107    -1.465078669295484    -0.657431524950530
    H               -1.995042243563107     0.133921330704516    -0.805431524950530
    H               -1.383042243563107    -0.963078669295484     0.410568475049470
    H               -2.804042243563107     0.634921330704516     1.555568475049470
    H               -3.710702243563107    -0.907628669295484     1.511208475049470
    H               -4.120832243563108     0.426151330704516     0.369976475049470

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-009GLN-068ILE-1-dimer.npy', np.array(charges))