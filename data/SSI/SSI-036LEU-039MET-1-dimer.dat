import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                2.001589301084623     1.330636137071758    -1.753520997405979
    C                1.321589301084623     1.686636137071758    -3.083520997405980
    H                1.585589301084623     0.402636137071758    -1.358520997405979
    H                3.071589301084622     1.199636137071758    -1.916520997405979
    H                1.857589301084623     2.138636137071757    -1.035520997405979
    H                1.757589301084623     2.619636137071758    -3.436520997405979
    H                0.245469301084623     1.824228537071758    -2.901750997405979
    H                1.491949301084623     0.912898137071758    -3.846610997405979
    C               -0.612410698915377     0.761636137071758     1.042479002594021
    C               -1.386410698915377    -1.677363862928242     2.197479002594021
    S               -0.610410698915377    -1.008363862928242     0.713479002594021
    H               -0.143410698915377     0.955636137071758     2.005479002594021
    H               -0.056410698915377     1.278636137071758     0.261479002594021
    H               -1.636410698915377     1.136636137071758     1.049479002594021
    H               -0.789410698915377    -1.383363862928242     3.062479002594021
    H               -1.364410698915377    -2.766363862928242     2.134479002594021
    H               -2.424050698915378    -1.352417862928242     2.363969002594021

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-036LEU-039MET-1-dimer.npy', np.array(charges))