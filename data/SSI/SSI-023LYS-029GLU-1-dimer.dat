import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.579929715370168     1.520424364606954    -0.527846277889840
    C                1.765929715370168     0.260424364606954    -1.365846277889840
    N                1.241929715370168     2.687424364606954    -1.387846277889840
    H                0.785929715370168     1.350424364606954     0.204153722110160
    H                2.505929715370168     1.717424364606954     0.022153722110160
    H                2.544929715370168     0.440424364606954    -2.109846277889839
    H                0.831929715370168     0.028424364606954    -1.883846277889840
    H                0.375929715370168     2.532424364606954    -1.888846277889840
    H                1.120929715370168     3.524424364606955    -0.830846277889840
    H                1.968929715370168     2.875424364606955    -2.066846277889840
    H                2.057327815370168    -0.597901635393046    -0.742658277889840
    C               -0.747070284629832    -1.621575635393046     2.185153722110161
    C               -1.206070284629832    -1.182575635393046     0.797153722110160
    O               -1.088070284629832     0.024424364606954     0.485153722110160
    O               -1.692070284629832    -2.034575635393046     0.018153722110160
    H               -1.076070284629832    -0.874575635393046     2.912153722110161
    H                0.342929715370168    -1.658575635393046     2.237153722110161
    H               -1.174518284629832    -2.591085635393046     2.480691722110161

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-023LYS-029GLU-1-dimer.npy', np.array(charges))