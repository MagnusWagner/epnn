import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.083938991034741     0.383141227221761    -1.846488592957417
    C                1.831938991034741     1.169141227221761    -0.731488592957417
    H                1.394938991034741    -0.661858772778239    -1.847488592957417
    H                0.008938991034741     0.432141227221761    -1.677488592957417
    H                1.297938991034741     0.827141227221761    -2.819488592957418
    H                1.735938991034741     0.622141227221761     0.206511407042583
    H                1.316938991034741     2.124141227221762    -0.621488592957417
    H                2.896988991034741     1.349160227221761    -0.939478592957417
    C               -1.008061008965259    -0.393858772778239     0.799511407042583
    C               -1.901061008965259    -1.157858772778239     1.779511407042583
    H               -0.314061008965259     0.241141227221761     1.351511407042583
    H               -0.440061008965259    -1.104858772778239     0.198511407042583
    H               -1.609061008965259     0.220141227221761     0.128511407042583
    H               -2.663061008965259    -1.678858772778239     1.198511407042583
    H               -2.394681008965259    -0.469934772778239     2.481722407042583
    H               -1.311201008965259    -1.907222772778239     2.327703407042582

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-028ILE-091VAL-1-dimer.npy', np.array(charges))