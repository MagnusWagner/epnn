import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.955169754233459    -1.619753771877893     0.349142708931119
    C                0.461169754233459    -1.381753771877893     0.524142708931119
    O               -0.378830245766541    -2.223753771877893     0.169142708931119
    N                0.110169754233459    -0.239753771877893     1.068142708931119
    H               -0.863830245766541    -0.059753771877893     1.276142708931119
    H                0.829169754233459     0.471246228122107     1.234142708931119
    H                2.173169754233459    -2.613753771877893     0.738142708931119
    H                2.527169754233459    -0.897753771877893     0.932142708931119
    H                2.251469754233459    -1.557333771877893    -0.708359291068881
    C               -0.909830245766541     2.182246228122108    -0.489857291068881
    C               -1.187830245766540     3.124246228122107    -1.613857291068881
    H               -1.613830245766541     2.335246228122108     0.329142708931119
    H               -1.005830245766541     1.160246228122107    -0.858857291068881
    H                0.111169754233459     2.310246228122107    -0.140857291068881
    H               -0.381830245766541     3.023246228122107    -2.340857291068881
    H               -1.207320245766540     4.154076228122108    -1.227761291068881
    H               -2.132390245766540     2.853036228122107    -2.108078291068881

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-017GLN-093VAL-1-dimer.npy', np.array(charges))