import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.133217693620865    -1.705182957875397    -0.078956149538433
    C               -0.058217693620865    -2.775182957875396    -0.217956149538433
    H               -0.903217693620865    -0.987182957875396     0.699043850461567
    H               -1.281217693620865    -1.193182957875397    -1.028956149538433
    H               -2.068217693620865    -2.197182957875397     0.188043850461567
    H               -0.498217693620865    -3.639182957875397    -0.714956149538433
    H                0.300072306379135    -3.086422957875397     0.774393850461567
    H                0.779642306379135    -2.421721957875397    -0.836871149538433
    C               -0.063217693620865     1.902817042124604     0.004043850461567
    C                1.256782306379135     2.586817042124604     0.297043850461567
    H               -0.892217693620865     2.459817042124604     0.441043850461567
    H               -0.210217693620865     1.822817042124603    -1.073956149538434
    H               -0.033217693620865     0.907817042124603     0.433043850461567
    H                2.037782306379135     2.026817042124604    -0.214956149538433
    H                1.474682306379135     2.581157042124604     1.375230850461566
    H                1.268992306379135     3.616097042124604    -0.090820149538433

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-131LEU-136VAL-1-dimer.npy', np.array(charges))