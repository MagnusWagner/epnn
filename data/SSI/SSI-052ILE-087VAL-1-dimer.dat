import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -2.088730529525836    -1.026759453005996    -0.098062812532369
    C               -1.875730529525836     0.489240546994004     0.015937187467631
    H               -2.664730529525836    -1.292759453005996    -0.980062812532369
    H               -1.127730529525836    -1.533759453005995    -0.165062812532369
    H               -2.592730529525836    -1.413759453005996     0.786937187467631
    H               -1.393730529525836     0.838240546994004    -0.897062812532369
    H               -1.185730529525836     0.678240546994004     0.839937187467631
    H               -2.788170529525836     1.079340546994005     0.186928187467631
    C                1.433269470474164     0.447240546994005    -0.490062812532369
    C                2.525269470474164     0.092240546994004     0.569937187467631
    H                1.844269470474164     0.372240546994004    -1.498062812532369
    H                0.631269470474164    -0.274759453005996    -0.410062812532369
    H                1.042269470474164     1.452240546994005    -0.323062812532369
    H                2.179269470474164     0.440240546994004     1.543937187467631
    H                3.447719470474164     0.625510546994004     0.296593187467631
    H                2.678539470474164    -0.994379453005995     0.645849187467631

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-052ILE-087VAL-1-dimer.npy', np.array(charges))