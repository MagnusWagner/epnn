import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.070862618110183    -0.368740374007391    -1.580939907216440
    C                0.260862618110183     0.351259625992609    -2.928939907216439
    H               -0.245137381889817    -1.398740374007391    -1.752939907216440
    H                1.016862618110183    -0.379740374007391    -1.042939907216440
    H               -0.674137381889817     0.151259625992609    -0.982939907216440
    H                1.104862618110183    -0.113740374007391    -3.435939907216440
    H               -0.638127381889817     0.320531625992609    -3.562089907216440
    H                0.479722618110183     1.413038625992609    -2.742589907216439
    C                0.586862618110183     0.030259625992609     2.142060092783560
    C               -0.929137381889817    -0.018740374007391     2.369060092783561
    H                1.022862618110183    -0.967740374007391     2.191060092783560
    H                0.788862618110183     0.426259625992609     1.148060092783560
    H                1.067862618110183     0.685259625992609     2.869060092783561
    H               -1.360137381889816    -0.783740374007391     1.732060092783560
    H               -1.069117381889817    -0.241861374007391     3.437060092783561
    H               -1.368767381889817     0.960196625992609     2.127370092783560

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-062LEU-079LEU-1-dimer.npy', np.array(charges))