import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    1 1
    --
    1 1
    C               -2.047489924887617    -2.196177839391658    -0.250811039312016
    N               -0.811489924887617    -1.901177839391658     0.534188960687984
    H               -0.778489924887617    -2.430177839391658     1.405188960687984
    H                0.011510075112383    -2.144177839391658    -0.014811039312016
    H               -0.733489924887617    -0.904177839391658     0.727188960687984
    H               -2.102489924887617    -3.264177839391658    -0.484811039312016
    H               -2.023489924887617    -1.656177839391658    -1.200811039312016
    H               -2.955029924887617    -1.915597839391658     0.303838960687984
    C                1.691510075112383     1.920822160608342     0.664188960687984
    C                0.678510075112383     1.081822160608342    -0.084811039312016
    O               -0.481489924887617     0.978822160608342     0.314188960687984
    N                1.101510075112384     0.478822160608342    -1.178811039312016
    H                1.502510075112383     2.965822160608342     0.422188960687984
    H                2.690510075112383     1.676822160608342     0.310188960687984
    H                0.434510075112383    -0.050177839391658    -1.721811039312016
    H                2.081510075112383     0.564822160608342    -1.442811039312016
    H                1.644080075112383     1.782830160608342     1.754468960687984

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-077LYS-186ASN-2-dimer.npy', np.array(charges))