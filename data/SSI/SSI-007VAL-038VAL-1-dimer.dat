import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.696219325670333     0.224223703352870    -1.196266922242998
    C               -2.566219325670332    -0.923776296647130    -0.742266922242998
    H               -2.206219325670332     0.815223703352870    -1.957266922242998
    H               -1.506219325670332     0.883223703352870    -0.346266922242998
    H               -0.735219325670332    -0.133776296647130    -1.570266922242998
    H               -3.519219325670332    -0.493776296647130    -0.449266922242998
    H               -2.745429325670333    -1.616947996647130    -1.577370922242998
    H               -2.153949325670332    -1.401357996647130     0.158817077757002
    C                1.438780674329668     0.384223703352870     0.649733077757002
    C                2.829780674329668     0.301223703352870     1.282733077757002
    H                1.050780674329668    -0.616776296647130     0.458733077757002
    H                0.762780674329668     0.894223703352870     1.337733077757002
    H                1.458780674329667     0.962223703352870    -0.275266922242998
    H                3.244780674329668     1.308223703352870     1.321733077757002
    H                3.476230674329668    -0.337178296647130     0.662612077757002
    H                2.800000674329667    -0.095357296647130     2.308324077757002

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-007VAL-038VAL-1-dimer.npy', np.array(charges))