import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C               -2.080103159135897     0.197258071561490     2.594253449151292
    C               -1.709103159135897    -0.318741928438510     1.210253449151292
    O               -2.102103159135897     0.257258071561490     0.197253449151292
    N               -0.949103159135897    -1.401741928438510     1.158253449151292
    H               -2.402103159135897    -0.637741928438510     3.218253449151292
    H               -2.925103159135897     0.879258071561490     2.481253449151292
    H               -0.626103159135897    -1.701741928438510     0.248253449151292
    H               -0.758103159135897    -1.922741928438510     1.995253449151292
    H               -1.246503159135897     0.724088071561490     3.081653449151292
    C                2.587896840864103     1.458258071561490    -1.471746550848708
    C                1.652896840864103     0.268258071561490    -1.272746550848708
    O                0.460896840864103     0.392258071561490    -1.630746550848708
    O                2.102896840864103    -0.790741928438510    -0.779746550848708
    H                2.067896840864103     2.386258071561489    -1.225746550848708
    H                2.871896840864103     1.497258071561490    -2.524746550848708
    H                3.500956840864103     1.382168071561490    -0.863036550848708

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-088ASN-092ASP-1-dimer.npy', np.array(charges))