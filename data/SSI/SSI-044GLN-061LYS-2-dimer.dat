import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    1 1
    --
    1 1
    C                0.889821407343301    -2.064894402777888    -0.626411707367860
    C                0.336821407343301    -0.758894402777888    -1.161411707367860
    O                0.236821407343301     0.230105597222112    -0.433411707367860
    N                0.035821407343301    -0.750894402777888    -2.441411707367860
    H                1.932821407343301    -2.148894402777888    -0.931411707367860
    H                0.334821407343301    -2.893894402777888    -1.069411707367860
    H               -0.309178592656699     0.106105597222112    -2.849411707367860
    H                0.154821407343301    -1.580894402777888    -3.005411707367860
    H                0.817292407343301    -2.125814402777888     0.469502292632140
    C               -0.698178592656699     1.081105597222112     2.829588292632140
    N               -0.676178592656699     1.949105597222112     1.612588292632140
    H                0.033821407343301     2.672105597222111     1.719588292632140
    H               -1.567178592656699     2.410105597222111     1.462588292632140
    H               -0.445178592656699     1.412105597222112     0.775588292632140
    H               -0.886178592656699     1.692105597222112     3.719588292632140
    H                0.270821407343301     0.584105597222112     2.953588292632140
    H               -1.490198592656699     0.322385597222112     2.745608292632140

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-044GLN-061LYS-2-dimer.npy', np.array(charges))