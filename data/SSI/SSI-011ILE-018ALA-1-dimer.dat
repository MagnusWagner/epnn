import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -2.013912478277839    -0.105523487323751     0.510261023718412
    C               -2.732912478277839     0.995476512676249    -0.270738976281588
    H               -1.333912478277839    -0.653523487323751    -0.143738976281588
    H               -1.445912478277839     0.320476512676249     1.337261023718412
    H               -2.735912478277839    -0.792523487323751     0.943261023718412
    H               -3.460912478277839     1.457476512676249     0.396261023718412
    H               -3.261772478277839     0.559866512676249    -1.131288976281588
    H               -2.043462478277839     1.770396512676249    -0.637008976281588
    C                1.804087521722161    -0.282523487323751     0.357261023718412
    C                2.947087521722161    -0.604523487323751    -0.600738976281588
    H                1.248087521722161    -1.187523487323751     0.608261023718412
    H                2.191087521722161     0.167476512676249     1.272261023718412
    H                1.124087521722161     0.430476512676249    -0.112738976281588
    H                3.524087521722160     0.297476512676249    -0.815738976281588
    H                2.532669521722161    -1.046473487323751    -1.518858976281588
    H                3.610069521722161    -1.358203487323751    -0.150828976281588

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-011ILE-018ALA-1-dimer.npy', np.array(charges))