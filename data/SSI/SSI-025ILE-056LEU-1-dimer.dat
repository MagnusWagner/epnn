import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.104103831595564     1.850511090801762    -0.032494115841162
    C                0.392896168404436     3.027511090801762     0.795505884158838
    H               -1.128103831595564     2.016511090801762    -0.362494115841162
    H                0.526896168404436     1.748511090801762    -0.914494115841162
    H               -0.047103831595564     0.926511090801762     0.538505884158838
    H                0.360896168404436     3.928511090801762     0.182505884158838
    H                1.441896168404436     2.848511090801762     1.038505884158838
    H               -0.155451831595564     3.189507090801762     1.735224884158838
    C                0.377896168404436    -1.935488909198238    -0.159494115841162
    C               -0.674103831595564    -2.946488909198238    -0.598494115841162
    H                1.377896168404436    -2.331488909198238    -0.337494115841162
    H                0.256896168404436    -1.014488909198238    -0.728494115841162
    H                0.260896168404436    -1.716488909198238     0.902505884158838
    H               -1.660103831595564    -2.533488909198239    -0.381494115841162
    H               -0.546743831595564    -3.891968909198238    -0.050919115841162
    H               -0.599576831595564    -3.123038909198238    -1.681673115841162

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-025ILE-056LEU-1-dimer.npy', np.array(charges))