import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.629624341861647    -1.394184221434500     0.977570032611901
    C                1.733624341861647    -2.166184221434500     1.713570032611901
    H                0.428624341861647    -1.867184221434500     0.016570032611901
    H               -0.296375658138353    -1.404184221434500     1.553570032611901
    H                0.933624341861647    -0.360184221434500     0.808570032611901
    H                1.311624341861647    -3.124184221434501     2.021570032611900
    H                2.075502341861647    -1.636985221434500     2.615270032611900
    H                2.577283341861647    -2.390683221434500     1.044360032611900
    C               -0.682375658138353     1.206815778565500    -1.259429967388100
    C               -1.679375658138353     2.360815778565500    -1.426429967388100
    H               -0.512375658138353     0.759815778565500    -2.225429967388100
    H                0.292624341861647     1.551815778565500    -0.915429967388099
    H               -1.064375658138353     0.462815778565500    -0.557429967388099
    H               -1.403375658138353     2.944815778565500    -2.305429967388100
    H               -1.668646658138353     3.021015778565499    -0.546639967388099
    H               -2.691962658138353     1.956645778565500    -1.572419967388099

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-009ILE-155ILE-1-dimer.npy', np.array(charges))