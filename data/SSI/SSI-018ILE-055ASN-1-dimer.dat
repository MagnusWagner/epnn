import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.026544699082543    -1.911017925848000     0.711154232563926
    C                0.559544699082543    -3.232017925848000     1.302154232563926
    H                1.885544699082543    -2.074017925848000     0.057154232563926
    H                0.221544699082543    -1.448017925848000     0.142154232563926
    H                1.290544699082543    -1.201017925848000     1.498154232563926
    H               -0.282455300917457    -3.030017925848000     1.966154232563926
    H                1.351444699082543    -3.727937925848000     1.882644232563926
    H                0.215104699082543    -3.888097925848001     0.489184232563926
    C               -1.730455300917457     1.092982074152000    -1.038845767436074
    C               -0.360455300917457     1.362982074152000    -0.456845767436074
    O               -0.248455300917457     1.745982074152000     0.719154232563926
    N                0.684544699082543     1.090982074152000    -1.230845767436074
    H               -2.209455300917457     0.353982074152000    -0.394845767436074
    H               -1.617455300917457     0.649982074152000    -2.025845767436074
    H                1.409544699082543     0.577982074152000    -0.767845767436074
    H                0.541544699082543     0.921982074152000    -2.229845767436073
    H               -2.363225300917457     1.991192074152000    -1.091935767436074

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-018ILE-055ASN-1-dimer.npy', np.array(charges))