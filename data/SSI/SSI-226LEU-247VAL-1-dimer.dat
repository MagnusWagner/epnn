import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.768749916145813    -1.546586149924834     0.728572282309202
    C                0.460749916145813    -0.949586149924834     2.095572282309202
    H               -0.134250083854187    -1.588586149924834     0.124572282309202
    H                1.504749916145813    -0.929586149924834     0.215572282309202
    H                1.167749916145813    -2.554586149924834     0.841572282309202
    H                0.033749916145813     0.038413850075166     1.948572282309202
    H               -0.263670083854187    -1.584084189924834     2.627198282309202
    H                1.383466916145813    -0.827568049924834     2.681836282309202
    C               -1.310250083854187     0.937413850075166    -1.354427717690798
    C                0.080749916145813     1.559413850075166    -1.469427717690798
    H               -1.468250083854187     0.211413850075166    -2.148427717690798
    H               -1.412250083854187     0.423413850075166    -0.398427717690798
    H               -2.073250083854187     1.714413850075166    -1.422427717690798
    H                0.811749916145813     0.752413850075166    -1.486427717690798
    H                0.166651916145813     2.146411850075165    -2.395737717690798
    H                0.283555916145813     2.190125850075165    -0.591317717690798

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-226LEU-247VAL-1-dimer.npy', np.array(charges))