import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.660057686211184     1.171089534394170    -0.718665135036738
    C               -0.216057686211184     2.313089534394170     0.187334864963262
    O                0.437942313788816     0.700089534394170    -1.458665135036737
    H               -1.066057686211184     0.367089534394170    -0.107665135036738
    H               -1.437057686211184     1.517089534394170    -1.401665135036738
    H                0.557942313788816     1.945089534394170     0.862334864963263
    H                0.199942313788816    -0.161910465605830    -1.848665135036738
    H               -1.058027686211184     2.730693534394169     0.758914864963262
    H                0.203952313788816     3.118350534394170    -0.433265135036738
    C               -0.400057686211184    -1.922910465605830     1.491334864963262
    C                0.806942313788816    -2.245910465605830     0.628334864963263
    H               -0.714057686211184    -2.812910465605830     2.040334864963262
    H               -0.137057686211184    -1.142910465605830     2.206334864963263
    H               -1.238057686211184    -1.565910465605830     0.894334864963263
    H                1.125942313788816    -1.341910465605830     0.109334864963262
    H                0.565362313788816    -3.024082465605830    -0.110645135036738
    H                1.633762313788816    -2.587693465605830     1.268304864963262

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-095SER-114THR-1-dimer.npy', np.array(charges))