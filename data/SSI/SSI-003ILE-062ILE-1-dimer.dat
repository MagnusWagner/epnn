import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.795187492683914     0.568228365619752     1.582824902116778
    C               -0.518187492683914     2.037228365619752     1.289824902116778
    H               -1.216187492683913     0.099228365619752     0.697824902116778
    H                0.145812507316086     0.071228365619752     1.817824902116778
    H               -1.457187492683914     0.470228365619752     2.443824902116778
    H               -0.066187492683914     2.141228365619752     0.301824902116778
    H                0.186812507316086     2.397228365619752     2.039824902116778
    H               -1.456025492683913     2.609278365619752     1.346597902116778
    C                0.990812507316086    -0.973771634380248    -0.836175097883222
    C                0.317812507316086    -1.631771634380248    -2.042175097883222
    H                2.074812507316087    -0.989771634380248    -0.954175097883222
    H                0.666812507316086     0.055228365619752    -0.716175097883222
    H                0.728812507316086    -1.493771634380249     0.084824902116778
    H               -0.763187492683914    -1.574771634380248    -1.916175097883222
    H                0.618006507316086    -2.687481634380248    -2.115428237883223
    H                0.594263507316086    -1.096821634380248    -2.962720197883222

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-003ILE-062ILE-1-dimer.npy', np.array(charges))