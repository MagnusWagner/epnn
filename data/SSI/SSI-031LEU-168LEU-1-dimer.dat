import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.956572655353775    -1.299934896772175    -1.853425270420517
    C                2.363572655353775    -0.740934896772175    -2.120425270420517
    H                0.918572655353775    -1.758934896772175    -0.864425270420517
    H                0.226572655353775    -0.492934896772175    -1.909425270420517
    H                0.711572655353775    -2.046934896772175    -2.605425270420517
    H                2.313572655353775    -0.250934896772175    -3.089425270420517
    H                3.081322655353775    -1.569824196772175    -2.208615270420517
    H                2.635962655353775     0.033187103227825    -1.387935270420517
    C               -0.830427344646225     0.482065103227825     1.011574729579483
    C               -1.379427344646225    -0.392934896772175     2.152574729579483
    C               -1.167427344646225     1.990065103227825     0.901574729579483
    H                0.256572655353775     0.383065103227825     1.015574729579483
    H               -1.168427344646225     0.020065103227825     0.082574729579483
    H               -2.441427344646225    -0.186934896772175     2.277574729579483
    H               -0.902427344646225     2.515065103227826     1.818574729579483
    H               -0.851097344646225    -0.142190896772175     3.084234729579483
    H               -1.248757344646225    -1.466825396772175     1.953364729579483
    H               -0.610517344646225     2.407220103227825     0.049614729579483
    H               -2.241177344646225     2.100577103227825     0.689814729579483

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-031LEU-168LEU-1-dimer.npy', np.array(charges))