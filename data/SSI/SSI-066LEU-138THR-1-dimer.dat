import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.602166931169199     0.224771748902961     1.721456678053841
    C               -0.936166931169199     0.306771748902961     3.204456678053841
    H               -1.370166931169199    -0.346228251097039     1.198456678053841
    H               -0.564166931169199     1.227771748902961     1.299456678053841
    H                0.366833068830801    -0.257228251097039     1.581456678053841
    H               -1.921166931169199     0.759771748902961     3.307456678053842
    H               -0.949786931169199    -0.708638251097039     3.627246678053841
    H               -0.201966931169199     0.932891748902961     3.732586678053841
    C                0.321833068830801    -0.548228251097039    -1.908543321946158
    C                1.217833068830801     0.015771748902961    -3.018543321946158
    H               -0.206166931169199    -1.436228251097039    -2.258543321946159
    H                0.926833068830801    -0.814228251097039    -1.042543321946159
    H               -0.409166931169199     0.202771748902961    -1.602543321946159
    H                1.796833068830801     0.837771748902961    -2.605543321946159
    H                0.607553068830801     0.379371748902961    -3.858393321946159
    H                1.908673068830801    -0.766928251097039    -3.365123321946158

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-066LEU-138THR-1-dimer.npy', np.array(charges))