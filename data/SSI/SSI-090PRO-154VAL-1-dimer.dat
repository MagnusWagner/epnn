import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.153855517046442     1.067006820045829    -0.981595216523899
    C               -0.717855517046442     1.974006820045829    -2.037595216523899
    C                0.613144482953558     0.001006820045829    -1.721595216523899
    H               -0.991855517046442     0.610006820045829    -0.458595216523899
    H                0.479144482953558     1.610006820045829    -0.278595216523899
    H               -1.701855517046442     2.337006820045829    -1.738595216523899
    H               -0.037855517046442     2.808006820045829    -2.212595216523898
    H                0.646144482953558    -0.933993179954171    -1.160595216523899
    H                1.629144482953558     0.354006820045829    -1.891595216523899
    H               -0.766573517046442     1.343666820045829    -2.937760216523898
    H                0.097652482953558    -0.102663179954171    -2.687783216523898
    C               -0.276855517046442    -1.482993179954171     1.699404783476101
    C                0.521144482953558    -1.485993179954171     2.987404783476101
    H               -0.191855517046442    -0.507993179954171     1.234404783476101
    H                0.132144482953558    -2.226993179954171     1.012404783476101
    H               -1.323855517046442    -1.704993179954171     1.879404783476101
    H                1.531144482953558    -1.144993179954171     2.765404783476102
    H                0.078371482953558    -0.803203179954171     3.727504783476101
    H                0.590105482953558    -2.507473179954171     3.389674783476102

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-090PRO-154VAL-1-dimer.npy', np.array(charges))