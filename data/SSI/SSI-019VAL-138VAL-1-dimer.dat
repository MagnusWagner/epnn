import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.569797145229026    -0.270987756820637     1.931793710549068
    C                1.998797145229026     0.173012243179363     2.067793710548068
    H                0.203797145229026    -0.060987756820637     0.937793710548068
    H                0.533797145229026    -1.318987756820637     2.169793710549068
    H               -0.042202854770974     0.266012243179363     2.654793710549068
    H                2.532797145229026    -0.129987756820637     1.165793710548068
    H                2.466064145229026    -0.319975756820637     2.933023710549068
    H                2.034844145229027     1.268839243179363     2.156473710548068
    C               -0.617202854770974     0.223012243179363    -1.675206289450932
    C               -1.956202854770974    -0.118987756820637    -2.322206289451932
    H                0.161797145229026     0.276012243179363    -2.436206289451932
    H               -0.666202854770974     1.178012243179364    -1.148206289451932
    H               -0.348202854770974    -0.583987756820637    -0.999206289451932
    H               -1.953202854770974    -1.178987756820637    -2.565206289450932
    H               -2.778335854770973     0.105164243179363    -1.626606289450932
    H               -2.087660854770974     0.426850243179363    -3.268136289450932

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-019VAL-138VAL-1-dimer.npy', np.array(charges))