import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.332225299429657     0.601772922861579     1.013720567180360
    C               -2.370225299429657     0.647772922861579     2.121720567180360
    H               -1.110225299429657    -0.419227077138421     0.715720567180360
    H               -1.704225299429657     1.132772922861579     0.138720567180360
    H               -0.413225299429657     1.083772922861579     1.352720567180360
    H               -3.300225299429657     0.208772922861579     1.756720567180360
    H               -2.559225299429657     1.698772922861579     2.343720567180360
    H               -2.053129299429657     0.125492922861579     3.036421567180360
    C                1.625774700570343    -0.715227077138421    -0.842279432819640
    C                2.075774700570343    -0.535227077138421    -2.293279432819641
    H                0.938774700570343    -1.555227077138421    -0.740279432819640
    H                2.491774700570343    -0.921227077138421    -0.211279432819640
    H                1.142774700570343     0.197772922861579    -0.491279432819640
    H                2.511774700570343    -1.477227077138421    -2.605279432819640
    H                1.219420700570343    -0.311367077138421    -2.946382432819640
    H                2.846466700570343     0.247732922861579    -2.348122432819640

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-025ILE-091VAL-1-dimer.npy', np.array(charges))