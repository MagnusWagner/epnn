import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.322591409215229     1.657866741331095    -0.673164963702984
    C                0.191591409215229     2.456866741331095    -1.962164963702983
    H                0.763591409215229     0.681866741331094    -0.877164963702984
    H                0.977591409215229     2.187866741331094     0.017835036297016
    H               -0.656408590784771     1.530866741331094    -0.211164963702984
    H                1.172591409215229     2.521866741331094    -2.434164963702984
    H               -0.139408590784771     3.449866741331094    -1.667164963702984
    H               -0.542888590784771     2.046586741331095    -2.670824963702984
    C               -0.364408590784771    -1.333133258668905     1.112835036297017
    C               -0.152408590784771    -2.787133258668905     1.519835036297016
    H                0.493591409215229    -0.735133258668906     1.419835036297016
    H               -0.468408590784771    -1.273133258668906     0.028835036297016
    H               -1.265408590784771    -0.943133258668906     1.583835036297016
    H                0.765591409215229    -3.143133258668906     1.053835036297016
    H               -0.070528590784771    -2.859673258668905     2.614385036297016
    H               -0.998538590784771    -3.398833258668906     1.173595036297016

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-134ILE-167LEU-1-dimer.npy', np.array(charges))