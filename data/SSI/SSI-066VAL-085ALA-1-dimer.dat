import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.194251014401633     1.439574699714878     1.032529737567863
    C               -0.040251014401633     1.429574699714877     2.569529737567864
    H                0.643748985598367     0.913574699714878     0.575529737567863
    H               -1.119251014401633     0.939574699714878     0.757529737567863
    H               -0.242251014401633     2.459574699714878     0.653529737567863
    H               -0.783251014401633     2.122574699714878     2.967529737567863
    H                0.957938985598367     1.776954699714878     2.874389737567863
    H               -0.254941014401633     0.433974699714878     2.985089737567863
    C               -0.272251014401633    -0.868425300285122    -1.543470262432137
    C                0.509748985598367    -2.005425300285123    -2.057470262432137
    H               -0.514251014401633    -1.020425300285122    -0.492470262432137
    H                0.310748985598367     0.048574699714878    -1.641470262432137
    H               -1.196251014401633    -0.760425300285122    -2.110470262432137
    H                1.016748985598367    -1.695425300285122    -2.971470262432137
    H               -0.134991014401633    -2.867605300285123    -2.283210262432137
    H                1.280328985598367    -2.294945300285122    -1.327830262432137

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-066VAL-085ALA-1-dimer.npy', np.array(charges))