import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.375324232029586    -0.280564257229475     1.261001888890267
    C                1.833324232029586     0.926435742770525     2.073001888890267
    H                1.833324232029586    -1.195564257229475     1.633001888890268
    H                0.295324232029586    -0.386564257229475     1.356001888890268
    H                1.625324232029586    -0.140564257229475     0.210001888890268
    H                1.731324232029587     0.677435742770525     3.130001888890268
    H                1.167324232029586     1.761435742770525     1.851001888890268
    H                2.864157832029586     1.234328742770525     1.843689888890268
    C               -1.116675767970414     0.111435742770525    -1.288998111109733
    C               -2.086675767970414    -0.754564257229475    -2.052998111109733
    H               -1.428675767970414     0.210435742770525    -0.248998111109732
    H               -0.128675767970414    -0.343564257229475    -1.325998111109733
    H               -1.034675767970414     1.101435742770525    -1.729998111109732
    H               -1.795675767970414    -0.844564257229475    -3.098998111109732
    H               -3.111268767970414    -0.365751257229475    -1.957955111109732
    H               -2.080876767970414    -1.741159257229475    -1.566587111109732

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-068ILE-091LEU-1-dimer.npy', np.array(charges))