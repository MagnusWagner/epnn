import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.323946679824156     1.841230518567295     1.367726499147515
    C               -1.021946679824156     2.639230518567295     2.471726499147514
    H               -0.343946679824156     0.776230518567295     1.600726499147515
    H               -0.838946679824156     2.002230518567295     0.420726499147515
    H                0.707053320175844     2.170230518567295     1.245726499147515
    H               -0.918946679824156     3.704230518567295     2.259726499147515
    H               -0.573986679824156     2.417040518567295     3.451506499147515
    H               -2.091598679824156     2.382820518567295     2.481766499147514
    C                1.188053320175844    -1.879769481432705    -0.057273500852485
    C                0.354053320175844    -1.085769481432705    -1.036273500852485
    O                0.854053320175844    -0.219769481432705    -1.741273500852485
    N               -0.939946679824156    -1.361769481432705    -1.078273500852485
    H                0.901053320175844    -2.930769481432705    -0.128273500852485
    H                0.940053320175844    -1.526769481432705     0.942726499147514
    H               -1.522946679824156    -0.839769481432705    -1.713273500852485
    H               -1.357946679824156    -1.992769481432705    -0.400273500852485
    H                2.269383320175844    -1.791819481432705    -0.238933500852485

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-072THR-175GLN-1-dimer.npy', np.array(charges))