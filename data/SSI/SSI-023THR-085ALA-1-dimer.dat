import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.527111861485471    -1.524063622810804     0.621912333554661
    C                0.817111861485471    -3.019063622810804     0.730912333554661
    H                0.696111861485470    -1.039063622810803     1.584912333554661
    H                1.193111861485471    -1.078063622810804    -0.115087666445339
    H               -0.501888138514530    -1.351063622810803     0.306912333554661
    H                0.600111861485470    -3.500063622810803    -0.223087666445339
    H                0.211461861485470    -3.472943622810804     1.529142333554661
    H                1.884171861485471    -3.145593622810803     0.966232333554661
    C               -0.619888138514530     1.671936377189196    -0.208087666445339
    C               -0.723888138514530     2.872936377189197    -1.141087666445339
    H                0.188111861485470     1.817936377189197     0.502912333554661
    H               -1.555888138514530     1.520936377189197     0.326912333554661
    H               -0.403888138514530     0.782936377189197    -0.799087666445339
    H               -1.486888138514529     2.654936377189197    -1.890087666445339
    H                0.240141861485470     3.031596377189196    -1.646527666445339
    H               -1.069998138514529     3.757666377189196    -0.586597666445339

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-023THR-085ALA-1-dimer.npy', np.array(charges))