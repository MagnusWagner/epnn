import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C               -0.103943483745650    -1.511541820997714    -2.217953407921085
    C               -1.176943483745650    -0.503541820997714    -1.790953407921085
    O               -1.641943483745650    -0.541541820997714    -0.629953407921085
    O               -1.600943483745650     0.319458179002286    -2.624953407921085
    H                0.494056516254350    -1.081541820997714    -3.021953407921086
    H               -0.587943483745650    -2.409541820997714    -2.604953407921085
    H                0.579536516254351    -1.805797820997714    -1.407853407921085
    C                1.910056516254350     0.597458179002286     3.037046592078915
    C                1.135056516254350     0.584458179002286     1.743046592078915
    O                1.584056516254351     1.134458179002286     0.736046592078915
    N               -0.030943483745650    -0.043541820997714     1.746046592078915
    H               -0.552943483745649    -0.114541820997714     0.870046592078915
    H               -0.462943483745650    -0.378541820997714     2.597046592078915
    H                1.408056516254351    -0.023541820997714     3.780046592078915
    H                1.931056516254350     1.618458179002286     3.420046592078915
    H                2.941569516254350     0.240368179002286     2.901146592078915

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-081GLU-103GLN-2-dimer.npy', np.array(charges))