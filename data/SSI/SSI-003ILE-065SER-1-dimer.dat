import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.394257988283006     1.398871652593190     0.490957594462191
    C                1.671257988283006     2.867871652593190     0.197957594462191
    H                0.973257988283006     0.929871652593190    -0.394042405537809
    H                2.335257988283006     0.901871652593190     0.725957594462191
    H                0.732257988283006     1.300871652593190     1.351957594462192
    H                2.123257988283006     2.971871652593190    -0.790042405537809
    H                2.376257988283006     3.227871652593191     0.947957594462192
    H                0.733419988283006     3.439921652593190     0.254730594462191
    C               -0.960742011716994    -0.882128347406810     0.042957594462191
    C               -1.585742011716994    -2.130128347406810     0.655957594462191
    O               -0.539742011716994    -1.130128347406810    -1.288042405537808
    H               -1.692742011716994    -0.074128347406810     0.041957594462191
    H               -0.116742011716994    -0.601128347406810     0.661957594462191
    H               -2.236742011716994    -1.836128347406810     1.480957594462192
    H                0.155257988283006    -1.815128347406810    -1.271042405537808
    H               -0.800692011716994    -2.812018347406810     1.014729594462191
    H               -2.195977011716994    -2.634748347406810    -0.107569405537809

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-003ILE-065SER-1-dimer.npy', np.array(charges))