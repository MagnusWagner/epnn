import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.037560391785484    -0.180151424358961    -2.283236593132635
    C                1.421439608214516     0.363848575641039    -2.144236593132635
    H               -0.049560391785484    -1.267151424358961    -2.246236593132635
    H               -0.647560391785484     0.212848575641039    -1.472236593132635
    H               -0.462560391785484     0.142848575641039    -3.233236593132635
    H                1.742439608214516     0.121848575641039    -1.130236593132635
    H                2.128455608214516    -0.127455424358961    -2.828888593132635
    H                1.464774608214516     1.458788575641039    -2.240296593132635
    C               -0.346560391785484     0.081848575641039     1.545763406867365
    C               -1.037560391785484    -0.272151424358961     2.870763406867365
    H               -1.097560391785484     0.241848575641039     0.774763406867365
    H                0.211439608214516     1.005848575641039     1.651763406867365
    H                0.323439608214516    -0.723151424358961     1.245763406867365
    H               -1.718560391785484     0.539848575641039     3.115763406867365
    H               -1.610931391785484    -1.209806424358961     2.825497306867365
    H               -0.280939391785484    -0.317662424358961     3.667917206867365

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-048VAL-095LEU-1-dimer.npy', np.array(charges))