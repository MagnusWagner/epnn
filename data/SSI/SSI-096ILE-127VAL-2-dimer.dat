import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.715600633175800    -1.363026420283267    -0.622409617147062
    C               -1.652600633175800    -1.671026420283267    -1.829409617147062
    H                0.062399366824200    -0.671026420283267    -0.931409617147062
    H               -1.274600633175800    -0.916026420283267     0.196590382852938
    H               -0.259600633175800    -2.283026420283267    -0.250409617147062
    H               -2.258600633175800    -2.541026420283267    -1.571409617147062
    H               -1.067890633175800    -1.891806420283267    -2.734602617147062
    H               -2.322750633175800    -0.813576420283267    -1.989647617147062
    C                1.005399366824200     1.634973579716733     0.489590382852938
    C                1.365399366824200     1.390973579716733     1.952590382852938
    H                1.366399366824200     0.811973579716733    -0.122409617147062
    H               -0.075600633175800     1.733973579716733     0.385590382852938
    H                1.466399366824200     2.557973579716733     0.135590382852938
    H                1.207399366824200     2.329973579716733     2.473590382852938
    H                2.422979366824200     1.117863579716733     2.082740382852938
    H                0.702539366824200     0.661243579716733     2.440550382852938

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-096ILE-127VAL-2-dimer.npy', np.array(charges))