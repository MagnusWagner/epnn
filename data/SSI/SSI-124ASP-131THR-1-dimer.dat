import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                0.516146034042511     0.685062946921795     1.388476671575972
    C               -0.289853965957489    -0.324937053078205     2.210476671575972
    C                1.183146034042511     0.044062946921795     0.182476671575972
    O                1.201146034042511    -1.201937053078205     0.097476671575972
    O                1.677146034042511     0.796062946921795    -0.690523328424028
    H               -0.159853965957489     1.462062946921795     1.028476671575972
    H                1.271146034042511     1.177062946921795     2.000476671575973
    H               -0.846853965957489    -0.952937053078205     1.513476671575972
    H               -0.993663965957489     0.196682946921795     2.875731671575972
    H                0.364936034042511    -0.963137053078205     2.821995671575972
    C               -2.215853965957489    -0.204937053078205    -2.086523328424028
    O               -1.653853965957489     0.240062946921795    -0.856523328424028
    H               -2.375853965957489     0.294062946921795    -0.216523328424028
    H               -3.058853965957489     0.434062946921795    -2.354523328424028
    H               -1.452713965957489    -0.152427053078205    -2.877003328424028
    H               -2.579153965957489    -1.236347053078205    -1.967343328424028

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-124ASP-131THR-1-dimer.npy', np.array(charges))