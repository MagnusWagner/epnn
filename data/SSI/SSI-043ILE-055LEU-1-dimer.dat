import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.558308776506854     1.124315699521492    -0.309490133469368
    C               -2.543308776506854     0.803315699521492     0.788509866530632
    H               -2.043308776506854     1.715315699521492    -1.078490133469369
    H               -0.725308776506854     1.694315699521492     0.101509866530632
    H               -1.191308776506854     0.202315699521492    -0.757490133469368
    H               -2.975308776506854     1.722315699521492     1.160509866530632
    H               -1.939308776506854     0.364315699521492     1.577509866530631
    H               -3.338646776506854     0.111779699521492     0.473524566530632
    C                1.380691223493146    -0.768684300478508     0.048509866530632
    C                2.716691223493146    -1.161684300478508    -0.531490133469368
    H                1.039691223493146     0.153315699521492    -0.418490133469368
    H                0.655691223493146    -1.556684300478508    -0.150490133469368
    H                1.466691223493146    -0.625684300478508     1.125509866530631
    H                3.090691223493146    -2.027684300478508     0.000509866530632
    H                3.386191223493145    -0.300379300478508    -0.390351833469368
    H                2.624661223493146    -1.420650300478508    -1.596604133469369

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-043ILE-055LEU-1-dimer.npy', np.array(charges))