import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -2.354388773869321     0.300916067705103    -0.248686138588203
    C               -1.762388773869321    -1.003083932294897    -0.774686138588204
    H               -2.459388773869321     0.263916067705103     0.836313861411796
    H               -1.682388773869321     1.115916067705103    -0.506686138588204
    H               -3.309388773869321     0.489916067705103    -0.722686138588204
    H               -0.694388773869321    -0.997083932294897    -0.614686138588203
    H               -1.928388773869321    -1.068083932294897    -1.848686138588204
    H               -2.166152773869321    -1.896412932294897    -0.275749138588204
    C                1.464611226130679     0.282916067705103     0.023313861411796
    C                2.641611226130679     0.420916067705103     1.011313861411796
    H                1.628611226130679     0.919916067705103    -0.841686138588204
    H                1.421611226130679    -0.742083932294897    -0.338686138588204
    H                0.525611226130679     0.541916067705103     0.510313861411796
    H                2.482611226130679    -0.226083932294897     1.872313861411796
    H                2.764935226130679     1.464586067705103     1.336183861411796
    H                3.542394226130679     0.113766067705103     0.459723861411796

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-113ILE-185VAL-1-dimer.npy', np.array(charges))