import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.797648035232668    -0.880890134712240     0.322219149810569
    C                1.798648035232669    -2.310890134712240     0.924219149810569
    H                0.785648035232668    -0.479890134712240     0.322219149810569
    H                2.430648035232668    -0.215890134712240     0.908219149810569
    H                2.192648035232668    -0.875890134712240    -0.693780850189431
    H                2.805648035232668    -2.724890134712240     0.839219149810569
    H                1.088793035232668    -2.972446134712240     0.406099149810569
    H                1.487246035232668    -2.281336134712240     1.978809149810570
    C               -1.304351964767332     0.993109865287760    -0.700780850189431
    C               -2.296351964767332     2.193109865287760    -0.548780850189431
    H               -1.531351964767331     0.432109865287760    -1.605780850189431
    H               -0.285351964767332     1.377109865287760    -0.766780850189431
    H               -1.370351964767331     0.338109865287760     0.166219149810569
    H               -2.098351964767332     2.686109865287760     0.400219149810569
    H               -3.343738864767332     1.857629865287759    -0.569610850189431
    H               -2.109000864767332     2.925481865287760    -1.347860850189430

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-105ILE-128LEU-1-dimer.npy', np.array(charges))