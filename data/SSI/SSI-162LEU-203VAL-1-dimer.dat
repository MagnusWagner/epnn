import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.466130996542886     1.512650998873667    -0.864627590125864
    C               -2.470130996542886     0.442650998873667    -0.270627590125864
    H               -1.860130996542886     2.508650998873667    -0.678627590125864
    H               -0.505130996542886     1.413650998873667    -0.363627590125864
    H               -1.314130996542886     1.353650998873667    -1.932627590125864
    H               -2.097130996542886    -0.555349001126333    -0.493627590125864
    H               -3.489020996542886     0.557290998873667    -0.669013590125864
    H               -2.543620996542886     0.542080998873667     0.822401409874136
    C                1.315869003457114    -0.674349001126333     0.325372409874136
    C                2.625869003457114    -1.282349001126333     0.804372409874136
    H                0.526869003457114    -1.427349001126333     0.302372409874136
    H                1.005869003457114     0.111650998873667     1.013372409874136
    H                1.431869003457114    -0.249349001126333    -0.673627590125864
    H                2.483869003457114    -1.716349001126333     1.788372409874136
    H                2.940249003457114    -2.061409001126333     0.094285409874136
    H                3.355239003457114    -0.460549001126333     0.855958409874136

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-162LEU-203VAL-1-dimer.npy', np.array(charges))