import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.293883504017107    -0.820601250823634    -0.571138032143206
    C               -2.774883504017108    -0.464601250823634    -0.710138032143206
    H               -1.180883504017107    -1.902601250823634    -0.569138032143206
    H               -0.735883504017107    -0.423601250823634    -1.415138032143206
    H               -0.862883504017107    -0.420601250823634     0.338861967856794
    H               -2.871883504017108     0.621398749176366    -0.701138032143206
    H               -3.340523504017107    -0.898501250823634     0.127581967856794
    H               -3.180653504017108    -0.822341250823634    -1.667938032143206
    C                1.635116495982893     0.913398749176366     1.229861967856794
    C                2.436116495982893     0.375398749176366     0.053861967856794
    H                2.105116495982893     1.818398749176366     1.618861967856794
    H                0.623116495982893     1.159398749176366     0.909861967856794
    H                1.592116495982893     0.162398749176366     2.018861967856794
    H                1.980116495982893    -0.565601250823634    -0.259138032143206
    H                3.467926495982892     0.169188749176366     0.374551967856794
    H                2.374956495982892     1.059658749176366    -0.805238032143206

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-003VAL-118ALA-1-dimer.npy', np.array(charges))