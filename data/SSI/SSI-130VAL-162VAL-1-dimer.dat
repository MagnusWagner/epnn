import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.354456432705639     1.495717916372651     0.435564400015623
    C                0.764456432705639     2.766717916372651     1.186564400015623
    H                1.106456432705639     0.718717916372650     0.575564400015623
    H               -0.600543567294361     1.139717916372651     0.823564400015623
    H                0.227456432705639     1.695717916372651    -0.628435599984377
    H                0.041456432705639     3.547717916372651     0.945564400015623
    H                1.764996432705640     3.091354116372651     0.864804400015623
    H                0.758736432705639     2.645166406372651     2.279814400015623
    C               -0.423543567294361    -2.077282083627349    -0.062435599984377
    C               -0.688543567294361    -2.193282083627349    -1.559435599984377
    H                0.525456432705639    -1.585282083627350     0.142564400015623
    H               -1.220543567294361    -1.488282083627350     0.393564400015623
    H               -0.434543567294361    -3.066282083627350     0.388564400015623
    H               -0.826543567294361    -1.182282083627349    -1.945435599984377
    H                0.175526432705639    -2.649297083627349    -2.064845599984376
    H               -1.599183567294361    -2.770184083627349    -1.778355599984377

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-130VAL-162VAL-1-dimer.npy', np.array(charges))