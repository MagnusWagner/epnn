import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                2.341070847779510    -0.196065547365029     0.500275085107969
    C                2.378070847779509    -0.231065547365029     2.023275085107969
    H                1.899070847779510    -1.111065547365029     0.105275085107969
    H                1.742070847779510     0.654934452634971     0.177275085107969
    H                3.350070847779509    -0.081065547365029     0.104275085107969
    H                1.363070847779510    -0.379065547365029     2.389275085107970
    H                2.739070847779510     0.738934452634971     2.362275085107970
    H                3.020820847779510    -1.044315547365029     2.391375085107970
    C               -1.022929152220490     0.159934452634971    -1.032724914892031
    C               -2.264929152220490     0.519934452634971    -1.845724914892031
    O               -1.378929152220490    -0.197065547365029     0.293275085107969
    H               -0.519929152220490    -0.683065547365029    -1.510724914892031
    H               -0.337929152220490     1.007934452634971    -1.007724914892031
    H               -2.935929152220490    -0.341065547365029    -1.845724914892031
    H               -0.694929152220490    -0.778065547365029     0.654275085107969
    H               -2.000419152220490     0.770954452634971    -2.883524914892031
    H               -2.782479152220490     1.363218452634971    -1.365084914892031

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-090ILE-107SER-1-dimer.npy', np.array(charges))