import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.900284678750538     1.601113317675175    -1.168014017546918
    C               -0.894284678750538     2.606113317675175    -0.037014017546918
    H               -0.170284678750538     0.814113317675175    -1.003014017546918
    H               -1.889284678750538     1.147113317675174    -1.238014017546919
    H               -0.680284678750538     2.105113317675174    -2.108014017546918
    H               -1.138284678750538     2.083113317675175     0.888985982453082
    H               -1.693284678750538     3.318113317675175    -0.235014017546918
    H                0.055805321249462     3.144923317675175     0.093390982453082
    C                0.805715321249463    -1.536886682324825     0.101985982453082
    C                0.995715321249462    -2.670886682324825     1.103985982453082
    H                1.450715321249463    -0.698886682324825     0.360985982453082
    H                1.059715321249463    -1.884886682324825    -0.899014017546919
    H               -0.234284678750538    -1.210886682324825     0.114985982453082
    H                2.023715321249462    -3.019886682324825     1.018985982453082
    H                0.818265321249462    -2.286656682324825     2.119306982453082
    H                0.315795321249462    -3.504776682324825     0.875188982453082

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-047ILE-064LEU-1-dimer.npy', np.array(charges))