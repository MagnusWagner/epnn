import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.749812111717503     0.380762847622874     0.726859500556489
    C                3.161812111717503     0.947762847622874     0.846859500556489
    H                1.486812111717502    -0.247237152377126     1.568859500556489
    H                1.037812111717502     1.203762847622874     0.662859500556489
    H                1.681812111717502    -0.211237152377126    -0.185140499443511
    H                3.367812111717503     1.550762847622874    -0.038140499443511
    H                3.917981211717502     0.152742847622874     0.925279500556489
    H                3.237034111717502     1.593742847622874     1.734019500556489
    C               -1.467187888282498    -0.375237152377126    -1.085140499443511
    C               -1.399187888282498    -1.675237152377126    -0.317140499443511
    C               -2.140187888282497     0.692762847622874    -0.245140499443511
    H               -0.461187888282498    -0.055237152377126    -1.359140499443511
    H               -2.057187888282498    -0.504237152377126    -1.993140499443511
    H               -2.399187888282498    -1.915237152377126     0.048859500556489
    H               -0.752187888282498    -1.546237152377126     0.552859500556489
    H               -3.155187888282498     0.383762847622874     0.012859500556489
    H               -1.564187888282498     0.842762847622874     0.671859500556489
    H               -1.035440888282498    -2.530937152377126    -0.904900499443511
    H               -2.174267888282498     1.630332847622874    -0.819430499443511

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-045THR-168LYS-1-dimer.npy', np.array(charges))