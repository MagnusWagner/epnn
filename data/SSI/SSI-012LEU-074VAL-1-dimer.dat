import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.111526592801820    -0.103478594665176     1.216248429287583
    C                2.627526592801821    -0.177478594665176     1.429248429287583
    H                0.593526592801820    -0.520478594665176     2.080248429287583
    H                0.804526592801820     0.934521405334824     1.079248429287583
    H                0.840526592801820    -0.684478594665176     0.333248429287583
    H                3.099526592801821     0.286521405334824     0.571248429287583
    H                2.924306592801821    -1.235846594665176     1.471438429287584
    H                2.916066592801820     0.384252405334824     2.329918429287584
    C               -1.436473407198180     0.741521405334824    -1.127751570712417
    C               -2.304473407198180    -0.458478594665176    -1.515751570712417
    H               -1.713473407198180     1.100521405334824    -0.136751570712417
    H               -0.387473407198180     0.458521405334824    -1.124751570712417
    H               -1.565473407198180     1.547521405334824    -1.849751570712417
    H               -2.199473407198179    -1.211478594665176    -0.733751570712417
    H               -3.364595407198180    -0.176872594665176    -1.598451570712417
    H               -1.925443407198180    -0.907537594665176    -2.445631570712417

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-012LEU-074VAL-1-dimer.npy', np.array(charges))