import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                2.263410394446408     2.458984329891099    -0.725578079826649
    C                2.140410394446408     1.090984329891098    -0.077578079826649
    O                1.197410394446409     0.826984329891098     0.662421920173351
    N                3.086410394446408     0.208984329891099    -0.352578079826649
    H                1.380410394446408     2.570984329891099    -1.348578079826649
    H                3.136410394446408     2.502984329891099    -1.377578079826649
    H                3.016410394446408    -0.698015670108902     0.081421920173351
    H                3.900410394446408     0.455984329891098    -0.901578079826649
    H                2.326761394446408     3.262384329891098     0.023110920173351
    C               -2.596589605553592    -0.123015670108901    -0.832578079826649
    C               -2.122589605553592    -1.160015670108901     0.158421920173351
    O               -0.925589605553592    -1.312015670108901     0.388421920173351
    N               -3.050589605553592    -1.890015670108901     0.760421920173351
    H               -2.105589605553592    -0.326015670108901    -1.772578079826649
    H               -2.253589605553592     0.828984329891098    -0.431578079826649
    H               -2.742589605553592    -2.600015670108901     1.409421920173351
    H               -4.029589605553591    -1.785015670108901     0.547421920173351
    H               -3.685825605553592    -0.149655670108901    -0.983761079826649

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-022GLN-028GLN-1-dimer.npy', np.array(charges))