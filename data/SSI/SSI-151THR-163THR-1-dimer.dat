import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.012072497209951    -0.538744236578233     1.326839998059798
    C               -0.371927502790049    -1.650744236578233     2.276839998059797
    H                0.128072497209951    -1.095744236578233     0.404839998059797
    H               -0.801927502790049     0.185255763421767     1.293839998059797
    H                0.929072497209951    -0.035744236578233     1.633839998059797
    H               -0.411927502790049    -1.247744236578233     3.289839998059798
    H                0.356164497209951    -2.474394236578232     2.238329998059798
    H               -1.368987502790049    -2.014154236578233     1.987349998059798
    C               -0.077927502790049     0.591255763421767    -1.302160001940202
    C                0.441072497209951     1.596255763421767    -2.299160001940202
    H                0.835072497209951     0.308255763421767    -0.793160001940203
    H               -0.790927502790049     1.096255763421767    -0.652160001940203
    H               -0.571927502790049    -0.251744236578233    -1.785160001940203
    H               -0.377927502790049     1.860255763421767    -2.969160001940203
    H                1.267022997209950     1.185065763421767    -2.898100001940203
    H                0.769046697209951     2.507975763421767    -1.778400001940202

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-151THR-163THR-1-dimer.npy', np.array(charges))