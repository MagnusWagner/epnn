import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C               -0.835599248570629     2.614731233714355     0.022989180816147
    C               -0.125599248570629     2.064731233714355    -1.197010819183853
    O               -0.065599248570629     2.713731233714355    -2.234010819183853
    N                0.407400751429371     0.858731233714355    -1.096010819183853
    H                0.860400751429371     0.482731233714355    -1.910010819183853
    H                0.425400751429371     0.341731233714355    -0.224010819183853
    H               -0.645599248570629     1.954731233714355     0.868989180816147
    H               -1.907599248570629     2.603731233714355    -0.170010819183853
    H               -0.507889248570629     3.632841233714355     0.280019180816147
    C               -0.545599248570629    -2.902268766285645     0.184989180816147
    C                0.194400751429371    -2.000268766285645     1.177989180816147
    O                1.171400751429372    -1.324268766285645     0.776989180816147
    O               -0.221599248570629    -1.954268766285645     2.358989180816147
    H               -1.477599248570629    -2.403268766285645    -0.088010819183853
    H               -0.828599248570629    -3.846268766285645     0.651989180816147
    H                0.014470751429371    -3.077738766285645    -0.745350819183853

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-007ASN-109GLU-1-dimer.npy', np.array(charges))