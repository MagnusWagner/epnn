import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.994480881782610    -0.043746327776380     0.427565949274408
    C                3.371480881782610     0.313253672223619     0.993565949274408
    O                1.362480881782610    -1.196746327776381     1.012565949274408
    H                1.330480881782610     0.813253672223620     0.456565949274408
    H                2.126480881782610    -0.240746327776380    -0.637434050725592
    H                4.123480881782609    -0.083746327776380     0.312565949274408
    H                1.526480881782610    -1.940746327776380     0.395565949274408
    H                3.507200881782610    -0.096186327776380     2.005466049274407
    H                3.459030881782610     1.409403672223620     0.965348249274408
    C               -2.283519118217390    -0.872746327776381     0.117565949274408
    C               -1.698519118217390     0.349253672223620    -0.603434050725592
    O               -1.127519118217390     1.254253672223619     0.007565949274408
    N               -1.807519118217390     0.352253672223620    -1.928434050725592
    H               -1.956519118217390    -1.739746327776380    -0.454434050725592
    H               -3.374519118217390    -0.840746327776380     0.073565949274408
    H               -1.467519118217390     1.171253672223620    -2.413434050725592
    H               -2.440519118217390    -0.277746327776380    -2.390434050725593
    H               -1.926929118217390    -0.957106327776381     1.154736949274408

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-021SER-142ASN-1-dimer.npy', np.array(charges))