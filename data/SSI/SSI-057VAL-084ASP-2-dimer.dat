import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                2.334849868851609    -1.531924557333636    -0.804225677148396
    C                1.594849868851608    -2.767924557333636    -1.298225677148396
    H                2.772849868851608    -0.989924557333636    -1.643225677148396
    H                1.632849868851608    -0.882924557333636    -0.293225677148396
    H                3.115849868851608    -1.796924557333636    -0.091225677148396
    H                1.249849868851608    -3.296924557333636    -0.419225677148396
    H                2.266629868851609    -3.396194557333636    -1.901535677148396
    H                0.720379868851609    -2.464884557333636    -1.892755677148396
    C                0.063849868851609     0.848075442666364     1.075774322851604
    C               -0.279150131148391     2.079075442666364     1.914774322851604
    C               -0.985150131148392     0.563075442666364     0.006774322851604
    O               -1.071150131148392     1.340075442666364    -0.970225677148396
    O               -1.723150131148391    -0.436924557333636     0.146774322851604
    H                1.025849868851608     1.032075442666364     0.595774322851604
    H                0.167849868851609    -0.021924557333636     1.724774322851604
    H               -0.248150131148391     2.964075442666364     1.277774322851604
    H                0.443669868851609     2.184705442666364     2.737194322851604
    H               -1.296760131148392     1.975225442666364     2.319364322851603

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-057VAL-084ASP-2-dimer.npy', np.array(charges))