import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.329126691724729    -0.878882966637728    -1.011591379999982
    C               -1.661126691724728    -1.144882966637728    -1.756591379999982
    C               -0.191126691724728    -1.707882966637728     0.248408620000018
    H                0.490873308275272    -1.157882966637728    -1.669591379999982
    H               -0.221126691724728     0.177117033362272    -0.779591379999982
    H               -1.693126691724729    -2.198882966637728    -2.039591379999982
    H               -0.391126691724728    -2.757882966637728     0.031408620000018
    H                0.830873308275272    -1.617882966637728     0.620408620000018
    H               -0.861126691724729    -1.361882966637728     1.032408620000018
    H               -2.517664691724729    -0.941355966637728    -1.097111379999982
    H               -1.673592691724728    -0.543579966637728    -2.677611379999982
    C                1.360873308275272     1.973117033362272     0.533408620000018
    C                0.783873308275271     1.712117033362272     1.921408620000018
    H                2.151873308275271     2.720117033362272     0.578408620000018
    H                1.794873308275271     1.051117033362272     0.147408620000018
    H                0.574873308275271     2.314117033362272    -0.141591379999982
    H                1.597873308275271     1.452117033362272     2.600408620000018
    H                0.127873308275272     0.847117033362272     1.845408620000018
    H                0.224839308275271     2.570302033362271     2.322658620000018

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-048ILE-052ILE-1-dimer.npy', np.array(charges))