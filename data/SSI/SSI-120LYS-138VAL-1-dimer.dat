import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.831402798225796    -0.177683458968079    -1.017769627630408
    C                1.514402798225796    -1.462683458968078    -0.512769627630408
    C               -0.129597201774204    -0.415683458968079    -2.166769627630408
    H                0.336402798225796     0.322316541031921    -0.202769627630408
    H                1.459402798225796     0.562316541031921    -1.478769627630408
    H                1.698402798225796    -2.214683458968079    -1.273769627630408
    H                0.898402798225796    -1.898683458968078     0.276230372369592
    H               -1.119597201774204    -0.039683458968079    -1.896769627630408
    H                0.201402798225796     0.146316541031921    -3.044769627630408
    H                2.542511798225796    -1.321303458968079    -0.148073627630408
    H               -0.203026201774204    -1.475363458968078    -2.452567627630408
    C               -1.587597201774204     0.596316541031921     1.432230372369592
    C               -0.571597201774204     1.441316541031922     2.209230372369592
    H               -2.519597201774204     0.529316541031921     1.997230372369592
    H               -1.803597201774204     1.068316541031922     0.472230372369592
    H               -1.213597201774204    -0.408683458968079     1.248230372369592
    H                0.380402798225796     1.432316541031921     1.685230372369592
    H               -0.417792201774204     1.033086541031921     3.219028372369592
    H               -0.918577201774204     2.483706541031921     2.264283372369592

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-120LYS-138VAL-1-dimer.npy', np.array(charges))