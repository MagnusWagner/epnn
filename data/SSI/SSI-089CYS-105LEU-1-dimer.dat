import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.906302536945952     0.755674104201044    -0.704282652086763
    C               -1.625302536945952     1.040674104201044    -2.031282652086763
    S                0.852697463054048     0.403674104201044    -0.954282652086763
    H               -0.985302536945952     1.623674104201044    -0.047282652086763
    H               -1.364302536945952    -0.110325895798956    -0.216282652086763
    H               -1.507302536945952     0.147674104201044    -2.644282652086763
    H                1.292697463054048     0.825674104201044     0.239717347913237
    H               -1.188055536945952     1.908384104201044    -2.546932652086763
    H               -2.710203536945953     1.194939104201044    -1.935407652086763
    C               -0.116302536945952    -1.767325895798956     1.906717347913237
    C                0.760697463054048    -0.903325895798956     2.791717347913237
    H               -0.065302536945952    -2.806325895798956     2.227717347913237
    H               -1.145302536945952    -1.422325895798956     1.987717347913237
    H                0.201697463054048    -1.705325895798956     0.866717347913237
    H                0.590697463054048     0.134674104201044     2.511717347913237
    H                1.815432463054048    -1.156923295798956     2.609444347913236
    H                0.485104463054048    -1.029698895798956     3.849109347913237

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-089CYS-105LEU-1-dimer.npy', np.array(charges))