import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.708307286775475    -0.431056115690007     0.933837953954664
    C                2.010307286775475    -0.343056115690006    -0.557162046045336
    H                2.456307286775475    -1.052056115690006     1.430837953954664
    H                1.722307286775475     0.565943884309994     1.369837953954664
    H                0.722307286775475    -0.867056115690006     1.095837953954664
    H                1.311307286775475     0.377943884309993    -0.980162046045336
    H                1.789597286775475    -1.308275115690007    -1.036370046045336
    H                3.024507286775475     0.057720884309993    -0.701326046045336
    C               -1.935692713224525    -0.361056115690007    -0.038162046045336
    C               -1.777692713224525     1.128943884309993    -0.347162046045336
    H               -1.219692713224525    -0.949056115690006    -0.614162046045336
    H               -1.746692713224525    -0.528056115690006     1.022837953954664
    H               -2.948692713224525    -0.694056115690006    -0.250162046045336
    H               -0.844692713224525     1.464943884309994     0.106837953954664
    H               -1.722132713224525     1.302038884309993    -1.432036046045336
    H               -2.606692713224525     1.704077884309993     0.091000953954664

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-021ALA-057VAL-1-dimer.npy', np.array(charges))