import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.356182025680184     0.288519186321631     1.902171316399560
    C               -1.353182025680184    -0.839480813678369     1.699171316399560
    O               -1.546182025680184    -1.713480813678369     2.541171316399560
    N               -1.964182025680184    -0.858480813678369     0.536171316399560
    H               -2.628182025680184    -1.594480813678369     0.346171316399560
    H               -1.708182025680184    -0.185480813678369    -0.175828683600440
    H               -0.772182025680184     1.216519186321631     1.506171316399560
    H                0.534817974319816     0.048519186321631     1.323171316399560
    H               -0.093520025680184     0.441799186321631     2.959301316399560
    C                2.019817974319816     1.928519186321631    -1.121828683600440
    C                1.239817974319816     0.739519186321631    -1.640828683600440
    O                0.028817974319816     0.649519186321631    -1.432828683600440
    N                1.918817974319816    -0.146480813678369    -2.355828683600439
    H                3.067817974319816     1.664519186321631    -0.971828683600440
    H                1.596817974319816     2.187519186321631    -0.149828683600440
    H                1.416817974319816    -0.919480813678369    -2.763828683600440
    H                2.904817974319816     0.004519186321631    -2.550828683600440
    H                1.934126974319816     2.777509186321630    -1.815998683600440

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-087GLN-139ASN-1-dimer.npy', np.array(charges))