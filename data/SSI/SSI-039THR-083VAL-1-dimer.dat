import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.577874218719486     1.351844014909386    -1.313933076207378
    C                0.477874218719486     2.841844014909385    -0.996933076207378
    H                1.594874218719486     0.992844014909385    -1.146933076207378
    H               -0.109125781280514     0.799844014909385    -0.673933076207378
    H                0.295874218719486     1.176844014909385    -2.352933076207378
    H               -0.561125781280514     3.146844014909385    -1.116933076207378
    H                1.108204218719486     3.436194014909385    -1.674753076207378
    H                0.791074218719486     3.019714014909385     0.042426923792622
    C                0.029874218719486    -1.929155985090615     0.658066923792622
    C               -1.086125781280514    -2.259155985090615     1.650066923792622
    H                0.748874218719486    -1.240155985090615     1.096066923792622
    H                0.561874218719486    -2.844155985090615     0.413066923792622
    H               -0.387125781280514    -1.492155985090615    -0.249933076207378
    H               -0.667125781280514    -2.886155985090614     2.436066923792622
    H               -1.487705781280514    -1.344905985090614     2.111456923792622
    H               -1.882575781280514    -2.828765985090615     1.148866923792622

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-039THR-083VAL-1-dimer.npy', np.array(charges))