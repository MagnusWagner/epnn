import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.518980942582412     1.928211971892162     0.293131136923944
    C                0.762980942582412     1.433211971892161     1.712131136923944
    H                0.350980942582412     3.006211971892161     0.293131136923944
    H                1.388980942582412     1.705211971892161    -0.326868863076056
    H               -0.352019057417588     1.432211971892161    -0.134868863076056
    H                0.963980942582412     0.365211971892161     1.671131136923944
    H               -0.131359057417588     1.617700971892161     2.325414136923944
    H                1.639190942582412     1.937319971892161     2.145882136923944
    C               -0.900019057417588    -1.581788028107839    -0.289868863076056
    C               -0.384019057417588    -1.782788028107839    -1.712868863076056
    H               -1.257019057417587    -2.528788028107839     0.121131136923944
    H               -0.099019057417588    -1.202788028107839     0.343131136923944
    H               -1.721019057417588    -0.863788028107839    -0.295868863076056
    H               -0.085019057417588    -0.812788028107839    -2.107868863076056
    H               -1.180189057417588    -2.190676028107839    -2.352973863076056
    H                0.507230942582412    -2.427509028107839    -1.711430863076056

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-028LEU-058ALA-1-dimer.npy', np.array(charges))