import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.571313577776530    -0.428010755853074    -0.355098632635970
    C               -2.745313577776531    -1.167010755853074    -0.967098632635970
    H               -1.676313577776531     0.646989244146926    -0.498098632635970
    H               -1.539313577776530    -0.628010755853074     0.716901367364030
    H               -0.645313577776531    -0.777010755853074    -0.809098632635970
    H               -3.666313577776530    -0.713010755853074    -0.609098632635970
    H               -2.706313577776531    -2.194010755853074    -0.601098632635970
    H               -2.748173577776530    -1.177745755853074    -2.067038632635970
    C                1.430686422223469     0.634989244146926     0.538901367364030
    C                2.891686422223469     0.957989244146926     0.775901367364030
    H                1.228686422223470    -0.415010755853074     0.755901367364030
    H                0.822686422223470     1.276989244146926     1.165901367364030
    H                1.120686422223469     0.867989244146926    -0.475098632635970
    H                3.025686422223470     2.038989244146926     0.734901367364030
    H                3.513206422223470     0.485549244146926     0.000978367364030
    H                3.202376422223469     0.612619244146926     1.772993367364030

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-053ILE-066LEU-1-dimer.npy', np.array(charges))