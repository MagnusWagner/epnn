import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.824897983932204     1.389383017194763     1.192925009434587
    C               -0.213102016067796     1.435383017194763     2.300925009434588
    H                1.046897983932204     0.368383017194763     0.894925009434588
    H                0.452897983932204     1.920383017194763     0.317925009434588
    H                1.743897983932204     1.871383017194763     1.531925009434588
    H               -1.143102016067796     0.996383017194763     1.935925009434587
    H               -0.402102016067796     2.486383017194763     2.522925009434588
    H                0.103993983932204     0.913103017194763     3.215626009434588
    C               -0.333102016067796    -1.512616982805237    -0.985074990565412
    C               -0.267102016067796    -1.320616982805237    -2.506074990565412
    H                0.610897983932204    -1.901616982805237    -0.597074990565412
    H               -0.564102016067796    -0.561616982805237    -0.505074990565412
    H               -1.143102016067796    -2.202616982805237    -0.769074990565412
    H               -1.264102016067796    -1.030616982805237    -2.846074990565412
    H                0.009683983932204    -2.270566982805237    -2.986689990565412
    H                0.410216983932204    -0.488156982805237    -2.747409990565412

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-025ILE-090ALA-1-dimer.npy', np.array(charges))