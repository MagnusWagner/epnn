import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.936150887692164    -0.632253505105017     1.251168448695954
    C               -1.390150887692164    -1.147253505105017     2.671168448695954
    H               -1.495150887692164     0.265746494894983     0.980168448695954
    H                0.122849112307836    -0.383253505105017     1.306168448695954
    H               -1.090150887692165    -1.405253505105017     0.497168448695954
    H               -1.179150887692165    -0.373253505105017     3.403168448695954
    H               -2.472494887692165    -1.333617505105017     2.609528448695954
    H               -0.853490887692165    -2.070046505105017     2.936588448695954
    C                1.469849112307835     1.004746494894983    -1.260831551304046
    C                0.849849112307835     0.774746494894983    -2.665831551304046
    H                1.243849112307835     2.009746494894983    -0.900831551304046
    H                1.056849112307835     0.275746494894983    -0.569831551304046
    H                2.550849112307835     0.865746494894983    -1.294831551304046
    H                1.022849112307835    -0.256253505105017    -2.969831551304046
    H                1.405439112307835     1.448211494894983    -3.334981551304046
    H               -0.233618887692164     0.956647494894983    -2.610971551304046

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-135LEU-179LEU-1-dimer.npy', np.array(charges))