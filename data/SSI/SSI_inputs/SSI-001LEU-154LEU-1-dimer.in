import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C    0.556039914593   -1.723973090957    0.211726574013
 C    1.821039914593   -2.036973090957   -0.575273425987
 H    0.739039914593   -1.817973090957    1.284726574013
 H    0.235039914593   -0.707973090957   -0.002273425987
 H   -0.244960085407   -2.405973090957   -0.083273425987
 H    1.615039914593   -1.890973090957   -1.632273425987
 H    2.110318914593   -3.083989090957   -0.401853425987
 H    2.631125914593   -1.356010090957   -0.275183425987
 C   -0.442960085407    1.991026909043    0.061726574013
 C   -1.933960085407    1.773026909043    0.302726574013
 H   -0.246960085407    3.042026909043   -0.151273425987
 H    0.119039914593    1.693026909043    0.947726574013
 H   -0.111960085407    1.392026909043   -0.785273425987
 H   -2.071960085407    0.729026909043    0.570726574013
 H   -2.495500085407    1.972143909043   -0.621953425987
 H   -2.280165085407    2.397637909043    1.139386574013
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-001LEU-154LEU-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-001LEU-154LEU-1-dimer.npy', np.array(charges))