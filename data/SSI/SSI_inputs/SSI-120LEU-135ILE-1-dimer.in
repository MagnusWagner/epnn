import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C   -0.732605807681   -1.239502887925    1.668734531542
 C    0.023394192319   -0.276502887925    2.570734531542
 H   -1.249605807681   -0.695502887925    0.881734531542
 H   -0.031605807681   -1.932502887925    1.218734531542
 H   -1.459605807681   -1.807502887925    2.249734531542
 H    0.738394192319    0.276497112075    1.963734531542
 H   -0.677595807681    0.425937112075    3.045275531542
 H    0.588184192319   -0.824672887925    3.339189531542
 C    0.218394192319    0.546497112075   -1.403265468458
 C    0.484394192319    0.962497112075   -2.838265468458
 H    0.723394192319   -0.391502887925   -1.175265468458
 H    0.606394192319    1.312497112075   -0.729265468458
 H   -0.851605807681    0.436497112075   -1.232265468458
 H    1.563394192319    0.966497112075   -3.009265468458
 H    0.130394192319    1.989497112075   -2.935265468458
 H   -0.003655807681    0.327747112075   -3.592525468458
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-120LEU-135ILE-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-120LEU-135ILE-1-dimer.npy', np.array(charges))