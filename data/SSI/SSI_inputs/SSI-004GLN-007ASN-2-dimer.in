import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C   -1.360126542340   -2.371264955395    1.639772148422
 C   -0.129126542340   -2.345264955395    0.760772148422
 O    0.494873457660   -3.378264955395    0.500772148422
 N    0.251873457660   -1.181264955395    0.257772148422
 H    1.093873457660   -1.172264955395   -0.301227851578
 H   -0.254126542340   -0.333264955395    0.393772148422
 H   -1.361126542340   -3.323264955395    2.173772148422
 H   -2.255126542340   -2.363264955395    1.019772148422
 H   -1.375940542340   -1.571214955395    2.394532148422
 C   -0.738126542340    1.648735044605   -1.680227851578
 C    0.227873457660    2.298735044605   -0.723227851578
 O    0.991873457660    1.589735044605   -0.054227851578
 N    0.229873457660    3.608735044605   -0.664227851578
 H   -1.101126542340    0.730735044605   -1.228227851578
 H   -0.153126542340    1.365735044605   -2.558227851578
 H    0.889873457660    4.051735044605   -0.043227851578
 H   -0.381126542340    4.165735044605   -1.233227851578
 H   -1.583582542340    2.263546044605   -2.022587851578
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-004GLN-007ASN-2-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-004GLN-007ASN-2-dimer.npy', np.array(charges))