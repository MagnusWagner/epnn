import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C    0.190578260967    1.542564147145    2.623222599451
 C    0.591578260967    0.166564147145    2.118222599451
 O    1.761578260967   -0.110435852855    1.869222599451
 N   -0.385421739033   -0.710435852855    1.958222599451
 H   -0.124421739033   -1.678435852855    1.827222599451
 H   -1.329421739033   -0.470435852855    2.232222599451
 H   -0.577421739033    1.414564147145    3.388222599451
 H   -0.247421739033    2.107564147145    1.799222599451
 H    1.032558260967    2.095027147145    3.065767599451
 C   -0.604421739033    1.169564147145   -1.691777400549
 C   -0.517421739033   -0.250435852855   -2.214777400549
 O   -0.526421739033   -0.486435852855   -3.421777400549
 N   -0.440421739033   -1.210435852855   -1.307777400549
 H   -0.405421739033   -2.168435852855   -1.626777400549
 H   -0.473421739033   -0.987435852855   -0.325777400549
 H   -0.816421739033    1.157564147145   -0.621777400549
 H   -1.450421739033    1.645564147145   -2.190777400549
 H    0.308138260967    1.752310147145   -1.885787400549
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-126ASN-129ASN-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-126ASN-129ASN-1-dimer.npy', np.array(charges))