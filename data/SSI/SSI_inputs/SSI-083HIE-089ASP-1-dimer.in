import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
-1 1 
 C    1.679772592334   -3.485670472960    1.487758712624
 C   -0.611227407666   -0.664670472960    1.597758712624
 C    1.045772592334   -1.282670472960    0.288758712624
 C    0.916772592334   -2.212670472960    1.259758712624
 N    0.097772592334   -0.321670472960    0.541758712624
 N   -0.143227407666   -1.819670472960    2.053758712624
 H   -0.027227407666    0.547329527040    0.026758712624
 H   -1.429227407666   -0.092670472960    2.022758712624
 H    1.768772592334   -1.291670472960   -0.517241287376
 H    1.894772592334   -3.581670472960    2.550758712624
 H    2.624772592334   -3.430670472960    0.947758712624
 H    1.117306592334   -4.379550472960    1.180171712624
 C   -0.743227407666    1.197329527040   -2.618241287376
 C   -0.698227407666    2.333329527040   -1.617241287376
 O   -0.332227407666    2.101329527040   -0.476241287376
 O   -1.049227407666    3.463329527040   -1.950241287376
 H   -1.359227407666    0.410329527040   -2.176241287376
 H    0.244772592334    0.768329527040   -2.759241287376
 H   -1.205977407666    1.484479527040   -3.573965287376
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-083HIE-089ASP-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-083HIE-089ASP-1-dimer.npy', np.array(charges))