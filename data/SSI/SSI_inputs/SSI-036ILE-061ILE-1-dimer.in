import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C   -1.756369522885   -1.512235532046    0.110167454874
 C   -0.457369522885   -2.209235532046    0.456167454874
 H   -1.921369522885   -0.660235532046    0.770167454874
 H   -1.706369522885   -1.143235532046   -0.914832545126
 H   -2.591369522885   -2.207235532046    0.192167454874
 H    0.361630477115   -1.496235532046    0.390167454874
 H   -0.286369522885   -2.972235532046   -0.282832545126
 H   -0.450159522885   -2.700005532046    1.440587454874
 C    0.909630477115    1.121764467954   -0.228832545126
 C    1.304630477115    2.603764467954   -0.325832545126
 H    1.170630477115    0.725764467954    0.755167454874
 H   -0.161369522885    0.999764467954   -0.386832545126
 H    1.388630477115    0.522764467954   -1.003832545126
 H    1.079630477115    2.957764467954   -1.331832545126
 H    2.385320477115    2.716914467954   -0.154662545126
 H    0.724950477115    3.207894467954    0.387617454874
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-036ILE-061ILE-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-036ILE-061ILE-1-dimer.npy', np.array(charges))