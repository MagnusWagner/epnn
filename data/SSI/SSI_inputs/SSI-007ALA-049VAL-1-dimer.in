import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C    1.371103132499   -1.135034589618   -0.305813181023
 C    1.431103132499   -2.654034589618   -0.468813181023
 H    0.334103132499   -0.841034589618   -0.144813181023
 H    1.725103132499   -0.644034589618   -1.206813181023
 H    1.973103132499   -0.825034589618    0.547186818977
 H    0.819103132499   -2.926034589618   -1.331813181023
 H    1.014203132499   -3.141423589618    0.424856818977
 H    2.470283132499   -2.971023589618   -0.640933181023
 C   -1.271896867501    1.331965410382    0.881186818977
 C   -1.526896867501    2.459965410382   -0.102813181023
 H   -0.212896867501    1.078965410382    0.898186818977
 H   -1.831896867501    0.446965410382    0.575186818977
 H   -1.597896867501    1.625965410382    1.879186818977
 H   -1.204896867501    2.113965410382   -1.074813181023
 H   -0.933036867501    3.336855410382    0.194476818977
 H   -2.595906867501    2.711795410382   -0.164513181023
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-007ALA-049VAL-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-007ALA-049VAL-1-dimer.npy', np.array(charges))