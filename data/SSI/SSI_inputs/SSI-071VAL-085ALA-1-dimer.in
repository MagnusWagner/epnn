import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C   -1.013090227105    1.916115681895   -0.459243520711
 C   -1.093090227105    1.252115681895   -1.840243520711
 H   -0.351090227105    2.780115681895   -0.487243520711
 H   -2.003090227105    2.253115681895   -0.155243520711
 H   -0.645090227105    1.214115681895    0.283756479289
 H   -1.364090227105    2.023115681895   -2.562243520711
 H   -0.123060227105    0.820205681895   -2.127473520711
 H   -1.876580227105    0.480175681895   -1.856113520711
 C    0.661909772895   -1.018884318105    1.407756479289
 C    1.443909772895   -2.155884318105    0.893756479289
 H    0.419909772895   -1.170884318105    2.458756479289
 H    1.244909772895   -0.101884318105    1.309756479289
 H   -0.262090227105   -0.910884318105    0.840756479289
 H    1.950909772895   -1.845884318105   -0.020243520711
 H    0.799169772895   -3.018064318105    0.668016479289
 H    2.214489772895   -2.445404318105    1.623396479289
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-071VAL-085ALA-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-071VAL-085ALA-1-dimer.npy', np.array(charges))