import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C   -1.774198521681   -0.800070731709   -0.273601279581
 C   -2.132198521681   -2.203070731709   -0.762601279581
 H   -0.975198521681   -0.368070731709   -0.875601279581
 H   -2.649198521681   -0.157070731709   -0.361601279581
 H   -1.476198521681   -0.819070731709    0.773398720419
 H   -2.467198521681   -2.126070731709   -1.797601279581
 H   -1.256758521681   -2.867862731709   -0.721899279581
 H   -2.964058521681   -2.615032731709   -0.172435279581
 C    1.321801478319    1.484929268291    0.090398720419
 C    2.587801478319    1.508929268291    0.953398720419
 H    0.439801478319    1.280929268291    0.696398720419
 H    1.196801478319    2.459929268291   -0.379601279581
 H    1.403801478319    0.740929268291   -0.700601279581
 H    3.424801478319    1.800929268291    0.317398720419
 H    2.802641478319    0.519376268291    1.383082320419
 H    2.482591478319    2.261615268291    1.748631520419
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-003VAL-081THR-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-003VAL-081THR-1-dimer.npy', np.array(charges))