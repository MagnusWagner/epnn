import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C    1.111526592802   -0.103478594665    1.216248429288
 C    2.627526592802   -0.177478594665    1.429248429288
 H    0.593526592802   -0.520478594665    2.080248429288
 H    0.804526592802    0.934521405335    1.079248429288
 H    0.840526592802   -0.684478594665    0.333248429288
 H    3.099526592802    0.286521405335    0.571248429288
 H    2.924306592802   -1.235846594665    1.471438429288
 H    2.916066592802    0.384252405335    2.329918429288
 C   -1.436473407198    0.741521405335   -1.127751570712
 C   -2.304473407198   -0.458478594665   -1.515751570712
 H   -1.713473407198    1.100521405335   -0.136751570712
 H   -0.387473407198    0.458521405335   -1.124751570712
 H   -1.565473407198    1.547521405335   -1.849751570712
 H   -2.199473407198   -1.211478594665   -0.733751570712
 H   -3.364595407198   -0.176872594665   -1.598451570712
 H   -1.925443407198   -0.907537594665   -2.445631570712
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-012LEU-074VAL-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-012LEU-074VAL-1-dimer.npy', np.array(charges))