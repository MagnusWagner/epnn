import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C   -1.656840113625    1.139932799516    0.050520185598
 C   -2.433840113625    2.227932799516    0.794520185598
 H   -1.470840113625    0.294932799516    0.713520185598
 H   -2.236840113625    0.800932799516   -0.807479814402
 H   -0.709840113625    1.543932799516   -0.307479814402
 H   -2.630840113625    3.042932799516    0.106520185598
 H   -1.826530113625    2.584708799516    1.639439185598
 H   -3.397870113625    1.839594799516    1.154863185598
 C    0.984159886375   -1.587067200484   -0.348479814402
 C    1.699159886375   -1.223067200484    0.948520185598
 C    1.467159886375   -0.672067200484   -1.463479814402
 H    1.190159886375   -2.623067200484   -0.616479814402
 H   -0.089840113625   -1.451067200484   -0.246479814402
 H    1.470159886375   -0.184067200484    1.200520185598
 H    2.766159886375   -1.290067200484    0.763520185598
 H    1.280159886375    0.364932799516   -1.182479814402
 H    2.543159886375   -0.811067200484   -1.596479814402
 H    1.446039886375   -1.859472200484    1.809285185598
 H    0.954739886375   -0.891780200484   -2.411714814402
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-051LEU-131LYS-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-051LEU-131LYS-1-dimer.npy', np.array(charges))