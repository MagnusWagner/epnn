import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C   -2.269177320507    1.606088279841    0.030526709684
 C   -0.978177320507    1.439088279841    0.792526709684
 O    0.092822679493    1.741088279841    0.221526709684
 O   -1.031177320507    0.973088279841    1.940526709684
 H   -3.046177320507    0.964088279841    0.442526709684
 H   -2.081177320507    1.267088279841   -0.979473290316
 H   -2.639556320507    2.641858279841    0.032679709684
 C    1.041822679493   -1.345911720159   -0.816473290316
 C    0.545822679493   -2.255911720159   -1.935473290316
 N    2.290822679493   -1.884911720159   -0.200473290316
 H    1.238822679493   -0.347911720159   -1.219473290316
 H    0.254822679493   -1.251911720159   -0.059473290316
 H    0.280822679493   -3.227911720159   -1.516473290316
 H    1.348822679493   -2.411911720159   -2.660473290316
 H    3.041822679493   -1.949911720159   -0.877473290316
 H    2.611822679493   -1.281911720159    0.548526709684
 H    2.144822679493   -2.807911720159    0.192526709684
 H   -0.330097320507   -1.852081720159   -2.464330290316
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-012ASP-024LYS-2-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-012ASP-024LYS-2-dimer.npy', np.array(charges))