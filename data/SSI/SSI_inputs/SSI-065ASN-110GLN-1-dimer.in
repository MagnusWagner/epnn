import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C    1.894362306597   -1.472529246264   -2.080340399127
 C    0.857362306597   -1.626529246264   -1.011340399127
 O    0.718362306597   -0.784529246264   -0.136340399127
 N    0.067362306597   -2.706529246264   -1.116340399127
 H    1.551362306597   -1.974529246264   -2.987340399127
 H    2.782362306597   -2.002529246264   -1.737340399127
 H   -0.708637693403   -2.795529246264   -0.479340399127
 H    0.191362306597   -3.362529246264   -1.871340399127
 H    2.153942306597   -0.434199246264   -2.334270399127
 C   -0.600637693403    2.491470753736   -0.019340399127
 C   -0.920637693403    1.610470753736    1.111659600873
 O   -2.088637693403    1.254470753736    1.234659600873
 N    0.063362306597    1.319470753736    1.990659600873
 H   -0.843637693403    1.983470753736   -0.953340399127
 H    0.464362306597    2.724470753736   -0.023340399127
 H   -0.144637693403    0.711470753736    2.766659600873
 H    1.015362306597    1.601470753736    1.776659600873
 H   -1.181657693403    3.421240753736    0.069829600873
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-065ASN-110GLN-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-065ASN-110GLN-1-dimer.npy', np.array(charges))