import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C   -1.371659507168    1.327480950658   -0.607285335428
 C   -2.061659507168    2.135480950658   -1.703285335428
 H   -2.101659507168    0.979480950658    0.121714664572
 H   -0.867659507168    0.468480950658   -1.049285335428
 H   -0.629659507168    1.950480950658   -0.106285335428
 H   -1.283659507168    2.413480950658   -2.414285335428
 H   -2.500459507168    3.066960950658   -1.316235335428
 H   -2.798199507168    1.522180950658   -2.243075335428
 C    1.013340492832   -1.005519049342    1.303714664572
 C    2.196340492832   -0.410519049342    0.543714664572
 C    0.300340492832   -2.124519049342    0.555714664572
 H    1.320340492832   -1.340519049342    2.295714664572
 H    0.284340492832   -0.206519049342    1.448714664572
 H    1.866340492832   -0.138519049342   -0.460285335428
 H   -0.725659507168   -2.166519049342    0.924714664572
 H    0.245340492832   -1.870519049342   -0.504285335428
 H    3.008960492832   -1.148579049342    0.473674664572
 H    2.516510492832    0.513850950658    1.046734664572
 H    0.751840492832   -3.119829049342    0.680214664572
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-069VAL-086GLU-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-069VAL-086GLU-1-dimer.npy', np.array(charges))