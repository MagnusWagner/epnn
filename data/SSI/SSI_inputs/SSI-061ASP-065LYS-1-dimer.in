import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
-1 1 
 C    1.762378877985    0.073219226982   -2.301451567979
 C    0.966378877985    0.506219226982   -1.094451567979
 O    0.041378877985    1.331219226982   -1.229451567979
 O    1.304378877985    0.026219226982    0.016548432021
 H    1.747378877985   -1.014780773018   -2.387451567979
 H    2.803378877985    0.357219226982   -2.130451567979
 H    1.450908877985    0.540423226982   -3.247341567979
 C   -1.536621122015   -0.083780773018    1.602548432021
 C   -2.155621122015   -1.046780773018    0.603548432021
 C   -0.429621122015   -0.776780773018    2.425548432021
 H   -1.112621122015    0.775219226982    1.084548432021
 H   -2.312621122015    0.278219226982    2.279548432021
 H   -2.692621122015   -1.824780773018    1.147548432021
 H   -1.365621122015   -1.509780773018    0.010548432021
 H    0.429378877985   -0.953780773018    1.775548432021
 H   -0.105621122015   -0.091780773018    3.213548432021
 H   -2.867761122015   -0.553591773018   -0.074401567979
 H   -0.744861122015   -1.734994773018    2.864238432021
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-061ASP-065LYS-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-061ASP-065LYS-1-dimer.npy', np.array(charges))