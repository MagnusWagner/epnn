import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C    0.893097466522   -1.986409287568   -0.737357127061
 C    1.534097466522   -1.643409287568   -2.074357127061
 H    1.416097466522   -1.486409287568    0.079642872939
 H   -0.135902533478   -1.640409287568   -0.774357127061
 H    0.884097466522   -3.062409287568   -0.565357127061
 H    1.029097466522   -2.218409287568   -2.850357127061
 H    2.605707466522   -1.891700287568   -2.071477127061
 H    1.388107466522   -0.578109287568   -2.306357127061
 C    0.051097466522    0.693590712432    1.981642872939
 C   -0.672902533478    0.887590712432    0.669642872939
 O   -1.562902533478    0.116590712432    0.318642872939
 N   -0.304902533478    1.927590712432   -0.064357127061
 H    0.329097466522    1.671590712432    2.381642872939
 H    0.968097466522    0.137590712432    1.785642872939
 H   -0.792902533478    2.107590712432   -0.927357127061
 H    0.411097466522    2.557590712432    0.267642872939
 H   -0.558242533478    0.162855712432    2.727992872939
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-013VAL-154ASN-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-013VAL-154ASN-1-dimer.npy', np.array(charges))