import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C   -0.845209582282    0.417273884078    1.790657696652
 C   -0.080209582282   -0.833726115922    2.236657696652
 H   -1.503209582282    0.756273884078    2.591657696652
 H   -0.139209582282    1.214273884078    1.555657696652
 H   -1.444209582282    0.201273884078    0.907657696652
 H    0.607790417718   -1.103726115922    1.437657696652
 H   -0.793529582282   -1.659486115922    2.375596696652
 H    0.526640417718   -0.635996115922    3.132555696652
 C    0.517790417718    0.871273884078   -1.641342303348
 C    0.407790417718   -0.459726115922   -2.379342303348
 H    1.079790417718    0.740273884078   -0.717342303348
 H    1.009790417718    1.601273884078   -2.271342303348
 H   -0.478209582282    1.250273884078   -1.410342303348
 H   -0.104209582282   -0.275726115922   -3.323342303348
 H   -0.172509582282   -1.166586115922   -1.768118303348
 H    1.409150417718   -0.863726115922   -2.589247303348
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-005LEU-030LEU-2-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-005LEU-030LEU-2-dimer.npy', np.array(charges))