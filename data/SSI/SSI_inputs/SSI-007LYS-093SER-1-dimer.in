import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C   -0.524401563023    1.042831738481    0.656716224888
 C   -1.335401563023    2.239831738481    1.149716224888
 C    0.382598436977    0.512831738481    1.766716224888
 H   -1.205401563023    0.251831738481    0.334716224888
 H    0.090598436977    1.340831738481   -0.195283775112
 H   -0.645401563023    3.002831738481    1.514716224888
 H   -1.989401563023    1.923831738481    1.961716224888
 H    0.821598436977   -0.431168261519    1.426716224888
 H    1.205598436977    1.219831738481    1.917716224888
 H   -1.972751563023    2.667371738481    0.361683224888
 H   -0.153731563023    0.365691738481    2.715770224888
 C    0.393598436977   -2.364168261519   -1.916283775112
 O    0.889598436977   -1.151168261519   -1.382283775112
 H    1.824598436977   -1.074168261519   -1.628283775112
 H    0.924598436977   -3.209168261519   -1.474283775112
 H    0.569598436977   -2.367168261519   -2.994283775112
 H   -0.686161563023   -2.463238261519   -1.731059375112
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-007LYS-093SER-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-007LYS-093SER-1-dimer.npy', np.array(charges))