import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C   -1.043186015873   -1.981988421833   -0.316372265744
 C   -1.641186015873   -3.287988421833   -0.872372265744
 H   -0.209186015873   -1.654988421833   -0.941372265744
 H   -1.801186015873   -1.197988421833   -0.299372265744
 H   -0.703186015873   -2.111988421833    0.711627734256
 H   -2.422186015873   -3.620988421833   -0.189372265744
 H   -0.864416015873   -4.066168421833   -0.904914265744
 H   -2.095156015873   -3.145988421833   -1.864214265744
 C    0.561813984127    1.421011578167    0.032627734256
 C    0.108813984127    2.666011578167    0.800627734256
 C    2.044813984127    1.267011578167    0.351627734256
 H    0.411813984127    1.592011578167   -1.034372265744
 H   -0.001186015873    0.544011578167    0.349627734256
 H   -0.779186015873    3.123011578167    0.364627734256
 H   -0.042186015873    2.423011578167    1.852627734256
 H    2.181813984127    0.624011578167    1.220627734256
 H    0.994333984127    3.310811578167    0.700148834256
 H    2.361763984127    2.290313578167    0.601416034256
 H    2.598203984127    0.890064578167   -0.521109765744
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-042ILE-052PRO-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-042ILE-052PRO-1-dimer.npy', np.array(charges))