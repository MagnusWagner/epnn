import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
-1 1 
 C   -4.177465576559    0.635376708188    0.045435006208
 C   -2.654465576559    0.741376708188    0.181435006208
 O   -2.069465576559   -0.095623291812    0.901435006208
 O   -2.040465576559    1.636376708188   -0.443564993792
 H   -4.633465576559    0.534376708188    1.032435006208
 H   -4.413465576559   -0.267623291812   -0.517564993792
 H   -4.611611576559    1.500073708188   -0.477834993792
 C    3.576534423441   -1.219623291812   -1.469564993792
 C    1.468534423441    0.311376708188    1.059435006208
 C    1.139534423441   -1.112623291812   -0.584564993792
 C    2.455534423441   -0.775623291812   -0.576564993792
 N    0.549534423441   -0.420623291812    0.445435006208
 N    2.639534423441    0.120376708188    0.458435006208
 H   -0.449465576559   -0.385623291812    0.646435006208
 H    1.284534423441    0.972376708188    1.899435006208
 H    0.657534423441   -1.787623291812   -1.273564993792
 H    4.015534423441   -0.332623291812   -1.919564993792
 H    3.172534423441   -1.839623291812   -2.271564993792
 H    4.365415423441   -1.770256291812   -0.936204993792
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-129ASP-140HIE-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-129ASP-140HIE-1-dimer.npy', np.array(charges))