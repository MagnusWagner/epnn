import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
-1 1 
 C   -1.793525943193   -1.089875765780   -2.058500289498
 C   -0.606525943193   -0.267875765780   -1.612500289498
 O    0.454474056807   -0.834875765780   -1.290500289498
 O   -0.773525943193    0.983124234220   -1.596500289498
 H   -2.175525943193   -0.689875765780   -3.000500289498
 H   -2.575525943193   -1.000875765780   -1.308500289498
 H   -1.552576943193   -2.153223765780   -2.204220289498
 C    0.459474056807    0.517124234220    1.783499710502
 C    0.486474056807    0.944124234220    3.228499710502
 C    1.755474056807   -0.239875765780    1.547499710502
 H    0.441474056807    1.406124234220    1.151499710502
 H   -0.407525943193   -0.109875765780    1.570499710502
 H    0.248474056807    2.006124234220    3.322499710502
 H   -0.207525943193    0.342124234220    3.810499710502
 H    2.145474056807   -0.050875765780    0.547499710502
 H    1.575474056807   -1.306875765780    1.656499710502
 H    1.511800056807    0.734126234220    3.567039710502
 H    2.471205056807    0.094132234220    2.313119710502
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-042GLU-101PRO-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-042GLU-101PRO-1-dimer.npy', np.array(charges))