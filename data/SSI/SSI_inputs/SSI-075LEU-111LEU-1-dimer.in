import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C    0.935310422078   -0.900542880859   -0.964190650305
 C    0.524310422078   -2.374542880859   -0.867190650305
 C    0.330310422078   -0.086542880859   -2.124190650305
 H    0.705310422078   -0.413542880859   -0.023190650305
 H    2.014310422078   -0.847542880859   -1.078190650305
 H   -0.535689577922   -2.417542880859   -0.608190650305
 H    0.628310422078   -0.525542880859   -3.075190650305
 H    1.099690422078   -2.892162880859   -0.085520650305
 H    0.637930422078   -2.854912880859   -1.850220650305
 H   -0.768719577922   -0.081532880859   -2.078370650305
 H    0.714090422078    0.944277119141   -2.113430650305
 C   -0.339689577922    1.103457119141    2.030809349695
 C   -1.386689577922    2.195457119141    1.857809349695
 H   -0.258689577922    0.833457119141    3.084809349695
 H   -0.668689577922    0.221457119141    1.484809349695
 H    0.632310422078    1.444457119141    1.670809349695
 H   -2.361689577922    1.746457119141    2.045809349695
 H   -1.217109577922    2.997347119141    2.591439349695
 H   -1.378069577922    2.592057119141    0.831829349695
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-075LEU-111LEU-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-075LEU-111LEU-1-dimer.npy', np.array(charges))