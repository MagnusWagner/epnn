import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C    1.773548443266    0.225229028302    0.149505715982
 C    2.397548443266    1.629229028302    0.099505715982
 H    2.556548443266   -0.532770971698    0.177505715982
 H    1.133548443266    0.102229028302    1.021505715982
 H    1.145548443266    0.055229028302   -0.724494284018
 H    1.588548443266    2.343229028302   -0.072494284018
 H    3.103748443266    1.712309028302   -0.739767284018
 H    2.877278443266    1.891689028302    1.053954715982
 C   -1.589451556734   -1.512770971698   -0.135494284018
 C   -2.572451556734   -0.338770971698   -0.114494284018
 H   -0.769451556734   -1.304770971698   -0.821494284018
 H   -1.193451556734   -1.675770971698    0.867505715982
 H   -2.110451556734   -2.416770971698   -0.455494284018
 H   -3.402451556734   -0.614770971698    0.534505715982
 H   -2.941361556734   -0.155030971698   -1.134371284018
 H   -2.097521556734    0.560479028302    0.304772715982
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-009ILE-092LEU-2-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-009ILE-092LEU-2-dimer.npy', np.array(charges))