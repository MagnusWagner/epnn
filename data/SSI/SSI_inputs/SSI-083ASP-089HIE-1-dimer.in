import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
-1 1 
 C   -1.296534619930   -1.704008638666   -2.262598184210
 C    0.072465380070   -1.154008638666   -2.642598184210
 O    0.312465380070    0.033991361334   -2.332598184210
 O    0.898465380070   -1.870008638666   -3.243598184210
 H   -2.030534619930   -1.280008638666   -2.919598184210
 H   -1.547534619930   -1.355008638666   -1.259598184210
 H   -1.358144619930   -2.802278638666   -2.261878184210
 C   -0.774534619930    0.129991361334    3.820401815790
 C    0.685465380070    1.900991361334    1.011401815790
 C   -0.261534619930   -0.066008638666    1.295401815790
 C   -0.276534619930    0.586991361334    2.486401815790
 N    0.347465380070    0.773991361334    0.390401815790
 N    0.334465380070    1.809991361334    2.292401815790
 H    0.491465380070    0.572991361334   -0.604598184210
 H    1.183465380070    2.746991361334    0.548401815790
 H   -0.628534619930   -1.068008638666    1.111401815790
 H   -1.607534619930   -0.557008638666    3.656401815790
 H   -1.151534619930    0.991991361334    4.372401815790
 H   -0.002434619930   -0.369388638666    4.424121815790
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-083ASP-089HIE-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-083ASP-089HIE-1-dimer.npy', np.array(charges))