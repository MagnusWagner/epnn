import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C    1.379680613767    0.194327765658   -1.793702653053
 C    2.475680613767   -0.306672234342   -0.842702653053
 H    1.798680613767    0.902327765658   -2.510702653053
 H    0.952680613767   -0.646672234342   -2.340702653053
 H    0.577680613767    0.676327765658   -1.239702653053
 H    2.003680613767   -0.954672234342   -0.103702653053
 H    2.962960613767    0.535458465658   -0.329502653053
 H    3.207720613767   -0.916344234342   -1.392632653053
 C   -1.575319386233   -0.016672234342    0.647297346947
 C   -2.276319386233    0.127327765658    1.990297346947
 H   -1.999319386233   -0.851672234342    0.091297346947
 H   -1.706319386233    0.895327765658    0.066297346947
 H   -0.509319386233   -0.188672234342    0.797297346947
 H   -3.352319386233    0.203327765658    1.844297346947
 H   -1.930319386233    1.064327765658    2.423297346947
 H   -2.050129386233   -0.698954234342    2.680297346947
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-069VAL-086ILE-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-069VAL-086ILE-1-dimer.npy', np.array(charges))