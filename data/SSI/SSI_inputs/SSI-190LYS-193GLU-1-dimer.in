import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C   -1.085521266057   -0.388912903456    2.433516465671
 C    0.235478733943   -1.039912903456    2.708516465671
 N   -0.895521266057    0.923087096544    1.767516465671
 H   -1.670521266057   -1.044912903456    1.779516465671
 H   -1.636521266057   -0.275912903456    3.373516465671
 H    0.918478733943   -0.863912903456    1.876516465671
 H    0.080478733943   -2.118912903456    2.774516465671
 H   -0.578521266057    0.758087096544    0.805516465671
 H   -1.778521266057    1.415087096544    1.693516465671
 H   -0.242521266057    1.524087096544    2.254516465671
 H    0.708148733943   -0.708274903456    3.644786465671
 C    1.740478733943    0.686087096544   -1.710483534329
 C    0.389478733943    0.049087096544   -1.759483534329
 O   -0.314521266057   -0.061912903456   -0.733483534329
 O    0.007478733943   -0.301912903456   -2.888483534329
 H    1.800478733943    1.399087096544   -2.535483534329
 H    2.495478733943   -0.083912903456   -1.879483534329
 H    1.979488733943    1.207166096544   -0.771683534329
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-190LYS-193GLU-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-190LYS-193GLU-1-dimer.npy', np.array(charges))