import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C    1.198784265495    0.044253282130   -0.407850058325
 C    1.630784265495    0.003253282130   -1.870850058325
 C    2.297784265495    0.528253282130    0.460149941675
 H    0.329784265495    0.693253282130   -0.289850058325
 H    0.938784265495   -0.954746717870   -0.056850058325
 H    2.637784265495   -0.410746717870   -1.955850058325
 H    2.541784265495    1.561253282130    0.230149941675
 H    1.972784265495    0.479253282130    1.498149941675
 H    3.187784265495   -0.088746717870    0.338149941675
 H    0.920929265495   -0.658302717870   -2.388970058325
 H    1.630075265495    1.017078282130   -2.297650058325
 C   -2.355215734505   -0.456746717870    0.172149941675
 C   -2.691215734505   -0.106746717870    1.611149941675
 H   -2.233215734505    0.445253282130   -0.428850058325
 H   -1.439215734505   -1.045746717870    0.142149941675
 H   -3.161215734505   -1.063746717870   -0.239850058325
 H   -2.810215734505   -1.034746717870    2.174149941675
 H   -3.630306434505    0.464971282130    1.646459941675
 H   -1.849057134505    0.449666282130    2.048379941675
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-105ILE-131ALA-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-105ILE-131ALA-1-dimer.npy', np.array(charges))