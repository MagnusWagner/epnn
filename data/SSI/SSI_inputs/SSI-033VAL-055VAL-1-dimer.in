import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C    0.414074845842    0.061846416012   -1.646902530766
 C    0.759074845842    0.388846416012   -3.100902530766
 H    0.028074845842    0.949846416012   -1.143902530766
 H   -0.347925154158   -0.717153583988   -1.621902530766
 H    1.291074845842   -0.309153583988   -1.116902530766
 H    1.230074845842   -0.488153583988   -3.547902530766
 H    1.461537845842    1.234966416012   -3.126041530766
 H   -0.142028154158    0.631996416012   -3.683043530766
 C   -0.668925154158   -0.325153583988    1.616097469234
 C   -0.498925154158   -0.119153583988    3.131097469234
 H    0.312074845842   -0.332153583988    1.142097469234
 H   -1.159925154158   -1.280153583988    1.429097469234
 H   -1.284925154158    0.461846416012    1.181097469234
 H   -1.495925154158   -0.062153583988    3.569097469234
 H    0.035736845842    0.818466416012    3.343253469234
 H    0.009055845842   -0.984233583988    3.582316469234
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-033VAL-055VAL-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-033VAL-055VAL-1-dimer.npy', np.array(charges))