import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
-1 1 
 C   -1.192634941955   -0.907511900594    0.378439118853
 C   -0.122634941955   -2.016511900594    0.368439118853
 C   -0.795634941955    0.264488099406    1.243439118853
 O    0.216365058045    0.901488099406    0.918439118853
 O   -1.448634941955    0.525488099406    2.284439118853
 H   -1.365634941955   -0.548511900594   -0.637560881147
 H   -2.112634941955   -1.324511900594    0.762439118853
 H    0.864365058045   -1.561511900594    0.283439118853
 H   -0.275980941955   -2.694225900594   -0.484310881147
 H   -0.166055941955   -2.549872900594    1.329499118853
 C    1.250365058045   -0.077511900594   -2.457560881147
 C    1.958365058045    1.265488099406   -2.625560881147
 H    0.920365058045   -0.188511900594   -1.430560881147
 H    0.369365058045   -0.118511900594   -3.099560881147
 H    1.921365058045   -0.896511900594   -2.717560881147
 H    1.269365058045    2.063488099406   -2.350560881147
 H    2.843665058045    1.306566099406   -1.973980881147
 H    2.217216058045    1.386575099406   -3.687790881147
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-136ASP-201VAL-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-136ASP-201VAL-1-dimer.npy', np.array(charges))