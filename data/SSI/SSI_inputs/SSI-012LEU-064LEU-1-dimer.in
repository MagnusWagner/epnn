import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C    1.562465223029    0.223545563492    0.068958540085
 C    2.622465223029    1.208545563492   -0.400041459915
 H    1.229465223029    0.476545563492    1.077958540085
 H    0.714465223029    0.259545563492   -0.613041459915
 H    1.971465223029   -0.786454436508    0.064958540085
 H    2.836465223029    0.993545563492   -1.424041459915
 H    3.518305223029    1.113155563492    0.231131540085
 H    2.227255223029    2.234785563492   -0.374800459915
 C   -2.186534776971   -0.149454436508   -0.333041459915
 C   -1.996534776971   -1.283454436508    0.668958540085
 H   -1.541534776971    0.688545563492   -0.074041459915
 H   -1.932534776971   -0.497454436508   -1.334041459915
 H   -3.226534776971    0.176545563492   -0.320041459915
 H   -0.968534776971   -1.632454436508    0.583958540085
 H   -2.173984776971   -0.899224436508    1.684279540085
 H   -2.676454776971   -2.117344436508    0.440161540085
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-012LEU-064LEU-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-012LEU-064LEU-1-dimer.npy', np.array(charges))