import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C    2.116428623609   -0.340712650491    0.408685986129
 C    3.603428623609   -0.382712650491    0.873685986129
 H    1.472428623609   -0.766712650491    1.180685986129
 H    1.812428623609    0.683287349509    0.219685986129
 H    1.994428623609   -0.913712650491   -0.513314013871
 H    4.234428623609    0.044287349509    0.091685986129
 H    3.918248623609   -1.419512650491    1.063275986129
 H    3.777918623609    0.229067349509    1.771055986129
 C   -1.498571376391    0.050287349509   -0.194314013871
 C   -1.596571376391    1.520287349509   -0.643314013871
 C   -2.736571376391   -0.845712650491   -0.462314013871
 H   -0.626571376391   -0.376712650491   -0.692314013871
 H   -1.310571376391    0.082287349509    0.880685986129
 H   -2.306571376391    2.037287349509    0.002685986129
 H   -2.783571376391   -1.083712650491   -1.529314013871
 H   -1.936411376391    1.565597349509   -1.688524013871
 H   -0.620751376391    2.015047349509   -0.529364013871
 H   -2.630211376391   -1.777562650491    0.112435986129
 H   -3.663361376391   -0.336042650491   -0.160164013871
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-159ILE-199LEU-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-159ILE-199LEU-1-dimer.npy', np.array(charges))