import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C   -1.472817005710    0.970844657012   -0.453573101207
 C   -2.075817005710    2.120844657012   -1.236573101207
 H   -2.151817005710    0.119844657012   -0.431573101207
 H   -0.535817005710    0.672844657012   -0.924573101207
 H   -1.266817005710    1.281844657012    0.570426898793
 H   -2.201817005710    1.820844657012   -2.278573101207
 H   -1.351817005710    2.934844657012   -1.216573101207
 H   -3.043097005710    2.454484657012   -0.832766101207
 C    1.300182994290   -0.953155342988    0.778426898793
 C    2.240182994290   -2.143155342988    0.912426898793
 H    0.336182994290   -1.273155342988    0.381426898793
 H    1.150182994290   -0.491155342988    1.754426898793
 H    1.736182994290   -0.213155342988    0.104426898793
 H    3.183182994290   -1.794155342988    1.338426898793
 H    2.437012994290   -2.578285342988   -0.078492101207
 H    1.806882994290   -2.879775342988    1.604990898793
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-013ILE-105ALA-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-013ILE-105ALA-1-dimer.npy', np.array(charges))