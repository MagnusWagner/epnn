import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C   -1.681475531188   -1.162157153624   -1.420344327587
 C   -2.697475531188   -0.198157153624   -0.838344327587
 O   -0.650475531188   -0.426157153624   -2.064344327587
 H   -1.271475531188   -1.790157153624   -0.630344327587
 H   -2.170475531188   -1.809157153624   -2.146344327587
 H   -2.163475531188    0.487842846376   -0.182344327587
 H   -0.034475531188   -1.065157153624   -2.449344327587
 H   -3.469562531188   -0.744580153624   -0.276824327587
 H   -3.113848531188    0.396868846376   -1.664524327587
 C    0.745524468812    0.876842846376    2.433655672413
 C    1.349524468812    0.466842846376    1.104655672413
 O    2.401524468812    0.956842846376    0.703655672413
 N    0.650524468812   -0.379157153624    0.376655672413
 H    0.966524468812   -0.560157153624   -0.560344327587
 H   -0.197475531188   -0.777157153624    0.744655672413
 H    1.527524468812    1.306842846376    3.060655672413
 H    0.355524468812   -0.010157153624    2.935655672413
 H   -0.063785531188    1.608737846376    2.294585672413
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-109SER-137ASN-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-109SER-137ASN-1-dimer.npy', np.array(charges))