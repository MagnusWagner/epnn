import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C   -0.779484762245   -2.055243598550    2.505185467251
 C    0.736515237755   -2.129243598550    2.718185467251
 H   -1.297484762245   -2.472243598550    3.369185467251
 H   -1.086484762245   -1.017243598550    2.368185467251
 H   -1.050484762245   -2.636243598550    1.622185467251
 H    1.208515237755   -1.665243598550    1.860185467251
 H    1.033295237755   -3.187611598550    2.760375467251
 H    1.025055237755   -1.567512598550    3.618855467251
 C    0.461515237755    0.299756401450   -0.246814532749
 C    1.900515237755    0.679756401450   -0.647814532749
 C   -0.523484762245    0.965756401450   -1.169814532749
 O   -0.893484762245    2.120756401450   -0.986814532749
 N   -0.894484762245    0.237756401450   -2.197814532749
 H    0.332515237755   -0.784243598550   -0.262814532749
 H    0.260515237755    0.656756401450    0.764185467251
 H    1.922515237755    1.749756401450   -0.834814532749
 H   -1.483484762245    0.677756401450   -2.885814532749
 H   -0.463484762245   -0.650243598550   -2.401814532749
 H    2.217785237755    0.142723401450   -1.553874532749
 H    2.610145237755    0.454164401450    0.161835467251
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-012LEU-083ASN-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-012LEU-083ASN-1-dimer.npy', np.array(charges))