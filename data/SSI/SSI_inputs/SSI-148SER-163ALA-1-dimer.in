import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C   -0.642109129123   -0.797862919881    0.970404210486
 C    0.881890870877   -0.891862919881    1.002404210486
 O   -1.229109129123   -1.952862919881    1.514404210486
 H   -0.963109129123    0.079137080119    1.535404210486
 H   -0.970109129123   -0.685862919881   -0.063595789514
 H    1.257890870877   -0.022862919881    0.469404210486
 H   -2.185109129123   -1.813862919881    1.551404210486
 H    1.217090870877   -1.815914919881    0.508671210486
 H    1.250210870877   -0.812421919881    2.035860210486
 C   -0.173109129123    1.729137080119   -1.852595789514
 C    1.316890870877    2.045137080119   -1.742595789514
 H   -0.665109129123    2.468137080119   -2.486595789514
 H   -0.307109129123    0.739137080119   -2.290595789514
 H   -0.634109129123    1.743137080119   -0.864595789514
 H    1.781890870877    1.289137080119   -1.113595789514
 H    1.456870870877    3.027281080119   -1.267413789514
 H    1.793700870877    1.977951080119   -2.731606789514
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-148SER-163ALA-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-148SER-163ALA-1-dimer.npy', np.array(charges))