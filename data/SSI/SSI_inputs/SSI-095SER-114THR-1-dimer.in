import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C   -0.660057686214    1.171089534388   -0.718665135028
 C   -0.216057686214    2.313089534388    0.187334864972
 O    0.437942313786    0.700089534388   -1.458665135028
 H   -1.066057686214    0.367089534388   -0.107665135028
 H   -1.437057686214    1.517089534388   -1.401665135028
 H    0.557942313786    1.945089534388    0.862334864972
 H    0.199942313786   -0.161910465612   -1.848665135028
 H   -1.058027686214    2.730693534388    0.758914864972
 H    0.203952313786    3.118350534388   -0.433265135028
 C   -0.400057686214   -1.922910465612    1.491334864972
 C    0.806942313786   -2.245910465612    0.628334864972
 H   -0.714057686214   -2.812910465612    2.040334864972
 H   -0.137057686214   -1.142910465612    2.206334864972
 H   -1.238057686214   -1.565910465612    0.894334864972
 H    1.125942313786   -1.341910465612    0.109334864972
 H    0.565362313786   -3.024082465612   -0.110645135028
 H    1.633762313786   -2.587693465612    1.268304864972
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-095SER-114THR-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-095SER-114THR-1-dimer.npy', np.array(charges))