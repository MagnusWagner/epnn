import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
-1 1 
 C   -0.658901492530   -2.505695988410    0.372846236320
 C   -2.158901492530   -2.640695988410    0.579846236320
 C   -0.021901492530   -1.769695988410    1.546846236320
 H   -0.214901492530   -3.498695988410    0.278846236320
 H   -0.476901492530   -1.952695988410   -0.550153763680
 H   -2.572901492530   -1.641695988410    0.727846236320
 H   -2.352901492530   -3.236695988410    1.472846236320
 H   -0.559901492530   -0.829695988410    1.709846236320
 H   -0.134901492530   -2.385695988410    2.442846236320
 H   -2.659291492530   -3.097945988410   -0.286486763680
 H    1.041728507470   -1.557852988410    1.362954656320
 C    0.654098507470    2.748304011590    0.385846236320
 C    0.714098507470    1.661304011590   -0.681153763680
 O    0.440098507470    0.489304011590   -0.368153763680
 O    1.044098507470    1.963304011590   -1.854153763680
 H   -0.173901492530    3.394304011590    0.092846236320
 H    1.581098507470    3.326304011590    0.356846236320
 H    0.488478507470    2.399925011590    1.415992306320
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-008LYS-068GLU-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-008LYS-068GLU-1-dimer.npy', np.array(charges))