import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C   -1.840722755741    1.208944326462   -0.895349445955
 C   -1.500722755741    2.587944326462   -0.324349445955
 H   -2.284722755741    1.311944326462   -1.888349445955
 H   -0.928722755741    0.624944326462   -0.989349445955
 H   -2.540722755741    0.688944326462   -0.239349445955
 H   -0.750722755741    3.051944326462   -0.961349445955
 H   -2.416092755741    3.197944326462   -0.325079445955
 H   -1.097392755741    2.503374326462    0.695540554045
 C    2.042277244259   -0.143055673538    0.151650554045
 C    0.818277244259   -1.030055673538    0.275650554045
 O    0.450277244259   -1.748055673538   -0.661349445955
 N    0.133277244259   -0.956055673538    1.408650554045
 H    2.516277244259   -0.049055673538    1.131650554045
 H    1.709277244259    0.845944326462   -0.152349445955
 H   -0.708722755741   -1.503055673538    1.492650554045
 H    0.448277244259   -0.371055673538    2.167650554045
 H    2.781127244259   -0.516055673538   -0.572909445955
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-024LEU-261ASN-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-024LEU-261ASN-1-dimer.npy', np.array(charges))