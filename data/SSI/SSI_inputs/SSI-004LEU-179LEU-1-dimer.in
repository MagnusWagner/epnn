import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C    2.006551145440    0.307759448168    1.639617735642
 C    2.394551145440   -0.866240551832    0.755617735642
 H    2.274551145440    1.249759448168    1.160617735642
 H    0.931551145440    0.308759448168    1.806617735642
 H    2.508551145440    0.231759448168    2.605617735642
 H    1.997551145440   -0.687240551832   -0.241382264358
 H    3.487151145440   -0.977160551832    0.692956735642
 H    1.942931145440   -1.794840551832    1.134743735642
 C   -1.029448854560    0.131759448168   -0.511382264358
 C   -2.335448854560   -0.582240551832   -0.163382264358
 C   -1.103448854560    1.020759448168   -1.754382264358
 H   -0.734448854560    0.749759448168    0.336617735642
 H   -0.260448854560   -0.623240551832   -0.673382264358
 H   -2.694448854560   -1.137240551832   -1.030382264358
 H   -1.873448854560    1.775759448168   -1.624382264358
 H   -3.103188854560    0.141009448168    0.148842735642
 H   -2.162158854560   -1.331710551832    0.622913735642
 H   -0.144968854560    1.539759448168   -1.902563264358
 H   -1.368508854560    0.414399448168   -2.633059264358
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-004LEU-179LEU-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-004LEU-179LEU-1-dimer.npy', np.array(charges))