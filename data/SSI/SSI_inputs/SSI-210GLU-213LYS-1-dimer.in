import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C    1.241027034623   -2.620454288966   -0.129325770445
 C    0.106027034623   -1.663454288966    0.358674229555
 O    0.129027034623   -1.301454288966    1.609674229555
 O   -0.693972965377   -1.302454288966   -0.594325770445
 H    1.337027034623   -2.555454288966   -1.216325770445
 H    0.961027034623   -3.648454288966    0.109674229555
 H    2.231207034623   -2.424074288966    0.307684229555
 C    0.151027034623    1.856545711034   -0.161325770445
 C    0.311027034623    3.350545711034    0.005674229555
 N   -1.089972965377    1.495545711034   -0.941325770445
 H    1.036027034623    1.467545711034   -0.679325770445
 H    0.108027034623    1.390545711034    0.828674229555
 H   -0.493972965377    3.739545711034    0.632674229555
 H    0.231027034623    3.826545711034   -0.974325770445
 H   -1.029972965377    1.793545711034   -1.909325770445
 H   -1.164972965377    0.470545711034   -0.954325770445
 H   -1.926972965377    1.855545711034   -0.494325770445
 H    1.281377034623    3.638265711034    0.436544229555
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-210GLU-213LYS-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-210GLU-213LYS-1-dimer.npy', np.array(charges))