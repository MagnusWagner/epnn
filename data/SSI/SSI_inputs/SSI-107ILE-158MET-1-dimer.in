import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C    0.680651508361   -0.597222685103   -2.218741683155
 C    0.772651508361   -1.180222685103   -3.632741683155
 H    1.532651508361    0.054777314897   -2.027741683155
 H   -0.238348491639   -0.022222685103   -2.107741683155
 H    0.657651508361   -1.379222685103   -1.462741683155
 H   -0.087348491639   -1.828222685103   -3.807741683155
 H    1.693481508361   -1.772182685103   -3.740691683155
 H    0.766211508361   -0.368472685103   -4.375051683155
 C    1.101651508361    0.667777314897    1.077258316845
 C   -1.263348491639    0.783777314897    2.558258316845
 S   -0.625348491639    0.130777314897    1.008258316845
 H    1.513651508361    0.484777314897    2.066258316845
 H    1.689651508361    0.127777314897    0.336258316845
 H    1.159651508361    1.736777314897    0.867258316845
 H   -0.667348491639    0.407777314897    3.391258316845
 H   -2.280348491639    0.406777314897    2.671258316845
 H   -1.280038491639    1.883227314897    2.588738316845
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-107ILE-158MET-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-107ILE-158MET-1-dimer.npy', np.array(charges))