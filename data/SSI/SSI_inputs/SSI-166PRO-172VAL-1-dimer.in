import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C    0.245702209072    0.937168045850    1.049229444328
 C    1.617702209072    0.833168045850    0.424229444328
 C    0.208702209072    2.310168045850    1.707229444328
 H    0.129702209072    0.137168045850    1.782229444328
 H   -0.539297790928    0.868168045850    0.300229444328
 H    1.967702209072   -0.197831954150    0.373229444328
 H    1.561702209072    1.264168045850   -0.572770555672
 H   -0.303297790928    2.991168045850    1.033229444328
 H    2.277972209072    1.461128045850    1.040439444328
 H    1.265212209072    2.606958045850    1.782749444328
 H   -0.251977790928    2.244148045850    2.703929444328
 C   -1.070297790928   -1.565831954150   -0.941770555672
 C   -0.996297790928   -2.454831954150   -2.167770555672
 H   -1.884297790928   -1.876831954150   -0.288770555672
 H   -0.139297790928   -1.638831954150   -0.378770555672
 H   -1.231297790928   -0.534831954150   -1.256770555672
 H   -0.917297790928   -3.488831954150   -1.832770555672
 H   -1.903237790928   -2.335101954150   -2.778610555672
 H   -0.097907790928   -2.213151954150   -2.754710555672
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-166PRO-172VAL-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-166PRO-172VAL-1-dimer.npy', np.array(charges))