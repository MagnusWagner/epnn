import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C    0.607987540405    0.264986010562   -1.172270817472
 C    3.088987540405   -0.098013989438    0.032729182528
 S    1.342987540405   -0.450013989438    0.308729182528
 H    1.190987540405   -0.013013989438   -2.053270817472
 H   -0.388012459595   -0.140013989438   -1.309270817472
 H    0.541987540405    1.349986010562   -1.081270817472
 H    3.481987540405   -0.842013989438   -0.659270817472
 H    3.618987540405   -0.175013989438    0.977729182528
 H    3.235217540405    0.909636010562   -0.383510817472
 C   -2.950012459595    0.485986010562   -0.393270817472
 C   -3.649012459595    0.263986010562    0.949729182528
 H   -3.689012459595    0.628986010562   -1.184270817472
 H   -2.308012459595    1.367986010562   -0.342270817472
 H   -2.324012459595   -0.362013989438   -0.657270817472
 H   -2.883012459595    0.253986010562    1.724729182528
 H   -4.175752459595   -0.701693989438    0.948299182528
 H   -4.351852459595    1.081456010562    1.168249182528
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-157MET-181ILE-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-157MET-181ILE-1-dimer.npy', np.array(charges))