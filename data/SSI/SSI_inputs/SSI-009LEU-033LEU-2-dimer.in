import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C   -0.875735663807   -1.751733077757    0.184863035444
 C   -2.021735663807   -1.660733077757    1.185863035444
 H   -0.012735663807   -1.199733077757    0.550863035444
 H   -0.601735663807   -2.795733077757    0.033863035444
 H   -1.181735663807   -1.336733077757   -0.773136964556
 H   -2.901735663807   -2.141733077757    0.760863035444
 H   -2.226109663807   -0.606593077757    1.424653035444
 H   -1.775081663807   -2.211733077757    2.105403035444
 C    0.719264336193    1.595266922243   -0.483136964556
 C    2.177264336193    1.823266922243   -0.887136964556
 H    0.119264336193    2.490266922243   -0.634136964556
 H    0.310264336193    0.779266922243   -1.078136964556
 H    0.661264336193    1.320266922243    0.565863035444
 H    2.236264336193    1.919266922243   -1.971136964556
 H    2.576873336193    2.733766922243   -0.416706964556
 H    2.806427336193    0.977176922243   -0.573636964556
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-009LEU-033LEU-2-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-009LEU-033LEU-2-dimer.npy', np.array(charges))