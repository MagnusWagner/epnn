import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C    0.534781598663   -1.686183084359    0.977219146924
 C   -0.450218401337   -2.192183084359    2.020219146924
 H    0.458781598663   -2.282183084359    0.071219146924
 H    0.298781598663   -0.661183084359    0.718219146924
 H    1.552781598663   -1.730183084359    1.365219146924
 H   -0.367218401337   -1.598183084359    2.921219146924
 H   -0.177646401337   -3.228963084359    2.266762146924
 H   -1.484585401337   -2.122113084359    1.652556146924
 C    0.182781598663    1.346816915641   -1.073780853076
 C   -0.272218401337    2.531816915641   -1.920780853076
 H   -0.674218401337    0.930816915641   -0.544780853076
 H    0.603781598663    0.577816915641   -1.720780853076
 H    0.940781598663    1.652816915641   -0.366780853076
 H    0.608781598663    2.993816915641   -2.366780853076
 H   -0.783344401337    3.270906915641   -1.286354053076
 H   -0.918647401337    2.193446915641   -2.743968453076
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-013LEU-077LEU-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-013LEU-077LEU-1-dimer.npy', np.array(charges))