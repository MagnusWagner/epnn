import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
-1 1 
 C    0.415143859557   -0.136596782804    0.980965471569
 C   -0.590856140443   -1.286596782804    1.153965471569
 C   -0.163856140443    1.242403217196    1.299965471569
 O   -1.168856140443    1.344403217196    2.041965471569
 O    0.434143859557    2.231403217196    0.818965471569
 H    1.271143859557   -0.313596782804    1.632965471569
 H    0.787143859557   -0.143596782804   -0.041034528431
 H   -0.028856140443   -2.209596782804    1.006965471569
 H   -1.385216140443   -1.221720782804    0.395818471569
 H   -1.012336140443   -1.333188782804    2.168947471569
 C    1.060143859557   -1.436596782804   -2.558034528431
 C    0.021143859557   -1.873596782804   -3.581034528431
 H    0.874143859557   -0.410596782804   -2.250034528431
 H    0.998143859557   -2.079596782804   -1.680034528431
 H    2.061143859557   -1.509596782804   -2.983034528431
 H   -0.963856140443   -1.767596782804   -3.132034528431
 H    0.071443859557   -1.259264782804   -4.492114528431
 H    0.155993859557   -2.935743782804   -3.833339528431
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-152ASP-158LEU-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-152ASP-158LEU-1-dimer.npy', np.array(charges))