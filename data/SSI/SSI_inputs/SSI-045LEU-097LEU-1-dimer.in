import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C   -1.434509938892   -0.107528714547   -0.619966313134
 C   -2.774509938892   -0.846528714547   -0.802966313134
 H   -0.896509938892   -0.074528714547   -1.563966313134
 H   -1.616509938892    0.913471285453   -0.295966313134
 H   -0.833509938892   -0.630528714547    0.123033686866
 H   -3.181509938892   -1.070528714547    0.174033686866
 H   -2.629821938892   -1.773388714547   -1.377419313134
 H   -3.508263938892   -0.191003714547   -1.294791313134
 C    1.924490061108   -0.021528714547    1.256033686866
 C    2.292490061108    0.974471285453    0.165033686866
 H    1.069490061108    0.346471285453    1.815033686866
 H    1.659490061108   -0.972528714547    0.800033686866
 H    2.766490061108   -0.166528714547    1.933033686866
 H    1.458490061108    1.028471285453   -0.532966313134
 H    2.433683061108    1.961374285453    0.629884686866
 H    3.183701061108    0.642522285453   -0.387734313134
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-045LEU-097LEU-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-045LEU-097LEU-1-dimer.npy', np.array(charges))