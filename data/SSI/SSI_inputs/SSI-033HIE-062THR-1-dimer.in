import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C    0.047810657753    2.311616919718    2.466357051774
 C    1.387810657753   -0.160383080282    0.162357051774
 C   -0.600189342247    0.737616919718    0.473357051774
 C    0.250810657753    1.268616919718    1.395357051774
 N    0.140810657753   -0.129383080282   -0.290642948226
 N    1.491810657753    0.695616919718    1.180357051774
 H   -0.120189342247   -0.325383080282   -1.241642948226
 H    2.221810657753   -0.677383080282   -0.298642948226
 H   -1.635189342247    0.984616919718    0.316357051774
 H    0.625810657753    3.188616919718    2.171357051774
 H    0.468810657753    1.937616919718    3.396357051774
 H   -0.992959342247    2.621466919718    2.641867051774
 C   -1.643189342247   -2.566383080282   -2.265642948226
 O   -0.682189342247   -1.533383080282   -2.371642948226
 H   -0.171189342247   -1.711383080282   -1.565642948226
 H   -1.788189342247   -2.820383080282   -1.216642948226
 H   -2.601409342247   -2.239943080282   -2.696042948226
 H   -1.233209342247   -3.434163080282   -2.803112948226
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-033HIE-062THR-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-033HIE-062THR-1-dimer.npy', np.array(charges))