import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C    0.070862618111   -0.368740374007   -1.580939907216
 C    0.260862618111    0.351259625993   -2.928939907216
 H   -0.245137381889   -1.398740374007   -1.752939907216
 H    1.016862618111   -0.379740374007   -1.042939907216
 H   -0.674137381889    0.151259625993   -0.982939907216
 H    1.104862618111   -0.113740374007   -3.435939907216
 H   -0.638127381889    0.320531625993   -3.562089907216
 H    0.479722618111    1.413038625993   -2.742589907216
 C    0.586862618111    0.030259625993    2.142060092784
 C   -0.929137381889   -0.018740374007    2.369060092784
 H    1.022862618111   -0.967740374007    2.191060092784
 H    0.788862618111    0.426259625993    1.148060092784
 H    1.067862618111    0.685259625993    2.869060092784
 H   -1.360137381889   -0.783740374007    1.732060092784
 H   -1.069117381889   -0.241861374007    3.437060092784
 H   -1.368767381889    0.960196625993    2.127370092784
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-062LEU-079LEU-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-062LEU-079LEU-1-dimer.npy', np.array(charges))