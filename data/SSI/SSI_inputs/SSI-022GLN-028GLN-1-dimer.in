import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C    2.263410394445    2.458984329902   -0.725578079834
 C    2.140410394445    1.090984329902   -0.077578079834
 O    1.197410394445    0.826984329902    0.662421920166
 N    3.086410394445    0.208984329902   -0.352578079834
 H    1.380410394445    2.570984329902   -1.348578079834
 H    3.136410394445    2.502984329902   -1.377578079834
 H    3.016410394445   -0.698015670098    0.081421920166
 H    3.900410394445    0.455984329902   -0.901578079834
 H    2.326761394445    3.262384329902    0.023110920166
 C   -2.596589605555   -0.123015670098   -0.832578079834
 C   -2.122589605555   -1.160015670098    0.158421920166
 O   -0.925589605555   -1.312015670098    0.388421920166
 N   -3.050589605555   -1.890015670098    0.760421920166
 H   -2.105589605555   -0.326015670098   -1.772578079834
 H   -2.253589605555    0.828984329902   -0.431578079834
 H   -2.742589605555   -2.600015670098    1.409421920166
 H   -4.029589605555   -1.785015670098    0.547421920166
 H   -3.685825605555   -0.149655670098   -0.983761079834
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-022GLN-028GLN-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-022GLN-028GLN-1-dimer.npy', np.array(charges))