import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C   -1.989356217967   -1.422535065750    0.085134886631
 C   -3.078356217967   -0.395535065750    0.357134886631
 H   -2.396356217967   -2.419535065750    0.237134886631
 H   -1.670356217967   -1.324535065750   -0.943865113369
 H   -1.117356217967   -1.269535065750    0.717134886631
 H   -2.654356217967    0.596464934250    0.191134886631
 H   -3.438216217967   -0.462915065750    1.394424886631
 H   -3.913312217967   -0.536255065750   -0.345035113369
 C    1.518643782033    0.102464934250   -0.195865113369
 C    2.750643782033    0.576464934250   -0.994865113369
 C    0.900643782033    1.150464934250    0.736134886631
 H    0.751643782033   -0.243535065750   -0.885865113369
 H    1.798643782033   -0.738535065750    0.435134886631
 H    3.492643782033    0.949464934250   -0.285865113369
 H    0.445643782033    1.952464934250    0.159134886631
 H    0.123643782033    0.676464934250    1.329134886631
 H    1.662643782033    1.557464934250    1.403134886631
 H    3.189153782033   -0.258925065750   -1.560405113369
 H    2.508833782033    1.386604934250   -1.698575113369
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-061VAL-068ILE-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-061VAL-068ILE-1-dimer.npy', np.array(charges))