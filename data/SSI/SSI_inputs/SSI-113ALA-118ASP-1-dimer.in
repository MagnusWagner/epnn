import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
-1 1 
 C   -2.458640645911   -1.654939249642    0.068848812343
 C   -1.399640645911   -2.674939249642   -0.336151187657
 H   -3.392640645911   -2.158939249642    0.316848812343
 H   -2.120640645911   -1.087939249642    0.936848812343
 H   -2.630640645911   -0.960939249642   -0.753151187657
 H   -0.524640645911   -2.125939249642   -0.689151187657
 H   -1.787490645911   -3.305753249642   -1.149569187657
 H   -1.091490645911   -3.272559249642    0.534420812343
 C   -0.218640645911    1.116060750358    0.315848812343
 C   -0.053640645911    2.629060750358    0.462848812343
 C    1.068359354089    0.418060750358   -0.058151187657
 O    1.734359354089    0.871060750358   -1.019151187657
 O    1.394359354089   -0.597939249642    0.593848812343
 H   -0.626640645911    0.701060750358    1.237848812343
 H   -0.939640645911    0.913060750358   -0.477151187657
 H    0.270359354089    3.025060750358   -0.501151187657
 H    0.697099354089    2.869296750358    1.230102812343
 H   -1.047540645911    3.053777750358    0.667261812343
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-113ALA-118ASP-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-113ALA-118ASP-1-dimer.npy', np.array(charges))