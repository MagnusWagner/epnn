import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
-1 1 
 C    1.403250905781   -1.378875688019   -0.999787714769
 C    1.943250905781   -0.214875688019   -1.846787714769
 C    2.324250905781   -2.588875688019   -1.056787714769
 O    1.292250905781   -0.952875688019    0.355212285231
 H    0.424250905781   -1.670875688019   -1.371787714769
 H    2.940250905781    0.029124311981   -1.478787714769
 H    3.322250905781   -2.314875688019   -0.715787714769
 H    1.931250905781   -3.376875688019   -0.414787714769
 H    2.387250905781   -2.970875688019   -2.075787714769
 H    0.488250905781   -0.386875688019    0.383212285231
 H    1.293934905781    0.665204311981   -1.729141714769
 H    2.039668905781   -0.478945688019   -2.910259014769
 C   -1.881749094219    1.171124311981    2.298212285231
 C   -1.747749094219    1.292124311981    0.789212285231
 O   -0.935749094219    0.546124311981    0.191212285231
 O   -2.458749094219    2.141124311981    0.210212285231
 H   -2.866749094219    0.769124311981    2.542212285231
 H   -1.792749094219    2.163124311981    2.747212285231
 H   -1.108289094219    0.519334311981    2.730567285231
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-036THR-090GLU-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-036THR-090GLU-1-dimer.npy', np.array(charges))