import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C    1.257885447351   -0.475787353693   -2.115704639263
 C    1.459885447351   -1.949787353693   -1.794704639263
 H    1.590885447351   -0.262787353693   -3.128704639263
 H    0.195885447351   -0.231787353693   -2.062704639263
 H    1.804885447351    0.146212646307   -1.405704639263
 H    0.954885447351   -2.524787353693   -2.570704639263
 H    2.531495447351   -2.198078353693   -1.791824639263
 H    0.996575447351   -2.197705353693   -0.828334639263
 C   -0.023114552649    0.387212646307    2.261295360737
 C   -0.747114552649    0.581212646307    0.949295360737
 O   -1.637114552649   -0.189787353693    0.598295360737
 N   -0.379114552649    1.621212646307    0.215295360737
 H    0.254885447351    1.365212646307    2.661295360737
 H    0.893885447351   -0.168787353693    2.065295360737
 H   -0.867114552649    1.801212646307   -0.647704639263
 H    0.336885447351    2.251212646307    0.547295360737
 H   -0.632454552649   -0.143522353693    3.007645360737
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-013VAL-154ASN-2-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-013VAL-154ASN-2-dimer.npy', np.array(charges))