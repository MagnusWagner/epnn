import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C   -0.702034225405    0.895769839794    0.283503195677
 C   -0.239034225405    1.275769839794    1.696503195677
 O   -1.966034225405    1.457769839794   -0.014496804323
 H    0.028965774595    1.247769839794   -0.445496804323
 H   -0.791034225405   -0.188230160206    0.238503195677
 H    0.822965774595    1.075769839794    1.795503195677
 H   -2.632034225405    1.035769839794    0.543503195677
 H   -0.776176225405    0.698003839794    2.463096195677
 H   -0.374572225405    2.351423839794    1.882508195677
 C    1.042965774595   -1.707230160206   -1.549496804323
 C    2.053965774595   -1.992230160206   -0.449496804323
 H    0.495965774595   -2.619230160206   -1.790496804323
 H    0.337965774595   -0.961230160206   -1.234496804323
 H    1.539965774595   -1.355230160206   -2.455496804323
 H    1.551965774595   -2.540230160206    0.347503195677
 H    2.471418774595   -1.064078160206   -0.032043804323
 H    2.857500774595   -2.623684160206   -0.856433804323
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-098SER-127VAL-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-098SER-127VAL-1-dimer.npy', np.array(charges))