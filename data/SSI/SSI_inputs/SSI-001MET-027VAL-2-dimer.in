import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C    0.487316813125    0.213964428352    2.367311925990
 C    2.116316813125   -1.094035571648    0.306311925990
 S    0.661316813125   -0.094035571648    0.604311925990
 H    1.462316813125    0.473964428352    2.782311925990
 H    0.154316813125   -0.710035571648    2.842311925990
 H    1.953316813125   -2.083035571648    0.734311925990
 H    2.258316813125   -1.153035571648   -0.770688074010
 H    2.987316813125   -0.627035571648    0.767311925990
 H   -0.231143186875    1.012894428352    2.602961925990
 C   -1.736683186875    0.556964428352   -1.312688074010
 C   -2.327683186875    0.546964428352   -2.709688074010
 H   -0.662683186875    0.652964428352   -1.434688074010
 H   -2.122683186875    1.415964428352   -0.765688074010
 H   -1.989683186875   -0.347035571648   -0.758688074010
 H   -3.413683186875    0.605964428352   -2.638688074010
 H   -2.036113186875   -0.365955571648   -3.249658074010
 H   -1.946403186875    1.442114428352   -3.222838074010
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-001MET-027VAL-2-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-001MET-027VAL-2-dimer.npy', np.array(charges))