import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
-1 1 
 C   -1.790282734397   -1.200778638529    0.360348318517
 C   -1.226282734397   -2.446778638529   -0.293651681483
 C   -1.069282734397   -0.887778638529    1.670348318517
 O   -1.267282734397   -1.566778638529    2.680348318517
 N   -0.252282734397    0.159221361471    1.670348318517
 H   -1.728282734397   -0.345778638529   -0.309651681483
 H   -2.845282734397   -1.358778638529    0.588348318517
 H   -1.357282734397   -3.256778638529    0.417348318517
 H    0.273717265603    0.378221361471    2.498348318517
 H   -0.044282734397    0.592221361471    0.768348318517
 H   -0.152822734397   -2.286707638529   -0.472691681483
 H   -1.721522734397   -2.647252638529   -1.255181681483
 C    1.285717265603    2.744221361471   -2.177651681483
 C    1.366717265603    1.401221361471   -1.465651681483
 O    0.326717265603    0.814221361471   -1.115651681483
 O    2.475717265603    0.888221361471   -1.287651681483
 H    0.791717265603    2.574221361471   -3.136651681483
 H    2.283717265603    3.134221361471   -2.390651681483
 H    0.709067265603    3.493437361471   -1.615381681483
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-095ASN-164ASP-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-095ASN-164ASP-1-dimer.npy', np.array(charges))