import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C    1.443962821927   -0.221828381148   -0.977502683334
 C    2.756962821927   -0.911828381148   -0.987502683334
 H    1.573962821927    0.861171618852   -0.962502683334
 H    0.894962821927   -0.486828381148   -1.881502683334
 H    0.842962821927   -0.525828381148   -0.121502683334
 H    2.582962821927   -1.985828381148   -1.056502683334
 H    3.279312821927   -0.702888381148   -0.042252683334
 H    3.371102821927   -0.620228381148   -1.852252683334
 C   -1.994037178073    0.637171618852    0.212497316666
 C   -2.206037178073    0.498171618852    1.752497316666
 H   -2.923037178073    0.939171618852   -0.271502683334
 H   -1.249037178073    1.410171618852    0.019497316666
 H   -1.649037178073   -0.306828381148   -0.209502683334
 H   -2.679037178073    1.403171618852    2.127497316666
 H   -2.820497178073   -0.380948381148    1.996577316666
 H   -1.234757178073    0.375611618852    2.254077316666
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-069THR-080LEU-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-069THR-080LEU-1-dimer.npy', np.array(charges))