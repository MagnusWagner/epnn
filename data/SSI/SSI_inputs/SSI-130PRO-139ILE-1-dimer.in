import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C   -1.217722943351   -0.253566456757    0.800779916748
 C   -1.662722943351   -1.607566456757    1.281779916748
 C   -1.571722943351    0.683433543243    1.926779916748
 H   -1.781722943351    0.019433543243   -0.093220083252
 H   -0.150722943351   -0.241566456757    0.588779916748
 H   -1.929722943351   -2.231566456757    0.427779916748
 H   -0.870722943351   -2.071566456757    1.870779916748
 H   -1.699722943351    1.708433543243    1.572779916748
 H   -0.792722943351    0.651433543243    2.688779916748
 H   -2.524422943351   -1.380130456757    1.926559916748
 H   -2.497962943351    0.267847543243    2.350289916748
 C    1.697277056649    0.340433543243   -1.451220083252
 C    2.675277056649    0.817433543243   -2.516220083252
 H    1.522277056649   -0.731566456757   -1.543220083252
 H    2.111277056649    0.546433543243   -0.465220083252
 H    0.751277056649    0.872433543243   -1.550220083252
 H    3.583277056649    0.215433543243   -2.466220083252
 H    2.948277056649    1.842433543243   -2.265220083252
 H    2.279297056649    0.768653543243   -3.541320083252
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-130PRO-139ILE-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-130PRO-139ILE-1-dimer.npy', np.array(charges))