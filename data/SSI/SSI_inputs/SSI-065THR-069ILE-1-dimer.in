import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C   -0.565031864591   -0.808891562171   -1.482553728498
 C   -1.543031864591   -0.085891562171   -2.425553728498
 H   -1.061031864591   -1.646891562171   -0.992553728498
 H    0.278968135409   -1.187891562171   -2.060553728498
 H   -0.177031864591   -0.125891562171   -0.730553728498
 H   -1.035031864591    0.757108437829   -2.895553728498
 H   -2.398251864591    0.281348437829   -1.839263728498
 H   -1.908851864591   -0.754271562171   -3.218925728498
 C    1.560968135409    0.586108437829    1.394446271502
 C    0.546968135409    0.314108437829    2.516446271502
 H    2.516968135409    0.898108437829    1.810446271502
 H    1.716968135409   -0.325891562171    0.817446271502
 H    1.175968135409    1.366108437829    0.738446271502
 H    0.959968135409   -0.425891562171    3.198446271502
 H   -0.342031864591   -0.116891562171    2.055446271502
 H    0.274908135409    1.216248437829    3.084011471502
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-065THR-069ILE-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-065THR-069ILE-1-dimer.npy', np.array(charges))