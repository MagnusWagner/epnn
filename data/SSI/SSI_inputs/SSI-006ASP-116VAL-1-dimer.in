import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
-1 1 
 C   -0.012455392216   -0.723660724754   -0.593432561869
 C   -0.501455392216   -1.953660724754   -1.402432561869
 C    0.924544607784   -1.090660724754    0.589567438131
 O    1.225544607784   -2.292660724754    0.776567438131
 O    1.433544607784   -0.189660724754    1.276567438131
 H    0.446544607784   -0.002660724754   -1.251432561869
 H   -0.892455392216   -0.244660724754   -0.165432561869
 H   -0.907455392216   -1.547660724754   -2.329432561869
 H   -1.304956392216   -2.477320724754   -0.863762561869
 H    0.351116607784   -2.588620724754   -1.685192561869
 C   -1.455455392216    2.771339275246   -1.023432561869
 C   -1.544455392216    3.337339275246    0.390567438131
 H   -1.287455392216    1.701339275246   -1.003432561869
 H   -2.396455392216    2.960339275246   -1.544432561869
 H   -0.669455392216    3.258339275246   -1.601432561869
 H   -1.625455392216    4.421339275246    0.312567438131
 H   -0.630443392216    3.085249275246    0.948267438131
 H   -2.455127392216    2.960289275246    0.878937438131
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-006ASP-116VAL-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-006ASP-116VAL-1-dimer.npy', np.array(charges))