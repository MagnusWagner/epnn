import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C    0.410065358481    0.156270271890   -2.544279918961
 C   -0.210934641519   -1.143729728110   -2.062279918961
 O   -0.531934641519   -2.026729728110   -2.858279918961
 N   -0.389934641519   -1.279729728110   -0.757279918961
 H   -0.780934641519   -2.144729728110   -0.417279918961
 H   -0.182934641519   -0.535729728110   -0.100279918961
 H    1.340065358481   -0.083729728110   -3.062279918961
 H    0.671065358481    0.789270271890   -1.695279918961
 H   -0.245874641519    0.705878571890   -3.235419918961
 C   -0.623934641519    1.881270271890    2.937720081039
 C    0.180065358481    0.998270271890    2.003720081039
 O   -0.083934641519   -0.193729728110    1.860720081039
 N    1.186065358481    1.575270271890    1.366720081039
 H   -0.738934641519    2.866270271890    2.491720081039
 H   -0.039934641519    2.000270271890    3.851720081039
 H    1.798065358481    1.006270271890    0.801720081039
 H    1.413065358481    2.542270271890    1.548720081039
 H   -1.607014641519    1.459232971890    3.193520081039
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-066GLN-070ASN-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-066GLN-070ASN-1-dimer.npy', np.array(charges))