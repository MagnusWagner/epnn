import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C    1.879919207062    1.231262982806    2.565831533156
 C    0.580919207062    1.360262982806    1.806831533156
 O   -0.490080792938    1.360262982806    2.400831533156
 N    0.655919207062    1.343262982806    0.484831533156
 H   -0.195080792938    1.225262982806   -0.054168466844
 H    1.551919207062    1.344262982806    0.025831533156
 H    1.951919207062    2.051262982806    3.280831533156
 H    2.718919207062    1.310262982806    1.873831533156
 H    1.921159207062    0.269652982806    3.098372533156
 C    0.383919207062   -1.514737017194   -2.792168466844
 C   -0.690080792938   -1.255737017194   -1.754168466844
 O   -1.017080792938   -0.110737017194   -1.435168466844
 N   -1.269080792938   -2.323737017194   -1.223168466844
 H    0.026919207062   -2.272737017194   -3.491168466844
 H    1.210919207062   -1.961737017194   -2.264168466844
 H   -2.012080792938   -2.180737017194   -0.554168466844
 H   -1.026080792938   -3.248737017194   -1.543168466844
 H    0.635349207062   -0.613887017194   -3.371181466844
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-099GLN-108GLN-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-099GLN-108GLN-1-dimer.npy', np.array(charges))