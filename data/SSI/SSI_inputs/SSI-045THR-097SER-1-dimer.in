import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C   -0.624075247562    2.479060527501   -0.133696482460
 C   -1.367075247562    2.646060527501    1.192303517540
 H   -0.913075247562    1.543060527501   -0.606696482460
 H   -0.891075247562    3.301060527501   -0.795696482460
 H    0.453924752438    2.497060527501    0.018303517540
 H   -1.160075247562    3.638060527501    1.597303517540
 H   -1.048425247562    1.878730527501    1.913193517540
 H   -2.448065247562    2.563440527501    1.006213517540
 C    0.661924752438   -1.114939472499   -0.451696482460
 C    0.885924752438   -2.193939472499   -1.507696482460
 O    0.476924752438   -1.681939472499    0.833303517540
 H    1.519924752438   -0.451939472499   -0.444696482460
 H   -0.223075247562   -0.536939472499   -0.719696482460
 H    1.015924752438   -1.692939472499   -2.468696482460
 H   -0.419075247562   -2.056939472499    0.864303517540
 H    0.013564752438   -2.861219472499   -1.568766482460
 H    1.808694752438   -2.753519472499   -1.294696482460
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-045THR-097SER-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-045THR-097SER-1-dimer.npy', np.array(charges))