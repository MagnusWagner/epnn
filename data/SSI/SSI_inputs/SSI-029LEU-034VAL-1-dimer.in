import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C   -1.693567091501   -0.396489732907   -1.012013788969
 C   -2.784567091501    0.624510267093   -1.308013788969
 H   -1.686567091501   -0.673489732907    0.040986211031
 H   -1.884567091501   -1.296489732907   -1.597013788969
 H   -0.716567091501   -0.003489732907   -1.294013788969
 H   -3.744567091501    0.255510267093   -0.950013788969
 H   -2.500497091501    1.564618267093   -0.812533788969
 H   -2.868027091501    0.845649267093   -2.382323788969
 C    1.583432908499    0.105510267093    0.809986211031
 C    2.897432908499   -0.326489732907    1.502986211031
 H    1.801432908499    0.704510267093   -0.075013788969
 H    1.037432908499   -0.784489732907    0.497986211031
 H    0.949432908499    0.677510267093    1.485986211031
 H    2.599432908499   -0.919489732907    2.367986211031
 H    3.448282908499    0.537825267093    1.902386211031
 H    3.532252908499   -0.992011732907    0.899586211031
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-029LEU-034VAL-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-029LEU-034VAL-1-dimer.npy', np.array(charges))