import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C   -0.485542551878    0.731202069450   -2.386346871414
 C   -0.188542551878    2.124202069450   -1.869346871414
 H   -0.397542551878    0.710202069450   -3.472346871414
 H    0.222457448122    0.019202069450   -1.969346871414
 H   -1.491542551878    0.434202069450   -2.107346871414
 H   -0.331542551878    2.126202069450   -0.787346871414
 H   -0.882042551878    2.853282069450   -2.313760871414
 H    0.860987448122    2.376002069450   -2.081690871414
 C    0.125457448122   -0.549797930550    1.061653128586
 C   -0.459542551878   -1.958797930550    0.971653128586
 C    1.022457448122   -0.380797930550    2.279653128586
 H    0.703457448122   -0.339797930550    0.162653128586
 H   -0.692542551878    0.168202069450    1.130653128586
 H   -0.938542551878   -2.194797930550    1.914653128586
 H    0.387457448122   -0.529797930550    3.157653128586
 H    1.785457448122   -1.150797930550    2.342653128586
 H    0.351277448122   -2.680447930550    0.793319128586
 H   -1.220682551878   -2.005517930550    0.178886128586
 H    1.473227448122    0.618572069450    2.369516128586
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-011ALA-016GLU-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-011ALA-016GLU-1-dimer.npy', np.array(charges))