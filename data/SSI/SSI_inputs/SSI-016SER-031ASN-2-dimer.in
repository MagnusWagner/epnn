import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C    0.558498175718    1.711679011219   -2.885393772037
 O    0.041498175718    1.671679011219   -1.570393772037
 H   -0.466501824282    2.487679011219   -1.446393772037
 H    1.478498175718    1.125679011219   -2.921393772037
 H    0.797498175718    2.740679011219   -3.158393772037
 H   -0.165601824282    1.298529011219   -3.603015772037
 C   -0.524501824282   -1.146320988781    0.049606227963
 C   -1.979501824282   -1.394320988781    0.480606227963
 C    0.360498175718   -0.608320988781    1.160606227963
 O    0.581498175718   -1.268320988781    2.171606227963
 N    0.909498175718    0.576679011219    0.963606227963
 H   -0.092501824282   -2.093320988781   -0.271393772037
 H   -0.504501824282   -0.488320988781   -0.803393772037
 H   -1.997501824282   -2.154320988781    1.265606227963
 H    1.527498175718    0.953679011219    1.667606227963
 H    0.747498175718    1.061679011219    0.085606227963
 H   -2.533391824282   -1.753520988781   -0.399273772037
 H   -2.442871824282   -0.479110988781    0.877680227963
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-016SER-031ASN-2-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-016SER-031ASN-2-dimer.npy', np.array(charges))