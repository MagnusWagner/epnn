import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
-1 1 
 C   -1.288384115172   -2.455528140293    1.042195129267
 C   -2.632384115172   -2.878528140293    0.453195129267
 H   -1.228384115172   -2.763528140293    2.085195129267
 H   -0.485384115172   -2.935528140293    0.481195129267
 H   -1.153384115172   -1.378528140293    0.969195129267
 H   -2.668384115172   -2.582528140293   -0.593804870733
 H   -3.459451115172   -2.400000140293    0.998145129267
 H   -2.727296115172   -3.973663140293    0.494080129267
 C    1.159615884828    0.108471859707   -0.377804870733
 C    2.197615884828    0.327471859707   -1.475804870733
 C    0.399615884828    1.358471859707   -0.018804870733
 O    1.081615884828    2.389471859707    0.074195129267
 O   -0.819384115172    1.262471859707    0.264195129267
 H    0.472615884828   -0.683528140293   -0.673804870733
 H    1.673615884828   -0.230528140293    0.525195129267
 H    2.762615884828    1.234471859707   -1.251804870733
 H    1.712205884828    0.426364859707   -2.457944870733
 H    2.891195884828   -0.526106140293   -1.456980870733
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-051LEU-055ASP-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-051LEU-055ASP-1-dimer.npy', np.array(charges))