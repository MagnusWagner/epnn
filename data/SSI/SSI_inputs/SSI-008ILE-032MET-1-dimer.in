import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C   -1.209684285458   -2.347246582465    1.795422262689
 C   -0.273684285458   -3.530246582465    2.037422262689
 H   -2.227684285458   -2.609246582465    2.084422262689
 H   -0.881684285458   -1.509246582465    2.397422262689
 H   -1.186684285458   -2.035246582465    0.754422262689
 H    0.743315714542   -3.257246582465    1.749422262689
 H   -0.602344285458   -4.403584582465    1.454962262689
 H   -0.310754285458   -3.776878582465    3.108772262689
 C   -0.548684285458    0.275753417535   -0.754577737311
 C    1.587315714542    1.852753417535   -0.237577737311
 S    0.197315714542    1.789753417535   -1.367577737311
 H   -1.063684285458    0.440753417535    0.190422262689
 H   -1.282684285458   -0.068246582465   -1.479577737311
 H    0.209315714542   -0.502246582465   -0.655577737311
 H    2.019315714542    2.853753417535   -0.250577737311
 H    2.340315714542    1.143753417535   -0.576577737311
 H    1.279055714542    1.584385417535    0.783672262689
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-008ILE-032MET-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-008ILE-032MET-1-dimer.npy', np.array(charges))