import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
1 1 
 C    2.746327498343    1.606704671862   -1.634926757463
 N    1.352327498343    1.147704671862   -1.927926757463
 H    0.835327498343    0.966704671862   -1.072926757462
 H    0.850327498343    1.838704671862   -2.476926757463
 H    1.361327498343    0.285704671862   -2.462926757463
 H    2.703327498343    2.589704671862   -1.154926757462
 H    3.304327498343    1.719704671862   -2.570926757463
 H    3.298577498343    0.921098671862   -0.975406757462
 C   -2.161672501657    0.169704671862    0.736073242538
 C   -1.034672501657   -0.781295328138    0.955073242537
 O   -0.091672501657   -0.613295328138    0.196073242538
 N   -1.062672501657   -1.687295328138    1.950073242537
 H   -2.912672501657   -0.004295328138    1.510073242538
 H   -2.621672501657   -0.055295328138   -0.226926757463
 H   -0.290672501657   -2.333295328138    2.037073242537
 H   -1.880672501657   -1.773295328138    2.533073242538
 H   -1.858902501657    1.226610671862    0.771813242538
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-002LYS-075ASN-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-002LYS-075ASN-1-dimer.npy', np.array(charges))