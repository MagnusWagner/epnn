import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C   -0.083768347296   -1.870821018282    0.470821111692
 C    1.206231652704   -2.200821018282    1.212821111692
 H   -0.707768347296   -1.210821018282    1.072821111692
 H    0.165231652704   -1.375821018282   -0.467178888308
 H   -0.643768347296   -2.765821018282    0.213821111692
 H    1.798231652704   -2.872821018282    0.592821111692
 H    0.991813652704   -2.692762018282    2.173039111692
 H    1.798199652704   -1.287993018282    1.375053111692
 C    0.031231652704    1.639178981718   -1.082178888308
 C   -1.153768347296    2.440178981718   -0.594178888308
 H    0.335231652704    0.910178981718   -0.334178888308
 H   -0.232768347296    1.105178981718   -1.989178888308
 H    0.870231652704    2.298178981718   -1.286178888308
 H   -2.012768347296    1.776178981718   -0.660178888308
 H   -1.008725347296    2.715034981718    0.461007111692
 H   -1.352267347296    3.309415981718   -1.238402888308
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-005LEU-077LEU-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-005LEU-077LEU-1-dimer.npy', np.array(charges))