import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C   -0.536884179386   -1.148386139051    0.254720573177
 C   -0.296884179386   -2.114386139051   -0.901279426823
 O   -1.367884179386   -1.731386139051    1.244720573177
 H    0.418115820614   -0.874386139051    0.706720573177
 H   -1.014884179386   -0.245386139051   -0.122279426823
 H   -1.244884179386   -2.299386139051   -1.407279426823
 H   -0.790884179386   -2.263386139051    1.818720573177
 H    0.105258820614   -3.068626139051   -0.530186426823
 H    0.419075820614   -1.680926139051   -1.615083426823
 C    0.849115820614    1.873613860949   -0.378279426823
 C    1.418115820614    3.273613860949   -0.346279426823
 H    0.277115820614    1.672613860949    0.525720573177
 H    0.175115820614    1.781613860949   -1.229279426823
 H    1.653115820614    1.143613860949   -0.478279426823
 H    0.604115820614    3.985613860949   -0.194279426823
 H    1.851115820614    3.464613860949   -1.327279426823
 H    2.188935820614    3.424493860949    0.423829573177
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-113SER-120ILE-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-113SER-120ILE-1-dimer.npy', np.array(charges))