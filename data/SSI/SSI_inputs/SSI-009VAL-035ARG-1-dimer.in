import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C    2.067420065583   -0.812480214681    0.368575461002
 C    3.407420065583   -1.261480214681    0.940575461002
 H    1.921420065583   -1.231480214681   -0.627424538998
 H    1.267420065583   -1.158480214681    1.022575461002
 H    2.009420065583    0.275519785319    0.317575461002
 H    3.534420065583   -0.819480214681    1.925575461002
 H    4.221143065583   -0.898870214681    0.295305461002
 H    3.418208065583   -2.355390214681    1.055645461002
 C   -1.398579934417    0.633519785319   -0.121424538998
 C   -1.701579934417    1.917519785319   -0.887424538998
 C   -2.461579934417   -0.445480214681   -0.326424538998
 H   -0.407579934417    0.259519785319   -0.376424538998
 H   -1.390579934417    0.885519785319    0.938575461002
 H   -1.037579934417    2.697519785319   -0.508424538998
 H   -2.724579934417    2.219519785319   -0.659424538998
 H   -2.659579934417   -0.940480214681    0.625575461002
 H   -3.401579934417    0.011519785319   -0.640424538998
 H   -1.580912934417    1.857539785319   -1.979139538998
 H   -2.134939344417   -1.178720214681   -1.078527538998
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-009VAL-035ARG-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-009VAL-035ARG-1-dimer.npy', np.array(charges))