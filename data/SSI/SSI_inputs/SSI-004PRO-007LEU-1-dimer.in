import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C   -0.739926565052    1.134320311730    0.216403911456
 C   -1.895926565052    0.373320311730   -0.413596088544
 C   -0.600926565052    2.373320311730   -0.666596088544
 H    0.162073434948    0.529320311730    0.150403911456
 H   -0.947926565052    1.397320311730    1.254403911456
 H   -1.858926565052   -0.687679688270   -0.166596088544
 H   -2.840926565052    0.807320311730   -0.083596088544
 H   -1.286926565052    3.147320311730   -0.318596088544
 H   -1.772286565052    0.541330311730   -1.493636088544
 H   -0.933966565052    2.022190311730   -1.654419088544
 H    0.430883434948    2.754030311730   -0.687506088544
 C    1.022073434948   -2.245679688270    0.090403911456
 C    2.174073434948   -1.558679688270    0.800403911456
 H    1.318073434948   -3.241679688270   -0.230596088544
 H    0.176073434948   -2.335679688270    0.772403911456
 H    0.709073434948   -1.666679688270   -0.777596088544
 H    1.816073434948   -0.613679688270    1.204403911456
 H    2.983803434948   -1.379458688270    0.077761911456
 H    2.528713434948   -2.186056688270    1.631446911456
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-004PRO-007LEU-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-004PRO-007LEU-1-dimer.npy', np.array(charges))