import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C    1.272957756414    1.569921330711   -0.589431524949
 C    1.408957756414    0.104921330711   -0.241431524949
 O    1.246957756414   -0.777078669289   -1.081431524949
 N    1.724957756414   -0.162078669289    1.015568475051
 H    2.279957756414    1.957921330711   -0.742431524949
 H    0.828957756414    2.084921330711    0.264568475051
 H    1.929957756414   -1.110078669289    1.276568475051
 H    1.959957756414    0.596921330711    1.651568475051
 H    0.649277756414    1.757171330711   -1.475977524949
 C   -2.288042243586   -0.630078669289   -0.099431524949
 C   -3.306042243586   -0.084078669289    0.904568475051
 H   -2.717042243586   -1.465078669289   -0.657431524949
 H   -1.995042243586    0.133921330711   -0.805431524949
 H   -1.383042243586   -0.963078669289    0.410568475051
 H   -2.804042243586    0.634921330711    1.555568475051
 H   -3.710702243586   -0.907628669289    1.511208475051
 H   -4.120832243586    0.426151330711    0.369976475051
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-009GLN-068ILE-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-009GLN-068ILE-1-dimer.npy', np.array(charges))