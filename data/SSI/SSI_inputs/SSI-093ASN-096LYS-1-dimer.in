import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C    0.289271375914   -1.365793891804    2.017476446448
 C   -0.143728624086    0.060206108196    1.696476446448
 O    0.670271375914    0.979206108196    1.681476446448
 N   -1.412728624086    0.269206108196    1.404476446448
 H    1.050271375914   -1.305793891804    2.797476446448
 H    0.746271375914   -1.799793891804    1.127476446448
 H   -1.655728624086    1.247206108196    1.294476446448
 H   -2.132728624086   -0.361793891804    1.699476446448
 H   -0.535840624086   -2.002308891804    2.369667446448
 C    0.242271375914   -0.005793891804   -1.730523553552
 C   -1.059728624086   -0.176793891804   -2.516523553552
 C    1.495271375914    0.207206108196   -2.565523553552
 H    0.111271375914    0.873206108196   -1.096523553552
 H    0.390271375914   -0.872793891804   -1.084523553552
 H   -1.132728624086    0.640206108196   -3.239523553552
 H    1.744271375914   -0.728793891804   -3.066523553552
 H    1.306271375914    0.992206108196   -3.299523553552
 H   -1.921335624086   -0.119253891804   -1.835111553552
 H   -1.080022624086   -1.115369891804   -3.089815553552
 H    2.297440375914    0.524206108196   -1.882856553552
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-093ASN-096LYS-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-093ASN-096LYS-1-dimer.npy', np.array(charges))