import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
0 1 
 C    0.769237978183    0.966579616444   -1.320572690088
 C    1.157237978183   -0.207420383556   -2.204572690088
 H    1.037237978183    1.908579616444   -1.799572690088
 H   -0.305762021817    0.967579616443   -1.153572690088
 H    1.271237978183    0.890579616444   -0.354572690088
 H    0.760237978183   -0.028420383557   -3.201572690088
 H    2.249837978183   -0.318340383556   -2.267233690088
 H    0.705617978183   -1.136020383557   -1.825446690088
 C   -0.371762021817   -0.872420383557    1.772427309912
 C   -1.553762021817    0.109579616444    1.756427309912
 H   -0.349762021817   -1.448420383556    0.858427309912
 H    0.567237978183   -0.328420383556    1.869427309912
 H   -0.476762021817   -1.570420383556    2.599427309912
 H   -1.419762021817    0.762579616444    0.900427309912
 H   -2.528442021817   -0.393160383557    1.671205309912
 H   -1.522252021817    0.737719616444    2.658891309912
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-004LEU-180LEU-2-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-004LEU-180LEU-2-dimer.npy', np.array(charges))