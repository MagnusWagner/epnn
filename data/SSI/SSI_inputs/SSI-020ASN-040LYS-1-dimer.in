import numpy as np

memory 8 GB

set {
scf_type pk
basis aug-cc-pvdz
d_convergence 10
reference rhf
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}

molecule test {
1 1 
 C    2.346303795576   -0.994531310331    1.323440705010
 C    1.314303795576    0.117468689669    1.322440705010
 O    0.755303795576    0.475468689669    0.290440705010
 N    1.051303795576    0.675468689669    2.490440705010
 H    2.051303795576   -1.723531310331    2.079440705010
 H    3.310303795576   -0.578531310331    1.619440705010
 H    0.374303795576    1.420468689669    2.527440705010
 H    1.512303795576    0.347468689669    3.326440705010
 H    2.426643795576   -1.507401310331    0.353640705010
 C   -1.654696204424   -0.227531310331   -1.202559294990
 C   -2.916696204424   -0.718531310331   -1.892559294990
 N   -0.793696204424    0.557468689669   -2.119559294990
 H   -1.935696204424    0.385468689669   -0.337559294990
 H   -1.096696204424   -1.092531310331   -0.826559294990
 H   -2.669696204424   -1.250531310331   -2.813559294990
 H   -3.538696204424    0.149468689669   -2.122559294990
 H   -1.271696204424    1.386468689669   -2.469559294990
 H    0.041303795576    0.885468689669   -1.628559294990
 H   -0.464696204424    0.005468689669   -2.902559294990
 H   -3.460936204424   -1.397011310331   -1.219159294990
}

e, wfn = energy('pbe', return_wfn=True)
wfn.to_file('SSI-020ASN-040LYS-1-dimer_wfn')
oeprop(wfn, 'MULLIKEN_CHARGES')
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-020ASN-040LYS-1-dimer.npy', np.array(charges))