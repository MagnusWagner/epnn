import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C               -1.093170965799957     1.489408425448911     0.687425767684932
    C                0.258829034200043     1.593408425448911    -1.720574232315067
    S                0.457829034200043     2.081408425448911     0.005425767684932
    H               -1.185170965799957     0.418408425448911     0.539425767684932
    H               -1.083170965799956     1.721408425448911     1.743425767684933
    H               -1.938170965799957     1.984408425448911     0.211425767684932
    H                0.024829034200043     0.531408425448911    -1.773574232315067
    H                1.210829034200043     1.754408425448911    -2.221574232315068
    H               -0.528200965799957     2.155368425448911    -2.244774232315068
    C                0.876829034200043    -1.667591574551089     1.415425767684932
    C               -0.077170965799957    -1.911591574551089     0.222425767684932
    O               -1.300170965799957    -2.165591574551089     0.374425767684932
    O                0.416829034200043    -1.858591574551089    -0.922574232315068
    H                1.523829034200043    -0.830591574551089     1.149425767684932
    H                1.509829034200043    -2.546591574551089     1.556425767684932
    H                0.373559034200043    -1.441621574551089     2.367085767684932

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-081MET-134GLU-2-dimer.npy', np.array(charges))