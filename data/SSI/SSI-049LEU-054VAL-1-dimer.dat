import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.903168245508875    -1.428907997591103    -0.213234501341151
    C                2.147168245508876    -2.253907997591103    -0.522234501341151
    H                0.412168245508875    -1.149907997591103    -1.147234501341151
    H                0.206168245508875    -2.016907997591103     0.382765498658849
    H                1.185168245508875    -0.522907997591103     0.326765498658849
    H                2.655168245508876    -2.420907997591104     0.420765498658849
    H                2.829418245508875    -1.721037997591103    -1.200894501341151
    H                1.822278245508876    -3.239467997591103    -0.887094501341151
    C               -1.140831754491125     1.656092002408897    -0.272234501341151
    C               -1.902831754491125     2.032092002408897     1.002765498658849
    H               -0.094831754491125     1.960092002408897    -0.205234501341151
    H               -1.181831754491125     0.577092002408897    -0.405234501341151
    H               -1.593831754491124     2.125092002408897    -1.142234501341151
    H               -2.916831754491125     1.656092002408897     0.899765498658849
    H               -1.962215754491125     3.122922002408897     1.131435498658849
    H               -1.440280754491124     1.565932002408897     1.885225498658849

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-049LEU-054VAL-1-dimer.npy', np.array(charges))