import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                1.253123255680332    -0.967633078843685    -1.274089657458887
    C               -0.155876744319668    -1.153633078843685    -0.704089657458888
    O               -0.286876744319668    -1.552633078843685     0.476910342541112
    O               -1.132876744319668    -0.924633078843685    -1.456089657458888
    H                1.919123255680332    -0.589633078843685    -0.496089657458888
    H                1.246123255680332    -0.220633078843685    -2.069089657458887
    H                1.667155455680332    -1.909592078843685    -1.663049657458888
    C               -0.371876744319668     2.110366921156315     0.920910342541112
    C                0.684123255680332     2.406366921156315     1.982910342541113
    H                0.059123255680332     2.184366921156315    -0.078089657458888
    H               -0.762876744319668     1.105366921156315     1.069910342541113
    H               -1.195876744319668     2.816366921156315     1.010910342541112
    H                0.269123255680332     2.147366921156315     2.957910342541112
    H                0.970705255680332     3.468363921156315     1.988630342541112
    H                1.577325955680332     1.791614921156315     1.797790342541113

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-078GLU-099THR-1-dimer.npy', np.array(charges))