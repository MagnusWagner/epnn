import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.103484067704468     1.311432147596962     0.285647256571837
    C               -1.826484067704468     1.750432147596962     1.563647256571837
    H               -1.326484067704468     0.266432147596962     0.060647256571837
    H               -1.407484067704468     1.925432147596962    -0.560352743428163
    H               -0.026484067704468     1.440432147596962     0.388647256571837
    H               -1.488484067704468     2.754432147596962     1.819647256571837
    H               -1.592054067704468     1.076972147596962     2.401207256571837
    H               -2.910564067704468     1.754712147596962     1.377253256571837
    C                1.517515932295532    -0.868567852403038    -1.287352743428163
    C                1.412515932295532    -2.198567852403039    -0.558352743428163
    H                2.365515932295532    -0.882567852403038    -1.972352743428163
    H                0.603515932295532    -0.684567852403038    -1.850352743428163
    H                1.651515932295532    -0.062567852403038    -0.566352743428163
    H                0.534515932295532    -2.153567852403039     0.084647256571837
    H                2.318095932295532    -2.348657852403039     0.047775256571837
    H                1.277635932295532    -3.023717852403039    -1.273147743428163

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-030ILE-034LEU-1-dimer.npy', np.array(charges))