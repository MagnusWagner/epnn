import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.045305144804075    -0.772175276680676     1.723990596295912
    C               -1.216305144804075    -0.875175276680676     0.209990596295912
    O               -0.439305144804075    -1.535175276680676    -0.475009403704088
    N               -2.262305144804075    -0.231175276680676    -0.325009403704088
    H               -1.865305144804074    -1.306175276680676     2.196990596295912
    H               -1.145305144804075     0.281824723319324     1.972990596295912
    H               -2.361305144804075    -0.259175276680676    -1.327009403704088
    H               -2.881305144804075     0.319824723319324     0.264990596295912
    H               -0.086385144804075    -1.160065276680676     2.098180596295912
    C                1.896694855195925     1.198824723319324    -0.330009403704088
    C                3.046694855195925     2.105824723319324    -0.762009403704088
    H                2.188694855195926     0.153824723319324    -0.420009403704088
    H                1.651694855195925     1.404824723319325     0.708990596295912
    H                1.014694855195925     1.384824723319324    -0.943009403704087
    H                3.946694855195926     1.796824723319324    -0.240009403704088
    H                2.800694855195925     3.115824723319325    -0.433009403704088
    H                3.210994855195925     2.110844723319324    -1.849659403704087

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-025GLN-274ILE-1-dimer.npy', np.array(charges))