import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.190336369812620    -0.927057406576426    -1.710414105517126
    C                1.042663630187380    -0.255057406576427    -2.319414105517127
    H               -0.614336369812620    -1.650057406576427    -2.409414105517126
    H                0.093663630187380    -1.451057406576427    -0.799414105517127
    H               -0.949336369812619    -0.190057406576427    -1.442414105517127
    H                1.376663630187381     0.538942593423574    -1.652414105517127
    H                0.794753630187380     0.166675593423573    -3.304646105517126
    H                1.849993630187380    -0.996243406576427    -2.413590105517126
    C                0.185663630187380     0.573942593423573     1.555585894482874
    C               -1.038336369812620     0.607942593423574     2.472585894482874
    H                0.399663630187380    -0.450057406576427     1.251585894482873
    H               -0.003336369812620     1.183942593423573     0.670585894482873
    H                1.059663630187381     0.984942593423573     2.057585894482874
    H               -1.152336369812620     1.619942593423573     2.862585894482873
    H               -0.914936369812619    -0.099642406576427     3.305705894482874
    H               -1.936006369812619     0.345403593423573     1.893565894482873

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-122VAL-143VAL-1-dimer.npy', np.array(charges))