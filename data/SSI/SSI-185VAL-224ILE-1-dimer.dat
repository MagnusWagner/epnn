import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.796163121315959    -0.227321350825636     0.088150926512078
    C               -3.060163121315959     0.203678649174364     0.862150926512078
    H               -0.934163121315959    -0.186321350825636     0.750150926512078
    H               -1.911163121315959    -1.258321350825636    -0.240849073487922
    H               -1.630163121315959     0.414678649174364    -0.777849073487922
    H               -3.219163121315959    -0.443321350825636     1.723150926512079
    H               -2.936839121315959     1.247348649174364     1.187020926512079
    H               -3.899301121315959     0.105288649174364     0.157760926512078
    C                1.796836878684041    -0.328321350825636    -0.199849073487922
    C                3.061836878684041     0.360678649174364    -0.747849073487922
    H                1.714836878684041    -1.350321350825636    -0.575849073487922
    H                1.809836878684041    -0.349321350825636     0.887150926512078
    H                0.909836878684041     0.232678649174364    -0.480849073487922
    H                3.113836878684041     1.396678649174363    -0.416849073487922
    H                3.020996878684041     0.299418649174364    -1.845382073487921
    H                3.933496878684041    -0.212248350825636    -0.398609073487922

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-185VAL-224ILE-1-dimer.npy', np.array(charges))