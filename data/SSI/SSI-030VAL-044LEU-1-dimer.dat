import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.229768668815178    -0.904936049923837     0.680546733381474
    C                1.742768668815178    -0.443936049923837     2.041546733381474
    H                1.119768668815178    -1.987936049923837     0.650546733381474
    H                0.250768668815178    -0.463936049923837     0.519546733381474
    H                1.910768668815178    -0.586936049923837    -0.109453266618526
    H                1.045768668815178    -0.782936049923837     2.808546733381474
    H                2.737248668815178    -0.870966049923837     2.238139033381474
    H                1.794188668815178     0.654703950076163     2.060376333381474
    C               -1.636231331184822    -0.029936049923837    -1.618453266618526
    C               -1.335231331184822     1.380063950076163    -1.106453266618526
    H               -1.817231331184822     0.004063950076163    -2.692453266618526
    H               -0.788231331184822    -0.681936049923837    -1.432453266618526
    H               -2.502231331184822    -0.450936049923837    -1.113453266618526
    H               -1.212231331184822     1.337063950076163    -0.025453266618526
    H               -2.163561331184822     2.062813950076163    -1.346705266618526
    H               -0.387821331184822     1.751983950076163    -1.523689266618526

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-030VAL-044LEU-1-dimer.npy', np.array(charges))