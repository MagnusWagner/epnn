import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.184707320623902    -1.127766207495824     1.229451303234484
    C                0.979707320623902    -0.244766207495824     2.442451303234484
    H                0.903707320623902    -2.156766207495824     1.448451303234484
    H                0.576707320623902    -0.781766207495824     0.405451303234484
    H                2.223707320623902    -1.088766207495824     0.905451303234484
    H                1.289707320623902     0.775233792504176     2.232451303234484
    H                1.641797320623902    -0.712166427495824     3.186211303234484
    H               -0.087082679376098    -0.273676407495824     2.709151303234484
    C               -1.188292679376098     0.561233792504176    -1.097548696765516
    C               -0.981292679376098     0.819233792504176    -2.572548696765516
    H               -0.345292679376098     0.959233792504176    -0.533548696765516
    H               -2.084292679376098     1.084233792504176    -0.765548696765516
    H               -1.321292679376098    -0.502766207495824    -0.899548696765516
    H               -0.785292679376098     1.878233792504176    -2.731548696765516
    H               -0.092792679376098     0.220180992504176    -2.820958696765516
    H               -1.858013679376098     0.504308792504176    -3.157508696765516

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-163LEU-175LEU-1-dimer.npy', np.array(charges))