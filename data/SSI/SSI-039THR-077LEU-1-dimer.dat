import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.016414731316350     1.784551592842147     0.759482991965785
    C                1.360585268683650     2.444551592842148     1.097482991965785
    H               -0.117414731316350     1.671551592842147    -0.321517008034215
    H               -0.082414731316350     0.799551592842147     1.224482991965785
    H               -0.832414731316350     2.398551592842147     1.142482991965785
    H                1.368585268683650     2.745551592842147     2.145482991965785
    H                1.525601068683650     3.319131592842147     0.451051991965785
    H                2.159004268683650     1.710041592842147     0.915778991965785
    C               -1.038414731316350    -1.455448407157853    -0.978517008034215
    C               -0.303414731316350    -2.771448407157853    -0.873517008034215
    H               -0.335414731316350    -0.633448407157853    -0.859517008034215
    H               -1.509414731316350    -1.360448407157853    -1.951517008034215
    H               -1.801414731316350    -1.400448407157853    -0.200517008034215
    H               -1.041414731316350    -3.572448407157853    -0.868517008034215
    H                0.316041668683650    -2.818548407157853     0.034257991965785
    H                0.322796068683650    -2.885308407157853    -1.770677008034215

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-039THR-077LEU-1-dimer.npy', np.array(charges))