import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C               -1.871684801337155    -0.355891102326987     0.731778531698821
    C               -1.930684801337155    -1.866891102326987     0.739778531698821
    O               -1.836684801337155     0.144108897673013    -0.595221468301179
    H               -2.755684801337155     0.037108897673013     1.236778531698821
    H               -0.986684801337155    -0.020891102326987     1.274778531698821
    H               -2.058684801337155    -2.171891102326987     1.780778531698821
    H               -0.952684801337155     0.574108897673013    -0.695221468301179
    H               -0.999584801337155    -2.310524102326987     0.357362531698821
    H               -2.814034801337155    -2.221502102326987     0.188474531698821
    C                2.396315198662844     1.044108897673013     0.698778531698821
    C                1.410315198662845     0.479108897673013    -0.272221468301179
    O                1.476315198662845    -0.728891102326987    -0.523221468301179
    O                0.531315198662845     1.268108897673013    -0.756221468301179
    H                1.919315198662845     0.987108897673013     1.679778531698821
    H                2.537315198662845     2.111108897673013     0.528778531698821
    H                3.346965198662844     0.500075897673013     0.800256531698821

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-053SER-089GLU-1-dimer.npy', np.array(charges))