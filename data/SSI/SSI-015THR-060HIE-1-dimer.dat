import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -2.229137087619811     1.657163916331089     2.298933903167968
    O               -2.224137087619810     0.708163916331089     1.234933903167968
    H               -1.311137087619811     0.633163916331089     0.897933903167968
    H               -1.243137087619811     1.673163916331089     2.767933903167968
    H               -2.459727087619811     2.662803916331089     1.917460903167968
    H               -2.965877087619810     1.353803916331089     3.057342903167968
    C               -0.803137087619811    -0.255836083668911    -2.127066096832032
    C                0.359862912380189    -0.387836083668911    -1.190066096832032
    C                1.468862912380189    -0.240836083668911     0.704933903167968
    C                1.560862912380189    -0.999836083668911    -1.361066096832032
    N                0.324862912380189     0.081163916331089     0.107933903167968
    N                2.234862912380189    -0.894836083668911    -0.163066096832032
    H                1.729862912380189    -0.012836083668911     1.731933903167968
    H               -1.686137087619811     0.011163916331089    -1.552066096832032
    H               -0.975137087619811    -1.246836083668911    -2.551066096832033
    H                3.155862912380189    -1.270836083668911     0.037933903167968
    H                1.902862912380189    -1.498836083668911    -2.259066096832032
    H               -0.668977087619811     0.466613916331089    -2.945646096832032

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-015THR-060HIE-1-dimer.npy', np.array(charges))