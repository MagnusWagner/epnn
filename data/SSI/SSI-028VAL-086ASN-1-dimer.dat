import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.960485358944270     0.113526045704495    -1.940590252638230
    C                0.766485358944270     0.116526045704495    -3.453590252638230
    H                1.990485358944270     0.371526045704495    -1.697590252638230
    H                0.305485358944270     0.858526045704495    -1.490590252638230
    H                0.739485358944270    -0.873473954295505    -1.535590252638230
    H                0.995485358944270     1.128526045704495    -3.775590252638231
    H               -0.265864641055730    -0.138181954295505    -3.735334252638230
    H                1.479295358944271    -0.570377954295505    -3.933239252638230
    C               -0.685514641055730     0.773526045704495     2.543409747361769
    C               -0.375514641055730    -0.106473954295505     1.339409747361770
    O                0.692485358944270    -0.710473954295505     1.226409747361769
    N               -1.325514641055729    -0.185473954295505     0.427409747361770
    H               -0.710514641055730     0.130526045704495     3.423409747361769
    H               -1.686514641055729     1.191526045704494     2.449409747361770
    H               -1.203514641055730    -0.809473954295506    -0.363590252638230
    H               -2.195514641055730     0.304526045704495     0.554409747361770
    H                0.049355358944270     1.577463045704494     2.697218747361770

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-028VAL-086ASN-1-dimer.npy', np.array(charges))