import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.400339499593419     0.051287915399611    -1.607165540465107
    C               -0.628339499593419     1.447287915399611    -2.213165540465106
    O               -1.378339499593419    -0.239712084600389    -0.620165540465107
    H               -0.431339499593419    -0.700712084600389    -2.394165540465107
    H                0.580660500406581     0.008287915399611    -1.137165540465107
    H               -0.639339499593419     2.158287915399611    -1.387165540465107
    H               -2.251339499593419    -0.280712084600389    -1.059165540465107
    H               -1.588329499593419     1.480599915399611    -2.749165540465107
    H                0.204510500406581     1.744422915399611    -2.867465540465107
    C                1.358660500406581    -1.066712084600389     1.625834459534893
    C                1.200660500406581    -0.168712084600389     2.859834459534894
    H                1.942660500406581    -0.561712084600389     0.855834459534893
    H                1.884660500406581    -1.976712084600389     1.914834459534893
    H                0.380660500406581    -1.340712084600388     1.226834459534893
    H                2.197660500406581     0.046287915399611     3.241834459534894
    H                0.715080500406581     0.788337915399611     2.618434459534893
    H                0.654610500406581    -0.694561084600389     3.656934459534894

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-100SER-131VAL-2-dimer.npy', np.array(charges))