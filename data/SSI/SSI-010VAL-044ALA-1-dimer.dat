import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.033651448800170    -1.675753431807309    -0.355618533873667
    C               -2.518651448800170    -1.299753431807308    -0.391618533873667
    H               -0.481651448800170    -1.110753431807308    -1.104618533873667
    H               -0.624651448800170    -1.443753431807309     0.628381466126333
    H               -0.881651448800170    -2.739753431807309    -0.524618533873667
    H               -3.034651448800170    -1.952753431807308     0.308381466126333
    H               -2.969801448800170    -1.439933431807308    -1.384998533873667
    H               -2.640075448800169    -0.258253431807308    -0.059148533873667
    C                1.121348551199830     1.106246568192691     0.297381466126333
    C                2.426348551199830     1.877246568192692     0.444381466126333
    H                0.279348551199830     1.788246568192692     0.194381466126333
    H                1.175348551199830     0.479246568192692    -0.592618533873667
    H                0.965348551199830     0.471246568192692     1.170381466126333
    H                3.239348551199830     1.150246568192692     0.492381466126333
    H                2.423328351199830     2.457116568192692     1.379122466126333
    H                2.604600551199830     2.504006568192692    -0.441847533873667

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-010VAL-044ALA-1-dimer.npy', np.array(charges))