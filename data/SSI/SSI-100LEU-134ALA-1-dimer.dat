import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.560761015567023    -1.167263598510013     0.814073129002461
    C                1.793761015567023    -2.388263598510013    -0.068926870997539
    H                1.524761015567023    -1.469263598510013     1.862073129002461
    H                2.365761015567024    -0.444263598510013     0.672073129002461
    H                0.611761015567023    -0.706263598510013     0.553073129002461
    H                2.759761015567023    -2.820263598510013     0.181073129002461
    H                1.001811015567023    -3.125179598510013     0.130493129002461
    H                1.810271015567023    -2.096741598510013    -1.129466870997539
    C               -1.160238984432977     1.212736401489987    -0.382926870997539
    C               -2.195238984432976     2.340736401489987    -0.364926870997539
    H               -0.463238984432977     1.349736401489987    -1.209926870997539
    H               -0.606238984432977     1.214736401489987     0.557073129002461
    H               -1.659238984432977     0.247736401489987    -0.493926870997539
    H               -2.917238984432976     2.158736401489987     0.435073129002461
    H               -2.709258984432977     2.404420401489987    -1.335356870997539
    H               -1.707528984432977     3.311070901489987    -0.190016870997539

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-100LEU-134ALA-1-dimer.npy', np.array(charges))