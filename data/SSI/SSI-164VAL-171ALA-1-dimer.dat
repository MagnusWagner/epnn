import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.871216335651095     0.491604462204967    -1.149026772002792
    C                1.351216335651095    -0.760395537795033    -1.861026772002792
    H                2.959216335651095     0.531604462204967    -1.193026772002792
    H                1.467216335651095     1.375604462204967    -1.642026772002792
    H                1.550216335651095     0.490604462204967    -0.107026772002792
    H                0.263216335651095    -0.717395537795033    -1.817026772002792
    H                1.664356335651095    -1.670644537795033    -1.328686772002792
    H                1.633556335651095    -0.770479537795033    -2.924126772002792
    C               -1.384783664348905    -0.133395537795033     0.824973227997208
    C               -1.833783664348905     0.395604462204967     2.182973227997208
    H               -2.096783664348905    -0.869395537795033     0.449973227997208
    H               -1.316783664348905     0.690604462204967     0.114973227997208
    H               -0.404783664348905    -0.601395537795033     0.917973227997208
    H               -1.132783664348905     1.176604462204967     2.485973227997207
    H               -1.799083664348905    -0.409233537795033     2.931993227997208
    H               -2.833583664348906     0.851894462204967     2.136123227997208

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-164VAL-171ALA-1-dimer.npy', np.array(charges))