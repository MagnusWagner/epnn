import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.807594403511795    -0.805284406828942    -0.980240211577256
    C                1.298594403511795     0.374715593171058    -1.797240211577257
    H                1.835594403511795    -0.567284406828942     0.077759788422744
    H                1.114594403511795    -1.641284406828942    -1.082240211577256
    H                2.787594403511795    -1.135284406828942    -1.328240211577256
    H                0.553594403511795     0.922715593171058    -1.223240211577256
    H                2.124444403511795     1.056217593171058    -2.049300211577256
    H                0.814854403511795     0.027435893171058    -2.722120211577256
    C               -1.498405596488205    -0.378284406828942     0.916759788422744
    C               -1.601405596488205     0.818715593171058     1.858759788422744
    H               -0.752405596488205    -0.202284406828942     0.149759788422744
    H               -1.207405596488205    -1.262284406828942     1.486759788422744
    H               -2.460405596488205    -0.601284406828942     0.454759788422744
    H               -2.471405596488205     0.666715593171058     2.486759788422743
    H               -1.710215596488205     1.747140593171058     1.278939788422744
    H               -0.704775596488205     0.872051593171058     2.493749788422743

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-065LEU-077VAL-1-dimer.npy', np.array(charges))