import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                0.326252990701172     0.986431340092475    -0.831166179434740
    C               -0.933747009298828     1.684431340092475    -0.325166179434740
    C                1.461252990701171     0.986431340092475     0.187833820565260
    O                1.192252990701171     0.812431340092475     1.399833820565261
    O                2.630252990701171     1.137431340092475    -0.231166179434740
    H                0.072252990701172    -0.047568659907525    -1.073166179434740
    H                0.658252990701172     1.459431340092475    -1.755166179434740
    H               -1.275747009298828     1.183431340092475     0.580833820565260
    H               -1.719747009298829     1.568431340092475    -1.063166179434739
    H               -0.818037009298828     2.758841340092475    -0.119626179434740
    C               -1.713747009298829    -2.257568659907525    -0.337166179434740
    C               -2.831747009298828    -3.207568659907525     0.097833820565260
    H               -0.978747009298828    -2.755568659907524    -0.959166179434740
    H               -2.138747009298829    -1.427568659907525    -0.901166179434740
    H               -1.204747009298829    -1.860568659907525     0.541833820565260
    H               -3.391747009298828    -3.505568659907525    -0.785166179434740
    H               -2.400777009298829    -4.100288659907525     0.574613820565260
    H               -3.511297009298829    -2.693058659907525     0.793173820565260

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-036GLU-053VAL-1-dimer.npy', np.array(charges))