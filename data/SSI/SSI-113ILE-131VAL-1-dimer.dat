import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.008102554164688     1.297027021720561     1.071789472804945
    C                1.065102554164688     2.821027021720561     1.241789472804945
    H                1.289102554164688     1.018027021720561     0.058789472804945
    H                1.703102554164688     0.803027021720561     1.751789472804945
    H               -0.002897445835312     0.933027021720561     1.267789472804945
    H                2.093102554164688     3.155027021720561     1.086789472804945
    H                0.753178154164688     3.086449021720561     2.262699472804945
    H                0.424774554164688     3.326398021720562     0.503829472804945
    C               -0.791897445835312    -1.344972978279439    -1.033210527195055
    C               -1.288897445835312    -2.770972978279439    -1.282210527195055
    H                0.285102554164688    -1.360972978279439    -0.866210527195055
    H               -0.999897445835312    -0.730972978279439    -1.909210527195055
    H               -1.267897445835312    -0.903972978279439    -0.158210527195055
    H               -0.977897445835312    -3.386972978279439    -0.437210527195055
    H               -2.386847445835312    -2.785232068279439    -1.347800527195055
    H               -0.822555445835312    -3.178931778279439    -2.191110527195055

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-113ILE-131VAL-1-dimer.npy', np.array(charges))