import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.387653804881753    -0.648871932139300    -0.151487318373775
    C                2.768653804881753    -1.341871932139300    -0.076487318373775
    H                1.359653804881752     0.214128067860700     0.514512681626225
    H                1.203653804881753    -0.298871932139300    -1.169487318373775
    H                0.600653804881753    -1.344871932139300     0.135512681626225
    H                3.537653804881753    -0.599871932139300    -0.286487318373775
    H                2.930613804881752    -1.761701932139300     0.927261681626225
    H                2.842353804881753    -2.131771932139300    -0.838480318373775
    C               -1.877346195118248     1.130128067860700     0.850512681626225
    C               -2.284346195118248     0.863128067860700    -0.621487318373775
    H               -2.400346195118247     2.009128067860700     1.224512681626225
    H               -2.133346195118247     0.265128067860700     1.464512681626225
    H               -0.802346195118247     1.303128067860700     0.912512681626225
    H               -1.722346195118247    -0.005871932139300    -0.969487318373775
    H               -2.001716195118247     1.723098067860700    -1.246441318373775
    H               -3.350366195118247     0.598438067860700    -0.680952318373775

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-053VAL-074ALA-1-dimer.npy', np.array(charges))