import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.150302224387669     1.293004695834473    -0.770773029232902
    C               -1.291302224387669     0.292004695834472    -1.921773029232902
    H               -1.817302224387669     2.138004695834473    -0.934773029232902
    H               -1.423302224387669     0.810004695834473     0.168226970767098
    H               -0.123302224387669     1.645004695834473    -0.677773029232902
    H               -0.565302224387669    -0.495995304165528    -1.763773029232902
    H               -1.113282224387669     0.773164695834473    -2.894808029232902
    H               -2.290829224387670    -0.166984304165528    -1.905174029232902
    C                1.642697775612331    -0.771995304165528     0.717226970767098
    C                0.798697775612331    -0.812995304165527     1.974226970767098
    H                2.191697775612330    -1.706995304165527     0.599226970767098
    H                1.009697775612331    -0.625995304165528    -0.153773029232902
    H                2.348697775612330     0.056004695834472     0.775226970767098
    H                0.275697775612331     0.138004695834472     2.063226970767098
    H                1.457429775612331    -0.947328304165527     2.844876970767098
    H                0.052586775612331    -1.617113304165527     1.892292970767098

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-031VAL-068LEU-1-dimer.npy', np.array(charges))