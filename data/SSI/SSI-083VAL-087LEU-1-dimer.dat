import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.600072676189851    -1.436134747464165     0.585627943915062
    C                0.155072676189851    -2.892134747464165     0.560627943915062
    H               -0.244927323810149    -0.781134747464165     0.797627943915062
    H                1.344072676189851    -1.329134747464165     1.365627943915062
    H                1.086072676189851    -1.139134747464165    -0.343372056084938
    H                1.006072676189851    -3.510134747464165     0.283627943915062
    H               -0.636661323810149    -3.039814747464165    -0.188602056084938
    H               -0.196920323810149    -3.215454747464165     1.551368943915062
    C                0.268072676189851     2.267865252535835    -0.189372056084938
    C               -1.025927323810149     2.067865252535835    -0.962372056084938
    H                0.617072676189851     3.295865252535835    -0.286372056084938
    H                0.060072676189851     2.038865252535835     0.847627943915062
    H                1.031072676189851     1.581865252535835    -0.558372056084938
    H               -1.380927323810149     1.058865252535835    -0.756372056084938
    H               -0.863973323810149     2.176555252535835    -2.044942036084938
    H               -1.788767323810149     2.773955252535835    -0.602501056084938

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-083VAL-087LEU-1-dimer.npy', np.array(charges))