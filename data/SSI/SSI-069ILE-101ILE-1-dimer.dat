import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.246247779034194    -0.763618307701392    -1.616563150354207
    C                1.182247779034194    -0.484618307701392    -2.761563150354207
    H                0.548247779034194    -0.183618307701392    -0.755563150354207
    H               -0.754752220965806    -0.454618307701392    -1.896563150354207
    H                0.248247779034194    -1.826618307701392    -1.373563150354207
    H                1.107247779034194     0.570381692298608    -3.032563150354207
    H                0.821247779034194    -1.071618307701392    -3.605563150354206
    H                2.230707779034194    -0.732162307701392    -2.539203150354207
    C               -0.629752220965806     0.749381692298608     1.444436849645793
    C               -0.783752220965806     0.490381692298608     2.936436849645793
    H               -0.804752220965806    -0.183618307701392     0.914436849645793
    H               -1.385752220965806     1.468381692298608     1.126436849645793
    H                0.364247779034194     1.143381692298608     1.227436849645793
    H               -1.710752220965806    -0.061618307701392     3.104436849645793
    H               -0.899752220965806     1.472381692298608     3.390436849645793
    H                0.057317779034194    -0.039765307701392     3.407121849645793

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-069ILE-101ILE-1-dimer.npy', np.array(charges))