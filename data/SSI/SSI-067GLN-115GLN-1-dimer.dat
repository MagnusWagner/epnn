import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.282659195454942    -2.334791920005526    -1.502845195962776
    C               -0.953659195454942    -2.511791920005526    -0.035845195962776
    O               -1.000659195454942    -3.616791920005526     0.502154804037224
    N               -0.605659195454942    -1.425791920005526     0.634154804037224
    H               -0.408659195454942    -1.523791920005526     1.618154804037224
    H               -0.501659195454942    -0.521791920005526     0.193154804037224
    H               -0.507659195454942    -1.723791920005526    -1.962845195962776
    H               -2.228659195454942    -1.801791920005526    -1.566845195962776
    H               -1.362652195454942    -3.298301920005526    -2.027481195962776
    C                0.150340804545058     3.013208079994474    -0.982845195962776
    C                0.967340804545058     2.385208079994474     0.126154804037224
    O                0.820340804545058     1.201208079994474     0.421154804037224
    N                1.827340804545058     3.169208079994474     0.760154804037224
    H                0.551340804545058     2.677208079994474    -1.939845195962776
    H                0.245340804545058     4.099208079994474    -0.935845195962776
    H                2.361340804545058     2.764208079994474     1.521154804037224
    H                1.968340804545058     4.141208079994474     0.507154804037224
    H               -0.910346195454942     2.730498079994474    -0.911988195962776

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-067GLN-115GLN-1-dimer.npy', np.array(charges))