import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                2.012871854499472     0.752449539917383    -0.651290868372647
    C                0.868871854499472     1.498449539917383    -1.374290868372646
    H                2.055871854499472     1.061449539917383     0.394709131627353
    H                1.850871854499472    -0.324550460082617    -0.691290868372647
    H                2.964871854499473     0.988449539917383    -1.126290868372647
    H               -0.002128145500528     1.463449539917383    -0.731290868372647
    H                1.157141854499472     2.550271739917384    -1.517721168372647
    H                0.625581854499472     1.004682939917383    -2.326657868372647
    C               -0.722128145500528    -1.129550460082617     1.333709131627353
    C               -2.154128145500528    -1.128550460082617     0.690709131627353
    H               -0.402128145500528    -2.152550460082616     1.529709131627353
    H               -0.016128145500528    -0.673550460082617     0.643709131627353
    H               -0.727128145500528    -0.562550460082617     2.264709131627353
    H               -2.138128145500528    -1.708550460082617    -0.230290868372647
    H               -2.983308145500528    -1.469637460082617     1.327983131627353
    H               -2.450728145500527    -0.091162460082617     0.476576131627353

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-041VAL-059LEU-1-dimer.npy', np.array(charges))