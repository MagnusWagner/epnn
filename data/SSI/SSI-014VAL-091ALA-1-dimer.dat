import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.539069809312775    -1.046607014245401    -0.323268456072531
    C                3.003069809312775    -1.033607014245401    -0.824268456072531
    H                1.238069809312775    -2.070607014245401    -0.098268456072531
    H                1.455069809312775    -0.445607014245401     0.580731543927469
    H                0.876069809312775    -0.640607014245401    -1.088268456072531
    H                3.302069809312775    -0.006607014245401    -1.052268456072531
    H                3.052439809312775    -1.645677014245401    -1.736918456072531
    H                3.633419809312775    -1.511827014245401    -0.060098456072531
    C               -1.799930190687225     0.445392985754599     0.457731543927469
    C               -2.732930190687225     1.640392985754599     0.692731543927469
    H               -1.365930190687225     0.124392985754599     1.405731543927469
    H               -2.368930190687225    -0.380607014245401     0.024731543927469
    H               -1.004930190687225     0.732392985754599    -0.229268456072531
    H               -3.165930190687225     1.937392985754599    -0.263268456072531
    H               -2.204347190687225     2.501872985754598     1.126841543927469
    H               -3.557557190687225     1.339142985754599     1.355481543927469

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-014VAL-091ALA-1-dimer.npy', np.array(charges))