import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.799693764509042    -0.087519638650598    -0.980838198301956
    C               -1.769693764509042    -1.597519638650598    -0.768838198301956
    H               -1.901693764509042     0.148480361349402    -2.041838198301956
    H               -2.640693764509042     0.340480361349402    -0.435838198301956
    H               -0.877693764509042     0.356480361349402    -0.609838198301956
    H               -1.645693764509042    -1.774519638650598     0.300161801698044
    H               -0.942553764509042    -2.047659638650598    -1.337338198301956
    H               -2.714773764509042    -2.061007638650598    -1.088238198301956
    C                1.689306235490958     0.111480361349402     0.686161801698044
    C                1.881306235490958     1.573480361349402     1.057161801698044
    H                1.561306235490958     0.004480361349402    -0.392838198301956
    H                2.551306235490958    -0.472519638650598     1.012161801698044
    H                0.804306235490958    -0.276519638650598     1.189161801698044
    H                2.089306235490958     1.602480361349402     2.122161801698044
    H                0.975566235490958     2.160257361349402     0.844261801698044
    H                2.726726235490958     2.020502361349402     0.513661801698044

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-081ALA-088ALA-1-dimer.npy', np.array(charges))