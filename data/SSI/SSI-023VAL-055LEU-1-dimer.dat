import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.164699770873922     1.284205657437850    -0.742394519116071
    C               -0.049300229126078     2.273205657437850    -1.874394519116071
    H               -0.764300229126078     0.750205657437850    -0.538394519116071
    H                0.934699770873922     0.564205657437849    -1.015394519116071
    H                0.491699770873922     1.799205657437849     0.160605480883929
    H                0.866699770873922     2.829205657437849    -1.996394519116071
    H               -0.846201229126078     3.001903657437850    -1.664759519116071
    H               -0.232087229126078     1.729160657437850    -2.812799519116071
    C                0.618699770873922    -1.854794342562151     0.962605480883929
    C               -0.740300229126078    -1.708794342562151     1.663605480883929
    H                1.051699770873922    -2.829794342562150     1.161605480883929
    H                0.476699770873922    -1.760794342562151    -0.114394519116071
    H                1.307699770873921    -1.078794342562150     1.290605480883929
    H               -1.206300229126079    -0.808794342562151     1.262605480883929
    H               -0.614837229126078    -1.564691342562151     2.746884480883929
    H               -1.391639229126079    -2.557465342562151     1.407645480883929

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-023VAL-055LEU-1-dimer.npy', np.array(charges))