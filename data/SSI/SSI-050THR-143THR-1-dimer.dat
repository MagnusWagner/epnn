import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.727200145578644     1.149229997669219     1.025818073297074
    C               -1.093200145578644     1.969229997669219     2.254818073297074
    H               -1.127200145578644     0.137229997669219     1.110818073297074
    H               -1.141200145578644     1.621229997669219     0.132818073297074
    H                0.355799854421356     1.109229997669219     0.912818073297074
    H               -0.610200145578644     2.946229997669219     2.196818073297074
    H               -0.771850145578644     1.447209997669219     3.168178073297075
    H               -2.183710145578643     2.112979997669219     2.265638073297074
    C                0.470799854421356    -1.156770002330781    -1.166181926702926
    C                1.353799854421357    -1.965770002330781    -2.108181926702926
    H                1.081799854421356    -0.692770002330781    -0.392181926702926
    H               -0.043200145578644    -0.375770002330781    -1.727181926702926
    H               -0.294200145578643    -1.786770002330781    -0.715181926702926
    H                0.719799854421357    -2.575770002330781    -2.754181926702926
    H                2.029029854421357    -2.617320002330781    -1.534121926702926
    H                1.935129854421357    -1.277130002330781    -2.738921926702926

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-050THR-143THR-1-dimer.npy', np.array(charges))