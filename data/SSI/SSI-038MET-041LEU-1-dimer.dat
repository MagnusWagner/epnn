import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.027087699470040     0.489419531232065     1.298503358880015
    C               -1.563087699470040    -1.838580468767935     1.551503358880015
    S                0.124912300529960    -1.301580468767935     1.132503358880016
    H               -0.417087699470040     0.739419531232065     2.285503358880015
    H                0.951912300529960     0.951419531232065     1.174503358880015
    H               -0.700087699470040     0.885419531232065     0.543503358880016
    H               -2.015087699470040    -1.092580468767935     2.199503358880015
    H               -1.481087699470040    -2.764580468767935     2.119503358880015
    H               -2.215777699470040    -2.042500468767935     0.689873358880015
    C                1.027912300529960     2.009419531232065    -1.959496641119985
    C                0.371912300529960     2.058419531232065    -3.332496641119985
    H                2.049912300529960     1.642419531232065    -2.047496641119985
    H                1.043912300529960     3.011419531232065    -1.535496641119985
    H                0.460912300529960     1.351419531232065    -1.307496641119985
    H               -0.620087699470040     2.489419531232065    -3.206496641119985
    H                0.300722300529960     1.044529531232065    -3.753156641119985
    H                0.945622300529960     2.704479531232065    -4.013276641119985

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-038MET-041LEU-1-dimer.npy', np.array(charges))