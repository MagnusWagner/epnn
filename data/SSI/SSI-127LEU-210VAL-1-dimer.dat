import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.136619277536812    -0.961095612481058    -1.439229883146506
    C               -1.992619277536811    -1.947095612481058    -0.696229883146506
    H               -0.134619277536812    -1.367095612481058    -1.585229883146507
    H               -1.571619277536811    -0.751095612481058    -2.416229883146506
    H               -1.070619277536812    -0.030095612481058    -0.876229883146507
    H               -2.064619277536812    -2.839095612481058    -1.317229883146506
    H               -1.522229277536812    -2.208423612481058     0.263170116853494
    H               -3.005249277536812    -1.542331612481058    -0.552189883146507
    C                1.319380722463189     0.841904387518942     0.727770116853493
    C                1.802380722463188     2.076904387518942     1.410770116853494
    H                0.898380722463188     1.072904387518942    -0.247229883146507
    H                2.140380722463189     0.135904387518942     0.600770116853493
    H                0.554380722463188     0.365904387518942     1.339770116853493
    H                2.330380722463189     1.765904387518942     2.314770116853494
    H                0.992650722463189     2.756394387518942     1.715130116853494
    H                2.541810722463188     2.514704387518942     0.724050116853494

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-127LEU-210VAL-1-dimer.npy', np.array(charges))