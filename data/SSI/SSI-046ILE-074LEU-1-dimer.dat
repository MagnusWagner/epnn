import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.962507105556819     0.594744203972678     0.480583955280094
    C               -0.952507105556819     1.250744203972678     1.812583955280094
    H               -0.271507105556819     1.218744203972678    -0.074416044719906
    H               -0.612507105556819    -0.390255796027322     0.781583955280094
    H               -1.962507105556819     0.557744203972678     0.051583955280094
    H                0.080492894443181     1.388744203972678     2.138583955280094
    H               -1.436507105556819     0.567744203972678     2.513583955280093
    H               -1.479476105556819     2.216134203972678     1.830581955280093
    C                0.252492894443181    -0.757255796027322    -1.405416044719906
    C                1.658492894443181    -1.074255796027322    -0.881416044719906
    H                0.236492894443181    -1.214255796027322    -2.397416044719907
    H               -0.554507105556819    -1.338255796027322    -0.957416044719906
    H                0.100492894443181     0.268744203972678    -1.723416044719907
    H                1.712492894443181    -0.772255796027322     0.160583955280094
    H                2.410682894443181    -0.509575796027322    -1.451817044719907
    H                1.824322894443181    -2.159675796027322    -0.947460044719906

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-046ILE-074LEU-1-dimer.npy', np.array(charges))