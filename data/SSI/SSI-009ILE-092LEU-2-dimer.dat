import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.773548443265925     0.225229028301859     0.149505715982404
    C                2.397548443265925     1.629229028301859     0.099505715982405
    H                2.556548443265925    -0.532770971698141     0.177505715982404
    H                1.133548443265925     0.102229028301859     1.021505715982405
    H                1.145548443265925     0.055229028301859    -0.724494284017595
    H                1.588548443265925     2.343229028301859    -0.072494284017595
    H                3.103748443265925     1.712309028301859    -0.739767284017596
    H                2.877278443265925     1.891689028301859     1.053954715982405
    C               -1.589451556734075    -1.512770971698141    -0.135494284017596
    C               -2.572451556734075    -0.338770971698141    -0.114494284017595
    H               -0.769451556734075    -1.304770971698141    -0.821494284017595
    H               -1.193451556734075    -1.675770971698141     0.867505715982405
    H               -2.110451556734075    -2.416770971698141    -0.455494284017596
    H               -3.402451556734075    -0.614770971698141     0.534505715982405
    H               -2.941361556734075    -0.155030971698141    -1.134371284017596
    H               -2.097521556734075     0.560479028301859     0.304772715982405

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-009ILE-092LEU-2-dimer.npy', np.array(charges))