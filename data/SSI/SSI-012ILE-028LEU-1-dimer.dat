import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.824634784347049     0.565880035326915     0.060475301834746
    C               -2.176634784347049     1.613880035326915    -0.938524698165254
    H               -1.028634784347049    -0.095119964673085    -0.252524698165254
    H               -1.512634784347049     1.051880035326915     0.982475301834746
    H               -2.703634784347049     0.010880035326915     0.299475301834746
    H               -1.322634784347049     2.272880035326915    -0.993524698165254
    H               -3.034634784347049     2.183880035326915    -0.576524698165254
    H               -2.416554784347049     1.155070035326915    -1.909054698165254
    C                1.689365215652951    -0.753119964673085    -0.164524698165254
    C                2.312365215652951    -1.428119964673085     1.038475301834746
    H                1.439365215652951     0.280880035326915     0.077475301834746
    H                2.403365215652951    -0.757119964673085    -0.989524698165254
    H                0.794365215652951    -1.288119964673085    -0.481524698165254
    H                3.291365215652950    -0.997119964673085     1.241475301834746
    H                1.660955215652951    -1.321659964673085     1.918435301834746
    H                2.423825215652951    -2.478709964673085     0.732145301834746

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-012ILE-028LEU-1-dimer.npy', np.array(charges))