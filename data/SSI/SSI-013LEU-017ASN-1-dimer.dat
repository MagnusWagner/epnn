import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.422383136245934     0.258835285570944    -2.292495400565098
    C                2.778383136245934     0.158835285570944    -1.608495400565098
    H                1.545383136245934     0.595835285570944    -3.322495400565098
    H                0.945383136245934    -0.721164714429056    -2.306495400565098
    H                0.781383136245934     0.956835285570944    -1.755495400565098
    H                2.629383136245934    -0.053164714429056    -0.550495400565098
    H                3.338044136245934     1.097575285570944    -1.733183400565099
    H                3.362259136245934    -0.670311714429056    -2.034645400565099
    C               -0.645616863754066     0.098835285570944     2.364504599434902
    C               -1.128616863754066    -0.081164714429056     0.942504599434902
    O               -2.185616863754066     0.420835285570944     0.559504599434901
    N               -0.362616863754066    -0.806164714429056     0.147504599434901
    H               -0.683616863754066    -1.001164714429056    -0.787495400565099
    H                0.481383136245934    -1.227164714429056     0.503504599434901
    H                0.444383136245934     0.152835285570944     2.377504599434902
    H               -0.948616863754066    -0.792164714429056     2.915504599434902
    H               -1.062024263754066     1.000695285570944     2.837004599434902

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-013LEU-017ASN-1-dimer.npy', np.array(charges))