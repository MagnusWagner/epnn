import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.510968879072081    -0.270663249736359     1.122303396916192
    C               -2.495968879072081    -0.776663249736359     2.165303396916192
    H               -1.586968879072081    -0.866663249736359     0.216303396916192
    H               -1.746968879072081     0.754336750263641     0.863303396916192
    H               -0.492968879072081    -0.314663249736359     1.510303396916192
    H               -2.412968879072081    -0.182663249736359     3.066303396916192
    H               -2.223396879072081    -1.813443249736359     2.411846396916192
    H               -3.530335879072082    -0.706593249736360     1.797640396916192
    C                1.295031120927919     0.603336750263641    -1.365696603083808
    C                2.710031120927919     0.448336750263641    -1.925696603083808
    H                0.916031120927919     1.600336750263641    -1.594696603083808
    H                0.624031120927919    -0.133663249736359    -1.800696603083808
    H                1.282031120927919     0.451336750263641    -0.286696603083808
    H                3.099031120927919    -0.507663249736359    -1.569696603083808
    H                3.371181120927919     1.240006750263640    -1.543413303083808
    H                2.723634120927919     0.427576750263641    -3.025416503083809

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-013LEU-063ILE-1-dimer.npy', np.array(charges))