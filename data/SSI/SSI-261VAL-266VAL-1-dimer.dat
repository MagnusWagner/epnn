import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                2.151042491555677     0.110375126749795     0.416393294844941
    C                2.444042491555677     1.071375126749796    -0.717606705155059
    H                2.267042491555677    -0.932624873250205     0.130393294844941
    H                2.831042491555677     0.309375126749795     1.242393294844941
    H                1.144042491555677     0.263375126749795     0.786393294844941
    H                3.494042491555677     0.996375126749795    -0.995606705155059
    H                1.805882491555677     0.797365126749795    -1.570644705155059
    H                2.238012491555677     2.098615126749795    -0.382447705155059
    C               -1.543957508444323    -0.708624873250205    -0.035606705155059
    C               -3.052957508444323    -0.478624873250205     0.327393294844941
    H               -1.375957508444323    -0.500624873250205    -1.091606705155059
    H               -0.944957508444323    -0.021624873250205     0.556393294844941
    H               -1.245957508444323    -1.730624873250205     0.176393294844941
    H               -3.306957508444323     0.550375126749795     0.070393294844941
    H               -3.714377508444323    -1.163054873250204    -0.224033705155059
    H               -3.170067508444323    -0.601444873250204     1.414223294844941

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-261VAL-266VAL-1-dimer.npy', np.array(charges))