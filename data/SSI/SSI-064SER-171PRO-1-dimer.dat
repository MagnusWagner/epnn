import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -2.653394867133741    -1.024193489485422     0.276047205304717
    O               -1.286394867133742    -1.239193489485422     0.540047205304717
    H               -1.093394867133742    -2.175193489485422     0.391047205304717
    H               -3.234394867133741    -1.740193489485422     0.857047205304717
    H               -2.844394867133742    -1.203193489485421    -0.779952794695283
    H               -2.962314867133741    -0.006913489485422     0.558385205304717
    C                1.085605132866258     0.589806510514578     0.195047205304717
    C                2.363605132866259     0.100806510514578    -0.418952794695283
    C                0.796605132866258     1.831806510514578    -0.601952794695283
    H                1.101605132866258     0.807806510514578     1.241047205304717
    H                0.395605132866258    -0.125193489485422    -0.136952794695283
    H                3.189605132866258     0.710806510514578    -0.095952794695283
    H                2.530605132866258    -0.956193489485422    -0.227952794695283
    H               -0.266394867133742     2.016806510514578    -0.506952794695283
    H                2.183565132866259     0.236566510514578    -1.495592794695283
    H                1.124325132866258     1.550686510514578    -1.613670794695283
    H                1.330925132866258     2.711987510514578    -0.214932794695283

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-064SER-171PRO-1-dimer.npy', np.array(charges))