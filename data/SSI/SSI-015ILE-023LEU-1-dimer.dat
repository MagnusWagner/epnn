import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.724609893551195     1.215198753131079     1.152742089911045
    C                1.965609893551195     1.688198753131079     1.910742089911045
    H                0.481609893551195     0.188198753131079     1.421742089911045
    H               -0.122390106448805     1.852198753131079     1.405742089911046
    H                0.905609893551195     1.277198753131079     0.079742089911045
    H                1.756609893551195     1.650198753131079     2.980742089911046
    H                2.100609893551195     2.729198753131080     1.625742089911046
    H                2.877575893551195     1.112519753131079     1.694150089911045
    C               -1.023390106448805    -1.226801246868921    -0.882257910088955
    C               -1.668390106448805    -1.686801246868921    -2.179257910088954
    H               -1.744390106448805    -1.286801246868921    -0.070257910088955
    H               -0.166390106448805    -1.858801246868921    -0.651257910088955
    H               -0.683390106448805    -0.198801246868921    -0.987257910088955
    H               -0.931390106448805    -1.532801246868921    -2.966257910088954
    H               -2.543283106448805    -1.051367246868921    -2.381211910088955
    H               -1.912202106448805    -2.759432246868921    -2.175053910088954

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-015ILE-023LEU-1-dimer.npy', np.array(charges))