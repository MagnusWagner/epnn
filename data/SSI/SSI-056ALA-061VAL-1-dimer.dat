import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.132096018322365    -1.317431644471840    -0.909443801391926
    C                1.179096018322365    -2.787431644471840    -1.436443801391926
    H                1.376096018322365    -0.623431644471840    -1.713443801391926
    H                0.131096018322365    -1.092431644471840    -0.538443801391926
    H                1.847096018322365    -1.191431644471840    -0.095443801391926
    H                0.859096018322365    -3.447431644471840    -0.630443801391926
    H                2.199316018322365    -3.037941644471840    -1.762643801391926
    H                0.470606018322365    -2.923571644471840    -2.266813801391926
    C               -0.963903981677635     1.496568355528160     0.709556198608074
    C               -1.350903981677635     2.613568355528160     1.630556198608074
    H               -1.539903981677635     1.531568355528160    -0.215443801391926
    H                0.095096018322365     1.584568355528160     0.459556198608074
    H               -1.118903981677635     0.534568355528160     1.199556198608074
    H               -0.674903981677635     2.579568355528160     2.485556198608074
    H               -2.371183981677635     2.427748355528160     1.997296198608074
    H               -1.230451981677635     3.595428355528160     1.149476198608074

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-056ALA-061VAL-1-dimer.npy', np.array(charges))