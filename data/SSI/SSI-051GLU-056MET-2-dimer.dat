import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C               -1.370167240458271     2.188165234840353    -0.948158512589238
    C               -0.936167240458270     1.877165234840353     0.483841487410762
    O               -1.818167240458270     1.575165234840352     1.319841487410762
    O                0.275832759541729     1.932165234840353     0.778841487410762
    H               -2.063167240458270     3.033165234840352    -0.930158512589238
    H               -1.873167240458270     1.346165234840353    -1.412158512589238
    H               -0.517327240458270     2.442065234840352    -1.594841512589238
    C                1.687832759541730    -0.521834765159647    -0.442158512589238
    C                0.675832759541729    -2.935834765159647    -1.334158512589238
    S                0.643832759541729    -1.874834765159648     0.122841487410762
    H                1.224832759541729    -0.040834765159647    -1.295158512589238
    H                1.858832759541730     0.182165234840353     0.367841487410762
    H                2.654832759541729    -0.920834765159647    -0.751158512589238
    H                1.357832759541729    -3.764834765159648    -1.145158512589238
    H                1.044832759541729    -2.359834765159647    -2.183158512589238
    H               -0.317007240458271    -3.339474765159648    -1.581827512589238

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-051GLU-056MET-2-dimer.npy', np.array(charges))