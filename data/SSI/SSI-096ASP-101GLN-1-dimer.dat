import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                0.845909347936219    -2.292007215916835    -1.492393001788990
    C                1.062909347936219    -0.839007215916835    -1.902393001788990
    O                0.304909347936219     0.047992784083165    -1.468393001788990
    O                2.036909347936219    -0.585007215916835    -2.627393001788990
    H                0.871909347936219    -2.909007215916835    -2.393393001788990
    H               -0.132090652063781    -2.421007215916835    -1.025393001788990
    H                1.638939347936219    -2.625347215916835    -0.806843001788990
    C                0.085909347936219     1.793992784083165     2.049606998211010
    C               -1.127090652063781     0.891992784083165     1.913606998211010
    O               -1.960090652063781     0.808992784083165     2.807606998211010
    N               -1.245090652063781     0.212992784083165     0.791606998211010
    H               -2.052090652063781    -0.374007215916835     0.667606998211010
    H               -0.550090652063781     0.296992784083165     0.044606998211010
    H               -0.223090652063781     2.831992784083165     1.916606998211010
    H                0.781909347936219     1.548992784083165     1.246606998211010
    H                0.575219347936219     1.674382784083165     3.027496998211010

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-096ASP-101GLN-1-dimer.npy', np.array(charges))