import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.398561668774216     0.201690203345214    -1.936825849219330
    C               -1.922561668774216     0.305690203345214    -1.970825849219330
    H               -0.001561668774216     0.899690203345214    -1.199825849219329
    H               -0.137561668774216    -0.803309796654786    -1.646825849219330
    H                0.024438331225784     0.451690203345214    -2.907825849219329
    H               -2.179561668774216     1.349690203345214    -2.155825849219330
    H               -2.343389668774216    -0.311619796654786    -2.778185849219330
    H               -2.349588668774216     0.015254203345214    -0.999595849219329
    C                0.494438331225784    -0.082309796654786     1.639174150780671
    C                1.831438331225784    -0.428309796654786     2.264174150780670
    H               -0.300561668774216    -0.236309796654786     2.367174150780671
    H                0.485438331225784     0.960690203345214     1.316174150780671
    H                0.293438331225784    -0.732309796654786     0.788174150780670
    H                1.821438331225784    -1.481309796654786     2.535174150780671
    H                2.645008331225784    -0.231385796654786     1.550504150780670
    H                1.985866331225784     0.157798203345214     3.182124150780671

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-019VAL-138VAL-2-dimer.npy', np.array(charges))