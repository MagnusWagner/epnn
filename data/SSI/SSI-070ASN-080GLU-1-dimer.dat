import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C               -0.076217509969364    -2.497530643825753     0.119526342773746
    C                1.166782490030636    -1.708530643825754     0.441526342773746
    O                1.526782490030636    -0.714530643825753    -0.205473657226254
    N                1.876782490030636    -2.196530643825753     1.400526342773746
    H               -0.780217509969364    -1.836530643825753    -0.383473657226254
    H               -0.534217509969364    -2.815530643825753     1.056526342773746
    H                2.746782490030636    -1.741530643825753     1.631526342773746
    H                1.568782490030636    -3.014530643825754     1.902526342773746
    H                0.136342490030636    -3.365080643825753    -0.522483657226254
    C               -1.638217509969364     2.654469356174247     0.573526342773746
    C               -1.107217509969364     1.745469356174247    -0.523473657226254
    O                0.062782490030636     1.944469356174247    -0.954473657226254
    O               -1.856217509969364     0.809469356174247    -0.921473657226254
    H               -1.039217509969364     3.565469356174247     0.644526342773746
    H               -1.540217509969364     2.138469356174246     1.532526342773746
    H               -2.698487509969364     2.913279356174246     0.436256342773746

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-070ASN-080GLU-1-dimer.npy', np.array(charges))