import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.111070801197271    -1.718118171389549     0.188661327304417
    C               -0.120929198802729    -3.110118171389549     0.767661327304417
    H                1.105070801197271    -1.635118171389549    -0.246338672695583
    H               -0.624929198802729    -1.523118171389549    -0.589338672695583
    H               -0.002929198802729    -0.974118171389549     0.977661327304417
    H               -0.000929198802729    -3.849118171389549    -0.026338672695583
    H               -1.158929198802729    -3.152118171389549     1.095661327304417
    H                0.540530801197271    -3.364967171389549     1.608801327304417
    C                0.590070801197271     2.056881828610451    -0.133338672695583
    C               -0.575929198802729     2.768881828610451    -0.819338672695583
    H                1.229070801197271     1.581881828610451    -0.879338672695583
    H                1.183070801197271     2.780881828610451     0.426661327304417
    H                0.210070801197271     1.303881828610451     0.555661327304417
    H               -0.152929198802729     3.559881828610451    -1.437338672695583
    H               -1.139788198802729     2.073359828610451    -1.458328672695583
    H               -1.238379198802728     3.228112728610451    -0.070828672695583

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-015ILE-034LEU-1-dimer.npy', np.array(charges))