import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.001122941499068     0.243010348429780    -0.022922994019594
    C               -1.627877058500932     1.551010348429780     2.038077005980406
    S               -1.453877058500932     1.243010348429780     0.275077005980406
    H               -0.161877058500932    -0.745989651570220     0.405077005980407
    H                0.143122941499068     0.184010348429780    -1.099922994019594
    H                0.872122941499068     0.710010348429780     0.438077005980406
    H               -0.652877058500932     1.811010348429780     2.453077005980407
    H               -1.960877058500932     0.627010348429780     2.513077005980406
    H               -2.346337058500933     2.349940348429780     2.273727005980406
    C                1.910122941499068    -1.774989651570220    -0.886922994019594
    C                2.760122941499068    -2.636989651570219    -1.774922994019593
    H                1.819122941499068    -2.194989651570220     0.116077005980407
    H                2.350122941499068    -0.778989651570220    -0.830922994019594
    H                0.927122941499068    -1.735989651570220    -1.352922994019593
    H                2.946122941499068    -2.113989651570220    -2.712922994019594
    H                2.237482941499068    -3.581839651570220    -1.984962994019593
    H                3.710962941499067    -2.791659651570220    -1.243902994019594

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-001MET-031VAL-1-dimer.npy', np.array(charges))