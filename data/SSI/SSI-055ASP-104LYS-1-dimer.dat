import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                2.279051248652332     0.179915801053297    -0.524894785833131
    C                1.495051248652332     1.187915801053297     0.299105214166869
    O                0.303051248652332     1.405915801053297    -0.009894785833131
    O                2.063051248652331     1.752915801053297     1.259105214166869
    H                2.291051248652332     0.491915801053297    -1.571894785833131
    H                1.774051248652332    -0.786084198946703    -0.461894785833131
    H                3.311500248652331     0.059675801053297    -0.164904785833131
    C               -1.677948751347669    -1.148084198946703     0.077105214166869
    C               -2.464948751347669    -2.392084198946703     0.485105214166869
    N               -1.762948751347668    -0.867084198946703    -1.383894785833131
    H               -2.079948751347668    -0.294084198946703     0.633105214166869
    H               -0.634948751347668    -1.271084198946703     0.383105214166869
    H               -3.488948751347668    -2.324084198946703     0.110105214166869
    H               -2.503948751347668    -2.428084198946703     1.575105214166869
    H               -2.723948751347668    -0.748084198946703    -1.680894785833131
    H               -1.274948751347668    -0.004084198946703    -1.600894785833131
    H               -1.347948751347668    -1.604084198946703    -1.939894785833131
    H               -1.987518751347668    -3.311654198946703     0.115695214166869

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-055ASP-104LYS-1-dimer.npy', np.array(charges))