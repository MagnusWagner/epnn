import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.118506489162223    -0.004874967192810     1.683697674987306
    C               -0.921506489162223    -0.468874967192810     2.882697674987306
    H                0.187493510837777     1.034125032807190     1.805697674987306
    H                0.763493510837777    -0.632874967192810     1.549697674987306
    H               -0.785506489162223    -0.086874967192810     0.836697674987306
    H               -0.416506489162223    -0.160874967192810     3.799697674987306
    H               -0.910506489162223    -1.557874967192810     2.849697674987306
    H               -1.962234489162223    -0.112664967192810     2.881267674987306
    C                0.156493510837777     0.577125032807190    -1.706302325012694
    C                0.882493510837777    -0.094874967192810    -2.860302325012694
    H               -0.056506489162223    -0.208874967192810    -1.000302325012694
    H                0.784493510837777     1.331125032807190    -1.235302325012694
    H               -0.776506489162223     1.020125032807190    -2.056302325012694
    H                0.893493510837777     0.593125032807190    -3.699302325012694
    H                0.361928270837777    -1.022554967192810    -3.140332325012694
    H                1.929080510837777    -0.297114967192810    -2.588722325012694

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-032ILE-065LEU-1-dimer.npy', np.array(charges))