import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.468742431074092    -1.429134631264369     0.819973329090292
    C                2.108742431074092    -0.933134631264369    -0.487026670909708
    H                1.201742431074092    -0.592134631264369     1.462973329090292
    H                2.155742431074092    -2.093134631264369     1.346973329090292
    H                0.554742431074092    -1.978134631264369     0.590973329090292
    H                1.451742431074092    -0.191134631264369    -0.938026670909708
    H                3.090592431074092    -0.474507631264369    -0.298264670909708
    H                2.213022431074092    -1.764504731264369    -1.199732670909708
    C               -1.221257568925908     0.800865368735631     0.171973329090292
    C               -2.352257568925908     1.567865368735631    -0.501026670909708
    H               -1.555257568925908     0.367865368735631     1.112973329090292
    H               -0.372257568925908     1.459865368735631     0.357973329090292
    H               -0.908257568925908    -0.017134631264369    -0.476026670909708
    H               -3.178257568925908     0.878865368735631    -0.682026670909708
    H               -2.697340568925908     2.384298368735631     0.150398329090292
    H               -2.003480568925907     1.942855368735631    -1.474544670909708

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-019LEU-041VAL-1-dimer.npy', np.array(charges))