import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.910129798130102     1.332906356922188     0.324115204628412
    C               -1.076129798130101     2.831906356922187     0.573115204628413
    H               -1.798129798130102     0.928906356922187    -0.165884795371587
    H               -0.051129798130102     1.177906356922187    -0.329884795371588
    H               -0.728129798130101     0.787906356922187     1.251115204628413
    H               -0.172129798130102     3.215906356922187     1.036115204628413
    H               -1.941269798130101     3.029146356922187     1.223216204628412
    H               -1.183659798130102     3.360916356922187    -0.385311795371587
    C                0.254870201869898    -2.130093643077813    -0.638884795371587
    C                1.727870201869899    -2.039093643077813    -0.255884795371587
    H               -0.314129798130102    -2.651093643077813     0.131115204628413
    H               -0.166129798130102    -1.131093643077813    -0.739884795371587
    H                0.141870201869898    -2.647093643077813    -1.593884795371587
    H                1.795870201869898    -1.691093643077813     0.774115204628413
    H                2.212320201869898    -3.023084643077813    -0.339980795371587
    H                2.246550201869898    -1.305141643077813    -0.890145795371587

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-164VAL-225LEU-1-dimer.npy', np.array(charges))