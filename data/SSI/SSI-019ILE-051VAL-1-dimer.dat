import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.757076682001943     0.816498437438972     0.654005063856776
    C                2.046076682001942    -0.484501562561028     1.375005063856775
    H                1.577076682001942     0.628498437438972    -0.404994936143224
    H                0.871076682001942     1.282498437438972     1.086005063856776
    H                2.603076682001943     1.496498437438972     0.761005063856776
    H                1.163076682001942    -1.124501562561028     1.333005063856776
    H                2.203076682001943    -0.229501562561028     2.423005063856776
    H                2.918330882001943    -1.025181562561028     0.978985063856776
    C               -1.703923317998058     0.475498437438972    -0.655994936143224
    C               -2.089923317998057    -0.808501562561028    -1.384994936143225
    H               -2.531923317998057     1.184498437438972    -0.683994936143224
    H               -1.475923317998058     0.243498437438972     0.383005063856776
    H               -0.820923317998058     0.928498437438972    -1.102994936143224
    H               -2.939923317998058    -1.232501562561028    -0.854994936143224
    H               -2.407794317998058    -0.598961562561028    -2.417004936143224
    H               -1.270040317998058    -1.541361562561028    -1.358384936143225

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-019ILE-051VAL-1-dimer.npy', np.array(charges))