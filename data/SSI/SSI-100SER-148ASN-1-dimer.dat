import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.691709407606181    -2.313693298371301    -0.850869178980433
    O                1.951709407606181    -0.938693298371301    -0.624869178980433
    H                2.895709407606181    -0.738693298371301    -0.798869178980433
    H                0.770709407606181    -2.575693298371301    -0.326869178980433
    H                2.503709407606181    -2.918693298371301    -0.442869178980433
    H                1.571859407606181    -2.521093298371301    -1.924469178980433
    C               -0.669290592393819    -0.096693298371301     1.436130821019567
    C               -0.979290592393819     0.897306701628699     0.333130821019567
    O               -0.302290592393819     0.937306701628699    -0.691869178980433
    N               -2.007290592393819     1.712306701628699     0.521130821019567
    H                0.410709407606181    -0.197693298371301     1.535130821019567
    H               -1.073290592393819    -1.058693298371301     1.117130821019567
    H               -2.218290592393819     2.377306701628699    -0.209869178980433
    H               -2.545290592393819     1.707306701628699     1.368130821019567
    H               -1.116820592393819     0.172546701628699     2.404230821019567

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-100SER-148ASN-1-dimer.npy', np.array(charges))