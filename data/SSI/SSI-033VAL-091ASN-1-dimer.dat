import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.228851433399120    -0.296981956554214    -1.831417745024898
    C                1.602851433399120     0.123018043445786    -3.247417745024899
    H                0.184851433399120    -0.599981956554214    -1.790417745024898
    H                1.849851433399120    -1.136981956554215    -1.522417745024898
    H                1.396851433399120     0.530018043445786    -1.144417745024898
    H                2.652851433399120     0.391018043445786    -3.205417745024898
    H                1.010941433399120     0.990688043445786    -3.574210745024898
    H                1.496071433399120    -0.728351956554214    -3.935726745024898
    C               -0.514148566600880     0.270018043445786     2.713582254975102
    C               -0.713148566600880    -0.016981956554214     1.234582254975102
    O               -0.645148566600880    -1.163981956554214     0.793582254975102
    N               -0.993148566600880     1.023018043445786     0.464582254975102
    H               -1.307148566600880    -0.237981956554214     3.263582254975102
    H               -0.649148566600880     1.334018043445786     2.903582254975102
    H               -1.139148566600880     0.880018043445786    -0.528417745024898
    H               -1.027148566600880     1.952018043445786     0.855582254975102
    H                0.465921433399120    -0.056911956554214     3.091190254975102

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-033VAL-091ASN-1-dimer.npy', np.array(charges))