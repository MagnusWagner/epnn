import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.640434303351658     0.457626914521062     1.714899886252100
    C                1.388434303351657     1.243626914521063     2.829899886252100
    H                0.951434303351658    -0.587373085478938     1.713899886252100
    H               -0.434565696648342     0.506626914521062     1.883899886252100
    H                0.854434303351658     0.901626914521062     0.741899886252100
    H                1.292434303351658     0.696626914521063     3.767899886252100
    H                0.873434303351658     2.198626914521062     2.939899886252099
    H                2.453484303351658     1.423645914521063     2.621909886252099
    C               -0.672565696648342    -1.031373085478938    -1.609100113747900
    C               -1.352565696648343    -0.675373085478937    -2.939100113747901
    H               -1.088565696648342    -1.959373085478937    -1.214100113747900
    H                0.397434303351658    -1.162373085478937    -1.772100113747900
    H               -0.816565696648342    -0.223373085478938    -0.891100113747900
    H               -0.916565696648342     0.257626914521062    -3.292100113747900
    H               -2.428685696648342    -0.537780685478938    -2.757330113747900
    H               -1.182205696648342    -1.449111085478938    -3.702190113747901

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-028ILE-036LEU-1-dimer.npy', np.array(charges))