import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                2.239789282241688     0.902241402826621    -1.532405853060187
    C                1.697789282241688    -0.427758597173379    -2.006405853060186
    O                2.234789282241687    -1.037758597173379    -2.939405853060187
    N                0.587789282241688    -0.860758597173380    -1.412405853060186
    H                0.190789282241688    -1.734758597173379    -1.720405853060186
    H                0.149789282241688    -0.353758597173379    -0.652405853060187
    H                3.230789282241688     1.053241402826620    -1.942405853060186
    H                2.301789282241688     0.865241402826621    -0.446405853060186
    H                1.540074282241688     1.678711402826620    -1.875185853060187
    C               -2.565210717758312     1.523241402826620     1.942594146939813
    C               -1.601210717758312     0.312241402826621     1.971594146939813
    O               -1.564210717758312    -0.432758597173379     0.938594146939814
    O               -0.945210717758312     0.054241402826621     3.015594146939814
    H               -3.576210717758313     1.154241402826621     1.750594146939814
    H               -2.307210717758312     2.134241402826621     1.080594146939813
    H               -2.613355717758312     2.135481402826620     2.855204146939814

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-130GLN-134GLU-1-dimer.npy', np.array(charges))