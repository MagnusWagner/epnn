import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.100084533171894    -0.347627801932391     1.760878248998702
    C                0.426084533171894    -0.488627801932391     3.237878248998701
    H                0.854084533171894    -0.845627801932391     1.151878248998702
    H               -0.866915466828106    -0.807627801932391     1.552878248998702
    H                0.058084533171894     0.706372198067609     1.484878248998702
    H                0.479084533171894    -1.543627801932391     3.480878248998701
    H                1.405774533171894    -0.029487801932391     3.436386248998701
    H               -0.347955466828106    -0.020147801932391     3.863484248998701
    C               -0.145915466828106    -0.065627801932391    -1.925121751001298
    C               -0.382915466828106     0.904372198067609    -3.078121751001298
    H               -0.526915466828106    -1.058627801932391    -2.171121751001298
    H                0.923084533171894    -0.137627801932391    -1.713121751001298
    H               -0.628915466828106     0.301372198067609    -1.022121751001298
    H               -0.156915466828106     1.916372198067609    -2.739121751001298
    H               -1.444825466828106     0.850712198067609    -3.360036751001299
    H                0.284024533171894     0.638312198067609    -3.911433751001299

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-235VAL-294ALA-1-dimer.npy', np.array(charges))