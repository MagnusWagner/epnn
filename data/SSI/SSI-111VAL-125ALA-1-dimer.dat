import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.207632489615475    -1.596731594239982    -0.382336427808461
    C                2.597632489615475    -1.946731594239981     0.125663572191539
    H                0.447632489615475    -2.097731594239981     0.214663572191539
    H                1.056632489615474    -0.520731594239981    -0.293336427808461
    H                1.103632489615475    -1.877731594239981    -1.430336427808461
    H                3.286632489615475    -1.253731594239982    -0.343336427808461
    H                2.861732489615475    -2.973873594239981    -0.166276427808461
    H                2.648712489615475    -1.819388594239982     1.217072572191539
    C               -1.444367510384525     1.158268405760018     0.095663572191539
    C               -2.360367510384525     2.382268405760019     0.169663572191539
    H               -1.028367510384526     0.938268405760019     1.079663572191539
    H               -2.005367510384525     0.293268405760019    -0.262336427808461
    H               -0.626367510384526     1.357268405760018    -0.598336427808461
    H               -2.728367510384525     2.577268405760019    -0.840336427808461
    H               -1.788867510384525     3.254202405760019     0.520545572191539
    H               -3.233947510384526     2.157756405760018     0.799304572191539

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-111VAL-125ALA-1-dimer.npy', np.array(charges))