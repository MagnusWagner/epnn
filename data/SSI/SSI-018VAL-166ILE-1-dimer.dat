import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.472951420162286     1.429740105205933    -0.656031377768719
    C                1.234951420162286     2.742740105205932    -0.759031377768719
    H               -0.415048579837714     1.462740105205933    -1.288031377768719
    H                1.109951420162286     0.609740105205933    -0.992031377768719
    H                0.171951420162286     1.224740105205933     0.370968622231281
    H                2.074951420162286     2.703740105205933    -0.064031377768719
    H                0.590299420162286     3.590510105205933    -0.483881377768719
    H                1.640191420162286     2.865320105205933    -1.774291377768719
    C               -1.466048579837714    -1.629259894794067     0.686968622231281
    C               -0.246048579837714    -2.543259894794067     0.733968622231281
    H               -1.575048579837714    -1.079259894794067     1.620968622231281
    H               -1.337048579837714    -0.903259894794067    -0.114031377768719
    H               -2.367048579837713    -2.212259894794068     0.491968622231281
    H                0.632951420162286    -1.956259894794067     0.996968622231281
    H               -0.105048579837714    -2.928259894794067    -0.275031377768719
    H               -0.371112579837714    -3.377019894794068     1.440508622231281

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-018VAL-166ILE-1-dimer.npy', np.array(charges))