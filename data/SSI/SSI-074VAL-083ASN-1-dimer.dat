import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.751686106982151    -1.193185417025739     0.945442693963315
    C               -2.619686106982151    -2.393185417025738     0.557442693963315
    H               -2.028686106982151    -0.834185417025738     1.936442693963315
    H               -0.702686106982151    -1.476185417025738     0.948442693963315
    H               -1.880686106982151    -0.387185417025738     0.223442693963315
    H               -2.514686106982151    -3.146185417025738     1.339442693963315
    H               -3.679808106982150    -2.111579417025739     0.474742693963315
    H               -2.240656106982151    -2.842244417025738    -0.372437306036685
    C                2.037313893017849     0.316814582974262     0.537442693963315
    C                1.052313893017849     0.982814582974262    -0.385557306036685
    O                0.682313893017849     2.137814582974261    -0.202557306036685
    N                0.681313893017849     0.254814582974262    -1.413557306036685
    H                1.908313893017849    -0.767185417025739     0.521442693963315
    H                1.836313893017849     0.673814582974262     1.548442693963315
    H                0.092313893017849     0.694814582974262    -2.101557306036685
    H                1.112313893017849    -0.633185417025738    -1.617557306036685
    H                3.064233893017849     0.587996582974262     0.251272693963315

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-074VAL-083ASN-1-dimer.npy', np.array(charges))