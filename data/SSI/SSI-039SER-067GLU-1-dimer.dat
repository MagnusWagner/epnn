import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C               -1.790689223487771     0.578277277084756     1.692641680155289
    C               -2.044689223487770     1.802277277084756     0.798641680155289
    O               -1.401689223487770    -0.561722722915244     0.921641680155289
    H               -1.007689223487771     0.805277277084756     2.418641680155290
    H               -2.705689223487771     0.335277277084756     2.235641680155289
    H               -2.842689223487771     1.563277277084756     0.095641680155289
    H               -0.452689223487771    -0.402722722915244     0.682641680155289
    H               -1.123149223487770     2.086407277084756     0.269471680155289
    H               -2.392309223487771     2.620887277084756     1.445981680155290
    C                0.609310776512229    -1.509722722915244    -1.558358319844710
    C                1.387310776512229    -0.389722722915244    -0.851358319844711
    O                1.098310776512229    -0.161722722915244     0.344641680155290
    O                2.274310776512229     0.261277277084756    -1.454358319844711
    H               -0.451689223487771    -1.353722722915244    -1.362358319844710
    H                0.877310776512229    -2.473722722915245    -1.120358319844710
    H                0.712230776512229    -1.574497722915244    -2.651618319844710

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-039SER-067GLU-1-dimer.npy', np.array(charges))