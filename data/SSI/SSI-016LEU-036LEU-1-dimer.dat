import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.980968406615484     0.381276101169296     1.636628441629302
    C                0.880968406615484    -0.802723898830704     2.595628441629302
    H                1.515968406615485     0.083276101169296     0.735628441629302
    H               -0.018031593384516     0.729276101169296     1.373628441629302
    H                1.512968406615484     1.200276101169296     2.114628441629302
    H                0.434968406615485    -0.435723898830704     3.515628441629302
    H                1.876108406615485    -1.211263898830704     2.825387441629303
    H                0.211658406615484    -1.578553898830704     2.195481441629302
    C               -0.383031593384515     0.602276101169296    -1.764371558370698
    C               -1.478031593384515    -0.178723898830704    -2.475371558370698
    H               -0.797031593384516     1.334276101169296    -1.072371558370698
    H                0.228968406615484    -0.096723898830704    -1.194371558370698
    H                0.247968406615484     1.086276101169297    -2.503371558370698
    H               -2.075031593384515    -0.673723898830704    -1.716371558370698
    H               -2.116404593384515     0.491966101169296    -3.069223558370698
    H               -1.032511593384515    -0.954413898830704    -3.115535558370698

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-016LEU-036LEU-1-dimer.npy', np.array(charges))