import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                1.470131588289412    -0.054795862487799    -2.628342422878886
    C                2.602131588289412    -0.613795862487799    -3.465342422878886
    H                0.779131588289412    -0.843795862487799    -2.362342422878886
    H                1.893131588289412     0.353204137512201    -1.708342422878886
    H                0.937131588289412     0.746204137512201    -3.132342422878886
    H                3.378131588289412     0.149204137512201    -3.517342422878886
    H                2.314821588289412    -0.877405862487799    -4.493912422878886
    H                3.033801588289411    -1.494465862487799    -2.967262422878886
    C               -0.067868411710588     0.421204137512201     0.562657577121114
    C                0.346131588289412     1.771204137512201     1.144657577121114
    C               -1.199868411710588    -0.296795862487799     1.308657577121114
    O               -1.595868411710588     0.129204137512201     2.413657577121114
    O               -1.667868411710588    -1.341795862487799     0.791657577121114
    H               -0.322868411710588     0.520204137512201    -0.492342422878886
    H                0.812131588289412    -0.224795862487799     0.602657577121114
    H                1.283131588289412     2.046204137512202     0.662657577121114
    H                0.547131588289412     1.674204137512201     2.212657577121114
    H               -0.372148411710588     2.586024137512201     0.971027577121114

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-028LEU-061GLU-1-dimer.npy', np.array(charges))