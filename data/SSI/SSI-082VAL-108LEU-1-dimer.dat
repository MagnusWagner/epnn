import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.855630812531735     1.460937612484865    -1.274340333476546
    C                0.160630812531735     1.125937612484865    -2.626340333476546
    H                1.559630812531734     0.675937612484865    -1.008340333476545
    H                1.392630812531734     2.406937612484865    -1.353340333476545
    H                0.106630812531735     1.542937612484865    -0.485340333476545
    H                0.879630812531735     1.063937612484865    -3.447340333476546
    H               -0.374749187468265     0.169037612484865    -2.538060333476546
    H               -0.554989187468265     1.935437612484865    -2.832630333476546
    C               -0.440369187468265    -1.024062387515135     1.207659666523454
    C               -0.575369187468265    -1.563062387515135     2.690659666523454
    H               -0.206369187468265     0.041937612484865     1.211659666523455
    H                0.361630812531735    -1.551062387515135     0.685659666523455
    H               -1.375369187468266    -1.178062387515135     0.664659666523455
    H                0.379630812531735    -1.415062387515135     3.192659666523455
    H               -1.369229187468266    -1.050262387515135     3.253569666523455
    H               -0.805309187468265    -2.638742387515135     2.684959666523454

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-082VAL-108LEU-1-dimer.npy', np.array(charges))