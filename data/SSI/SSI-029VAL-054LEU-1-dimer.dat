import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.962948300786529     1.296364899880190     0.708697988354978
    C               -1.816948300786529     1.776364899880190     1.882697988354978
    H                0.090051699213471     1.265364899880190     0.995697988354978
    H               -1.284948300786529     0.293364899880190     0.423697988354978
    H               -1.087948300786529     1.941364899880190    -0.161302011645022
    H               -2.833948300786529     1.940364899880190     1.527697988354977
    H               -1.417468300786529     2.718054899880190     2.287207988354978
    H               -1.840748300786529     1.015494899880190     2.676747988354977
    C                0.820051699213471    -1.203635100119810    -0.914302011645022
    C                1.964051699213471    -1.867635100119810    -1.673302011645022
    H                1.217051699213471    -0.473635100119810    -0.210302011645022
    H                0.170051699213471    -0.678635100119810    -1.615302011645023
    H                0.231051699213471    -1.951635100119810    -0.380302011645022
    H                2.577051699213471    -1.091635100119810    -2.123302011645023
    H                2.569651699213471    -2.486873100119810    -0.995222011645022
    H                1.560061699213471    -2.508975100119810    -2.470468011645023

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-029VAL-054LEU-1-dimer.npy', np.array(charges))