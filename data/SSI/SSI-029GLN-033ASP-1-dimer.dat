import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                1.053403110181346     2.306664554758454     1.454281600362744
    C                0.031403110181346     2.185664554758454     0.346281600362744
    O               -1.006596889818654     1.546664554758454     0.513281600362744
    N                0.308403110181346     2.806664554758453    -0.798718399637256
    H                1.735403110181346     3.125664554758453     1.221281600362744
    H                1.652403110181346     1.398664554758454     1.500281600362744
    H               -0.348596889818654     2.725664554758453    -1.561718399637256
    H                1.171403110181346     3.318664554758454    -0.909718399637256
    H                0.578533110181346     2.537974554758454     2.419161600362744
    C                1.004403110181346    -3.040335445241547     0.121281600362744
    C               -0.162596889818654    -2.176335445241547    -0.383718399637256
    O                0.072403110181346    -1.049335445241546    -0.889718399637256
    O               -1.328596889818654    -2.623335445241546    -0.290718399637256
    H                1.686403110181346    -2.427335445241546     0.714281600362744
    H                1.551403110181346    -3.421335445241547    -0.742718399637256
    H                0.660273110181346    -3.888865445241546     0.730851600362744

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-029GLN-033ASP-1-dimer.npy', np.array(charges))