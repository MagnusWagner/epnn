import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.196926214061731     0.127937827632602     1.661082386270677
    C               -1.388926214061731     0.542937827632602     2.475082386270677
    H                0.128073785938269     0.943937827632602     1.014082386270677
    H                0.621073785938269    -0.143062172367398     2.329082386270677
    H               -0.438926214061731    -0.744062172367398     1.056082386270677
    H               -1.771926214061731    -0.323062172367398     3.017082386270677
    H               -2.171820214061731     0.952406827632602     1.819787386270676
    H               -1.087128214061731     1.315572827632602     3.197545886270677
    C                1.241073785938269    -0.741062172367398    -1.598917613729323
    C                0.343073785938269     0.068937827632602    -2.542917613729323
    H                1.901073785938269    -1.377062172367398    -2.175917613729324
    H                1.838073785938269    -0.061062172367398    -0.990917613729323
    H                0.625073785938269    -1.355062172367398    -0.942917613729323
    H               -0.244926214061731     0.755937827632602    -1.934917613729324
    H               -0.326978214061731    -0.616948172367398    -3.081982613729324
    H                0.948635785938269     0.667333827632602    -3.239492613729323

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-100THR-104LEU-1-dimer.npy', np.array(charges))