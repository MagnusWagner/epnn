import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.566511171782799    -0.873908615706997    -1.635666621142737
    C                1.687511171782799    -1.606908615706997    -0.903666621142737
    H               -0.371488828217201    -1.424908615706997    -1.543666621142737
    H                0.438511171782799     0.116091384293003    -1.201666621142737
    H                0.811511171782799    -0.743908615706997    -2.686666621142737
    H                2.619511171782799    -1.065908615706997    -1.063666621142737
    H                1.802287171782799    -2.630568615706997    -1.289601621142737
    H                1.486606171782799    -1.635093615706997     0.177463378857263
    C               -1.641488828217201     0.834091384293003     0.874333378857263
    C               -0.617488828217201     1.647091384293003     1.663333378857263
    H               -1.543488828217201     0.996091384293003    -0.197666621142737
    H               -1.487488828217201    -0.226908615706997     1.075333378857263
    H               -2.649488828217201     1.096091384293003     1.195333378857263
    H                0.378511171782799     1.278091384293003     1.430333378857263
    H               -0.655356828217201     2.708832384293003     1.378249378857263
    H               -0.770623828217201     1.527746384293003     2.746064378857263

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-006VAL-020VAL-1-dimer.npy', np.array(charges))