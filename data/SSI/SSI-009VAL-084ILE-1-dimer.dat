import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.175379888471552    -1.297880218870006     1.306573268915459
    C               -1.459379888471552    -1.336880218870006     2.125573268915459
    H                0.480620111528448    -2.107880218870007     1.621573268915459
    H               -0.413379888471552    -1.434880218870007     0.251573268915459
    H                0.332620111528448    -0.341880218870007     1.437573268915459
    H               -1.951379888471552    -2.275880218870006     1.883573268915459
    H               -1.237513388471552    -1.348260218870006     3.202906268915459
    H               -2.142770888471552    -0.521100218870007     1.847208268915459
    C                0.799620111528448     0.561119781129993    -1.765426731084541
    C                0.841620111528448     2.087119781129994    -1.667426731084541
    H                1.412620111528448     0.215119781129993    -2.600426731084541
    H                1.120620111528448     0.089119781129993    -0.842426731084541
    H               -0.214379888471552     0.195119781129993    -1.907426731084541
    H                0.341620111528448     2.376119781129994    -0.746426731084541
    H                0.310127711528448     2.557396781129994    -2.507876731084541
    H                1.884034111528448     2.436511781129993    -1.631406731084541

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-009VAL-084ILE-1-dimer.npy', np.array(charges))