import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                0.369924512405510     0.823677979756483     2.540039519691143
    C               -0.087075487594490    -0.294322020243517     3.477039519691144
    H                1.408924512405510     0.671677979756483     2.249039519691143
    H               -0.263075487594490     0.815677979756483     1.656039519691143
    H                0.263924512405510     1.792677979756483     3.026039519691143
    H               -1.156075487594490    -0.179322020243517     3.657039519691143
    H                0.441166512405510    -0.216808020243517     4.438779519691145
    H                0.090375512405510    -1.270302020243517     3.001669519691143
    C                0.632924512405510     0.702677979756483    -1.239960480308856
    C                1.911924512405510    -0.081322020243517    -1.555960480308856
    C               -0.610075487594490    -0.156322020243517    -1.151960480308857
    O               -0.532075487594490    -1.385322020243517    -1.398960480308856
    O               -1.679075487594490     0.420677979756483    -0.833960480308856
    H                0.754924512405510     1.232677979756483    -0.295960480308856
    H                0.487924512405510     1.449677979756484    -2.024960480308856
    H                1.775924512405510    -0.647322020243517    -2.477960480308857
    H                2.114924512405510    -0.774322020243517    -0.738960480308856
    H                2.768780512405510     0.595256979756483    -1.690270480308857

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-004LEU-040GLU-1-dimer.npy', np.array(charges))