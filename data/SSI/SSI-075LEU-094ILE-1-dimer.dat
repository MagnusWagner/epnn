import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.192063880587724    -0.628722221746963     1.862578029428192
    C               -0.727063880587724    -2.065722221746964     1.847578029428192
    H                0.873936119412277    -0.636722221746963     1.632578029428192
    H               -0.703063880587724    -0.023722221746963     1.114578029428192
    H               -0.331063880587724    -0.185722221746964     2.845578029428192
    H               -0.429063880587724    -2.504722221746964     0.896578029428192
    H               -0.295163880587724    -2.646832221746963     2.675688029428192
    H               -1.826093880587724    -2.060712221746964     1.893398029428192
    C                0.962936119412276     1.285277778253036    -1.287421970571808
    C               -0.050063880587724     1.411277778253036    -2.418421970571808
    H                0.648936119412276     1.880277778253036    -0.433421970571808
    H                1.060936119412276     0.249277778253037    -0.971421970571808
    H                1.945936119412276     1.616277778253036    -1.609421970571808
    H                0.307936119412276     0.827277778253037    -3.268421970571808
    H               -0.162553880587724     2.457127778253037    -2.740221970571808
    H               -1.016193880587724     1.003057778253037    -2.086831970571808

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-075LEU-094ILE-1-dimer.npy', np.array(charges))