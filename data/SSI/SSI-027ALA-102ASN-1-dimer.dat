import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.550680562585802     1.446502444615013     1.637559442611503
    C               -0.621680562585802     1.423502444615013     2.855559442611503
    H               -1.816680562585802     0.427502444615013     1.353559442611503
    H               -2.460680562585802     1.998502444615013     1.876559442611503
    H               -1.051680562585801     1.935502444615013     0.800559442611503
    H               -0.426680562585802     2.466502444615013     3.116559442611503
    H                0.343789437414198     0.955072444615013     2.613819442611503
    H               -1.116280562585801     0.976352444615013     3.730449442611503
    C                1.254319437414198     0.232502444615013    -1.972440557388497
    C                0.558319437414199    -0.759497555384987    -1.061440557388497
    O                0.541319437414199    -0.603497555384987     0.155559442611503
    N               -0.094680562585802    -1.746497555384987    -1.653440557388497
    H                0.514319437414198     0.977502444615013    -2.270440557388496
    H                1.596319437414198    -0.280497555384987    -2.872440557388497
    H               -0.592680562585801    -2.406497555384987    -1.075440557388497
    H               -0.086680562585802    -1.835497555384987    -2.658440557388497
    H                2.104479437414199     0.732132444615013    -1.484997557388497

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-027ALA-102ASN-1-dimer.npy', np.array(charges))