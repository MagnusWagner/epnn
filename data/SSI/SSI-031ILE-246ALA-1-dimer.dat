import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.461033320780768    -0.255340881635941     0.753151493847400
    C               -2.693033320780768    -0.179340881635941     1.594151493847400
    H               -1.379033320780768    -1.232340881635941     0.276151493847400
    H               -1.505033320780768     0.512659118364060    -0.017848506152600
    H               -0.583033320780768    -0.081340881635941     1.377151493847400
    H               -3.574033320780768    -0.273340881635941     0.956151493847401
    H               -2.705033320780768     0.820659118364059     2.022151493847401
    H               -2.724623320780768    -0.951070881635940     2.377371493847400
    C                1.360966679219232    -0.029340881635941    -1.180848506152600
    C                2.793966679219232     0.457659118364059    -1.164848506152600
    H                1.231966679219232    -0.790340881635941    -1.950848506152600
    H                1.108966679219232    -0.460340881635941    -0.210848506152600
    H                0.682966679219232     0.797659118364059    -1.394848506152600
    H                2.891966679219232     1.257659118364060    -0.439848506152600
    H                3.098686679219232     0.853339118364060    -2.144948506152599
    H                3.445916679219232    -0.377430881635941    -0.868908506152600

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-031ILE-246ALA-1-dimer.npy', np.array(charges))