import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.737505478317531     0.085408074230021    -0.804582901122427
    C               -3.180505478317531     0.467408074230021    -0.817582901122427
    H               -1.489505478317531    -0.423591925769979     0.126417098877573
    H               -1.535505478317531    -0.590591925769979    -1.635582901122427
    H               -1.112505478317531     0.972408074230021    -0.908582901122427
    H               -3.789505478317531    -0.432591925769979    -0.737582901122427
    H               -3.381505478317531     0.911408074230021    -1.791582901122427
    H               -3.442852478317532     1.165568074230021    -0.009032901122427
    C                1.823494521682469     0.049408074230021     0.522417098877573
    C                3.096494521682469    -0.592591925769979     1.098417098877573
    H                2.129494521682469     0.801408074230021    -0.181582901122427
    H                1.203494521682469    -0.703591925769979     0.036417098877573
    H                1.257494521682468     0.521408074230021     1.325417098877573
    H                2.764494521682469    -1.232591925769979     1.912417098877573
    H                3.790214521682469     0.157278074230021     1.506407098877573
    H                3.582634521682468    -1.261208925769979     0.372727098877573

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-194ILE-205LEU-1-dimer.npy', np.array(charges))