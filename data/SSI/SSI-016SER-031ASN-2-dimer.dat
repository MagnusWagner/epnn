import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.558498175726256     1.711679011216843    -2.885393772020099
    O                0.041498175726256     1.671679011216843    -1.570393772020098
    H               -0.466501824273744     2.487679011216843    -1.446393772020098
    H                1.478498175726256     1.125679011216843    -2.921393772020098
    H                0.797498175726256     2.740679011216844    -3.158393772020098
    H               -0.165601824273744     1.298529011216843    -3.603015772020099
    C               -0.524501824273744    -1.146320988783157     0.049606227979902
    C               -1.979501824273744    -1.394320988783157     0.480606227979902
    C                0.360498175726256    -0.608320988783157     1.160606227979902
    O                0.581498175726256    -1.268320988783157     2.171606227979902
    N                0.909498175726256     0.576679011216843     0.963606227979902
    H               -0.092501824273744    -2.093320988783157    -0.271393772020098
    H               -0.504501824273744    -0.488320988783157    -0.803393772020098
    H               -1.997501824273744    -2.154320988783157     1.265606227979902
    H                1.527498175726256     0.953679011216843     1.667606227979902
    H                0.747498175726256     1.061679011216843     0.085606227979902
    H               -2.533391824273744    -1.753520988783157    -0.399273772020098
    H               -2.442871824273744    -0.479110988783157     0.877680227979902

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-016SER-031ASN-2-dimer.npy', np.array(charges))