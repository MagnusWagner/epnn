import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.163047926324923    -0.119697362366155    -1.165342806557762
    C               -1.215047926324923    -1.282697362366155    -2.168342806557761
    O               -1.814047926324923    -0.418697362366155     0.047657193442239
    H               -0.122047926324923     0.134302637633845    -0.966342806557761
    H               -1.647047926324923     0.755302637633845    -1.601342806557762
    H               -2.256047926324924    -1.526697362366155    -2.374342806557761
    H               -1.537047926324923    -1.298697362366155     0.341657193442239
    H               -0.688377926324923    -2.154929562366156    -1.753822806557761
    H               -0.731457926324923    -0.926522362366155    -3.089912806557761
    C                1.508952073675077     0.946302637633845     1.203657193442239
    C                2.790952073675077     0.949302637633845     2.044657193442239
    H                0.639952073675077     1.167302637633845     1.823657193442239
    H                1.371952073675077    -0.017697362366155     0.716657193442239
    H                1.583952073675077     1.691302637633845     0.416657193442239
    H                2.839952073675077     1.901302637633845     2.573657193442239
    H                2.782412073675077     0.137748637633845     2.787157193442239
    H                3.671422073675076     0.909739637633845     1.386467193442239

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-004SER-027VAL-1-dimer.npy', np.array(charges))