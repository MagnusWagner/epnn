import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    1 1
    --
    1 1
    C                2.746327498339717     1.606704671850717    -1.634926757455632
    N                1.352327498339717     1.147704671850717    -1.927926757455632
    H                0.835327498339717     0.966704671850717    -1.072926757454632
    H                0.850327498339717     1.838704671850717    -2.476926757455632
    H                1.361327498339717     0.285704671850717    -2.462926757455631
    H                2.703327498339717     2.589704671850717    -1.154926757454632
    H                3.304327498339717     1.719704671850717    -2.570926757455632
    H                3.298577498339717     0.921098671850717    -0.975406757454632
    C               -2.161672501660283     0.169704671850717     0.736073242545368
    C               -1.034672501660283    -0.781295328149283     0.955073242544368
    O               -0.091672501660283    -0.613295328149283     0.196073242545368
    N               -1.062672501660283    -1.687295328149284     1.950073242544368
    H               -2.912672501660283    -0.004295328149283     1.510073242545368
    H               -2.621672501660283    -0.055295328149283    -0.226926757455632
    H               -0.290672501660283    -2.333295328149283     2.037073242544369
    H               -1.880672501660283    -1.773295328149283     2.533073242545368
    H               -1.858902501660283     1.226610671850717     0.771813242545368

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-002LYS-075ASN-1-dimer.npy', np.array(charges))