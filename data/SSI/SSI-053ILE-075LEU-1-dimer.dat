import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.752985920647971    -1.585649003144016    -0.009737086455201
    C                0.598985920647971    -2.991649003144017     0.579262913544800
    H               -0.087014079352029    -0.967649003144017     0.306262913544799
    H                1.684985920647971    -1.124649003144016     0.317262913544799
    H                0.780985920647971    -1.616649003144016    -1.098737086455201
    H                1.449985920647971    -3.583649003144016     0.243262913544799
    H               -0.325204079352029    -3.460533003144016     0.210442913544799
    H                0.601845920647971    -2.980914003144016     1.679202913544799
    C               -0.102014079352029     1.874350996855983    -0.558737086455200
    C               -1.253014079352029     2.704350996855983    -0.010737086455201
    H                0.679985920647971     2.529350996855984    -0.940737086455201
    H                0.315985920647971     1.266350996855983     0.242262913544799
    H               -0.451014079352029     1.216350996855984    -1.352737086455201
    H               -2.085014079352029     2.041350996855984     0.222262913544799
    H               -1.569494079352029     3.454290996855983    -0.750627086455200
    H               -0.959644079352029     3.209630996855984     0.921262913544799

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-053ILE-075LEU-1-dimer.npy', np.array(charges))