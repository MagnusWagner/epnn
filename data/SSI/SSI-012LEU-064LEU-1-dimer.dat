import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.562465223029528     0.223545563492071     0.068958540084853
    C                2.622465223029528     1.208545563492071    -0.400041459915147
    H                1.229465223029528     0.476545563492071     1.077958540084853
    H                0.714465223029528     0.259545563492071    -0.613041459915147
    H                1.971465223029528    -0.786454436507928     0.064958540084853
    H                2.836465223029528     0.993545563492071    -1.424041459915147
    H                3.518305223029528     1.113155563492072     0.231131540084853
    H                2.227255223029528     2.234785563492072    -0.374800459915147
    C               -2.186534776970472    -0.149454436507929    -0.333041459915147
    C               -1.996534776970472    -1.283454436507929     0.668958540084853
    H               -1.541534776970472     0.688545563492071    -0.074041459915147
    H               -1.932534776970472    -0.497454436507929    -1.334041459915147
    H               -3.226534776970472     0.176545563492071    -0.320041459915147
    H               -0.968534776970472    -1.632454436507929     0.583958540084853
    H               -2.173984776970472    -0.899224436507928     1.684279540084853
    H               -2.676454776970472    -2.117344436507929     0.440161540084853

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-012LEU-064LEU-1-dimer.npy', np.array(charges))