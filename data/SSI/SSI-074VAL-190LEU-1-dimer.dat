import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.927614704376440     1.007801676228274    -0.304557610231565
    C               -1.852614704376440     1.975801676228274     0.883442389768435
    H               -2.809614704376440     0.369801676228274    -0.230557610231565
    H               -1.981614704376440     1.573801676228274    -1.234557610231565
    H               -1.035614704376440     0.388801676228274    -0.328557610231565
    H               -0.972614704376440     2.603801676228275     0.757442389768435
    H               -1.752994704376440     1.417947676228274     1.826242389768435
    H               -2.745894704376440     2.617553676228274     0.897812389768435
    C                1.341385295623560    -0.966198323771726    -0.223557610231565
    C                2.435385295623560    -2.021198323771725    -0.350557610231565
    H                1.312385295623560    -0.558198323771726     0.787442389768435
    H                1.542385295623560    -0.144198323771726    -0.912557610231565
    H                0.375385295623560    -1.406198323771726    -0.475557610231565
    H                3.361385295623560    -1.622198323771726     0.061442389768435
    H                2.146365295623560    -2.926263323771725     0.203812389768435
    H                2.601625295623560    -2.269485323771725    -1.409196610231565

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-074VAL-190LEU-1-dimer.npy', np.array(charges))