import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.642109129128816    -0.797862919893787     0.970404210495484
    C                0.881890870871184    -0.891862919893787     1.002404210495484
    O               -1.229109129128816    -1.952862919893787     1.514404210495484
    H               -0.963109129128816     0.079137080106213     1.535404210495484
    H               -0.970109129128816    -0.685862919893787    -0.063595789504516
    H                1.257890870871184    -0.022862919893787     0.469404210495484
    H               -2.185109129128816    -1.813862919893787     1.551404210495484
    H                1.217090870871184    -1.815914919893787     0.508671210495484
    H                1.250210870871184    -0.812421919893787     2.035860210495484
    C               -0.173109129128816     1.729137080106213    -1.852595789504516
    C                1.316890870871184     2.045137080106213    -1.742595789504516
    H               -0.665109129128816     2.468137080106213    -2.486595789504516
    H               -0.307109129128816     0.739137080106213    -2.290595789504517
    H               -0.634109129128816     1.743137080106213    -0.864595789504516
    H                1.781890870871184     1.289137080106213    -1.113595789504516
    H                1.456870870871184     3.027281080106214    -1.267413789504516
    H                1.793700870871184     1.977951080106213    -2.731606789504517

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-148SER-163ALA-1-dimer.npy', np.array(charges))