import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.004283762568840    -0.254141112230989     1.847140648393841
    C               -1.958283762568840     0.931858887769011     1.906140648393841
    H               -1.336283762568840    -0.974141112230989     1.099140648393841
    H                0.007716237431160     0.058858887769011     1.600140648393841
    H               -0.952283762568840    -0.751141112230989     2.815140648393840
    H               -1.672283762568840     1.574858887769011     2.740140648393841
    H               -2.989393762568840     0.588868887769011     2.076930648393841
    H               -1.878433762568840     1.527798887769011     0.985010648393841
    C                1.080716237431160    -0.603141112230989    -1.288859351606159
    C                1.880716237431160    -0.070141112230989    -2.466859351606159
    H                1.373716237431160    -0.090141112230989    -0.371859351606159
    H                0.013716237431160    -0.450141112230989    -1.463859351606159
    H                1.266716237431160    -1.671141112230989    -1.168859351606159
    H                1.607716237431160    -0.651141112230989    -3.351859351606159
    H                2.955226237431160    -0.194911112230989    -2.267231351606160
    H                1.617386237431160     0.979558887769011    -2.663813351606159

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-176ILE-201ALA-1-dimer.npy', np.array(charges))