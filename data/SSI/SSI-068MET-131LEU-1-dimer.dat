import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.572461308755323    -0.143563492880674     0.189557413141913
    C                2.112461308755323    -2.072563492880674    -1.060442586858086
    S                1.113461308755323    -0.615563492880674    -1.450442586858087
    H                1.401461308755323    -0.223563492880674     0.894557413141914
    H                0.252461308755323     0.893436507119325     0.147557413141913
    H               -0.250538691244677    -0.780563492880674     0.513557413141913
    H                2.824461308755323    -1.802563492880674    -0.279442586858086
    H                2.692461308755323    -2.343563492880675    -1.938442586858087
    H                1.525901308755323    -2.936963492880674    -0.715830586858087
    C               -2.038538691244677     1.295436507119326     1.636557413141913
    C               -3.042538691244677     2.267436507119326     2.238557413141914
    H               -1.303538691244677     1.875436507119326     1.083557413141913
    H               -1.544538691244677     0.734436507119326     2.430557413141913
    H               -2.534538691244677     0.601436507119326     0.960557413141914
    H               -3.763538691244677     1.697436507119326     2.821557413141913
    H               -3.562328691244677     2.795166507119326     1.425341413141913
    H               -2.530378691244677     2.982426507119326     2.899220413141913

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-068MET-131LEU-1-dimer.npy', np.array(charges))