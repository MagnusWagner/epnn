import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.487316811870905     0.213964428530920     2.367311924844077
    C                2.116316811870905    -1.094035571469080     0.306311924844077
    S                0.661316811870905    -0.094035571469080     0.604311924844077
    H                1.462316811870905     0.473964428530920     2.782311924844077
    H                0.154316811870905    -0.710035571469080     2.842311924844076
    H                1.953316811870905    -2.083035571469080     0.734311924844077
    H                2.258316811870905    -1.153035571469080    -0.770688075155923
    H                2.987316811870905    -0.627035571469080     0.767311924844077
    H               -0.231143188129095     1.012894428530920     2.602961924844077
    C               -1.736683188129095     0.556964428530920    -1.312688075155923
    C               -2.327683188129095     0.546964428530920    -2.709688075155923
    H               -0.662683188129095     0.652964428530920    -1.434688075155923
    H               -2.122683188129095     1.415964428530920    -0.765688075155923
    H               -1.989683188129095    -0.347035571469080    -0.758688075155923
    H               -3.413683188129095     0.605964428530920    -2.638688075155923
    H               -2.036113188129095    -0.365955571469080    -3.249658075155923
    H               -1.946403188129095     1.442114428530920    -3.222838075155923

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-001MET-027VAL-2-dimer.npy', np.array(charges))