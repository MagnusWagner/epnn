import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                2.118636195502481    -0.123838083779244     0.055782200007812
    C                2.308636195502481     0.596161916220756    -1.292217799992188
    H                1.802636195502481    -1.153838083779244    -0.116217799992188
    H                3.064636195502481    -0.134838083779244     0.593782200007811
    H                1.373636195502481     0.396161916220756     0.653782200007812
    H                3.152636195502481     0.131161916220756    -1.799217799992189
    H                1.409646195502481     0.565433916220756    -1.925367799992189
    H                2.527496195502481     1.657940916220756    -1.105867799992188
    C               -1.585363804497519     0.176161916220756     0.757782200007812
    C               -2.847363804497519    -0.655838083779244     0.478782200007812
    H               -0.711363804497519    -0.475838083779244     0.750782200007811
    H               -1.455363804497519     0.946161916220756    -0.001217799992188
    H               -1.649363804497519     0.682161916220756     1.720782200007811
    H               -3.725363804497519    -0.034838083779244     0.660782200007812
    H               -2.885503804497519    -1.530799083779244     1.144352200007811
    H               -2.838773804497519    -0.961328083779244    -0.577907799992189

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-062LEU-075ILE-1-dimer.npy', np.array(charges))