import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                1.317010999108527     1.042865302472786     2.412084573145484
    C                0.887010999108527     0.163865302472786     1.262084573145484
    O                0.017010999108527    -0.718134697527214     1.447084573145484
    O                1.446010999108527     0.356865302472786     0.164084573145484
    H                1.639010999108527     2.019865302472785     2.043084573145484
    H                2.174010999108527     0.566865302472786     2.892084573145484
    H                0.520370999108527     1.183831302472786     3.157394573145484
    C               -1.469989000891473     0.192865302472786    -1.567915426854516
    C               -2.099989000891473    -1.191134697527215    -1.704915426854516
    O               -0.082989000891473     0.150865302472786    -1.850915426854516
    H               -1.975989000891473     0.853865302472786    -2.269915426854516
    H               -1.624989000891473     0.570865302472786    -0.556915426854516
    H               -3.178989000891474    -1.082134697527215    -1.637915426854516
    H                0.428010999108527     0.227865302472786    -1.002915426854516
    H               -1.759519000891473    -1.868300697527214    -0.907715426854516
    H               -1.859839000891473    -1.615568697527214    -2.690905426854516

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-081ASP-092SER-1-dimer.npy', np.array(charges))