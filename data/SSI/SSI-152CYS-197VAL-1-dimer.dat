import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.866427345951040    -0.031012621804906    -1.180811232706156
    C               -1.589427345951040    -0.354012621804906    -2.500811232706156
    S               -0.637427345951040    -1.405012621804906    -0.065811232706156
    H                0.112572654048960     0.346987378195094    -1.447811232706156
    H               -1.403427345951040     0.765987378195094    -0.659811232706155
    H               -1.729427345951040     0.575987378195094    -3.055811232706155
    H                0.291572654048960    -0.843012621804906     0.713188767293845
    H               -2.574517345951040    -0.791072621804906    -2.280391232706156
    H               -0.991197345951040    -1.024582621804906    -3.135211232706155
    C                1.177572654048960     1.371987378195094     1.788188767293845
    C                2.566572654048960     1.990987378195094     1.948188767293844
    H                1.272572654048960     0.329987378195094     1.488188767293844
    H                0.652572654048960     1.423987378195094     2.742188767293845
    H                0.583572654048960     1.922987378195094     1.058188767293845
    H                2.456572654048960     3.041987378195094     2.210188767293845
    H                3.150032654048960     1.893627378195094     1.020768767293844
    H                3.061282654048960     1.471577378195094     2.782148767293844

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-152CYS-197VAL-1-dimer.npy', np.array(charges))