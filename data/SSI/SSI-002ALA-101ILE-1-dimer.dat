import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.042758949880874     1.433866176400862    -0.290464169339921
    C                2.335758949880873     1.530866176400862     0.513535830660079
    H                0.988758949880874     0.475866176400862    -0.810464169339921
    H                0.187758949880874     1.525866176400862     0.380535830660079
    H                1.001758949880874     2.242866176400862    -1.021464169339921
    H                2.352758949880874     2.502866176400862     1.010535830660079
    H                3.212948949880873     1.451874176400862    -0.145482169339921
    H                2.351678949880873     0.758939176400862     1.297037830660079
    C               -1.919241050119127    -0.954133823599138     0.389535830660079
    C               -1.461241050119127    -2.020133823599138    -0.615464169339921
    H               -2.854241050119127    -1.254133823599138     0.863535830660079
    H               -1.162241050119126    -0.794133823599138     1.157535830660079
    H               -2.060241050119126     0.009866176400862    -0.100464169339921
    H               -0.524241050119126    -1.676133823599138    -1.058464169339921
    H               -2.206371050119126    -2.145753823599138    -1.414839169339921
    H               -1.264941050119126    -2.984453823599138    -0.123989169339921

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-002ALA-101ILE-1-dimer.npy', np.array(charges))