import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.135627388875815     0.288366954073741    -1.926310710431395
    C                0.317372611124185    -1.166633045926258    -2.032310710431395
    H               -0.890627388875815     0.394366954073741    -1.147310710431395
    H                0.720372611124185     0.917366954073742    -1.682310710431395
    H               -0.542627388875815     0.626366954073742    -2.878310710431395
    H                0.943372611124185    -1.273633045926258    -2.919310710431395
    H               -0.548527388875815    -1.841623045926258    -2.100240710431395
    H                0.915492611124185    -1.419333045926259    -1.144400710431395
    C                0.638372611124185     0.398366954073741     1.772689289568605
    C               -0.825627388875815     0.478366954073741     2.185689289568605
    H                1.283372611124185     0.623366954073741     2.622689289568605
    H                0.866372611124185    -0.608633045926258     1.433689289568605
    H                0.838372611124185     1.104366954073742     0.967689289568605
    H               -1.455627388875815     0.370366954073741     1.302689289568605
    H               -1.006317388875815     1.456666954073742     2.655039289568605
    H               -1.058027388875815    -0.331403045926259     2.892979289568605

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-079THR-089LEU-1-dimer.npy', np.array(charges))