import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.257885447335178    -0.475787353682582    -2.115704639254625
    C                1.459885447335178    -1.949787353682582    -1.794704639254626
    H                1.590885447335178    -0.262787353682582    -3.128704639254625
    H                0.195885447335178    -0.231787353682582    -2.062704639254625
    H                1.804885447335178     0.146212646317418    -1.405704639254626
    H                0.954885447335178    -2.524787353682583    -2.570704639254625
    H                2.531495447335177    -2.198078353682582    -1.791824639254625
    H                0.996575447335178    -2.197705353682582    -0.828334639254625
    C               -0.023114552664822     0.387212646317418     2.261295360745375
    C               -0.747114552664822     0.581212646317418     0.949295360745375
    O               -1.637114552664822    -0.189787353682582     0.598295360745374
    N               -0.379114552664822     1.621212646317418     0.215295360745375
    H                0.254885447335178     1.365212646317418     2.661295360745374
    H                0.893885447335178    -0.168787353682582     2.065295360745375
    H               -0.867114552664822     1.801212646317418    -0.647704639254626
    H                0.336885447335178     2.251212646317418     0.547295360745375
    H               -0.632454552664822    -0.143522353682582     3.007645360745375

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-013VAL-154ASN-2-dimer.npy', np.array(charges))