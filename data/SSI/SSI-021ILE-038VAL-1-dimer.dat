import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.127275812723851    -1.838099962342304     0.902097819016326
    C               -1.146724187276149    -1.197099962342304     1.513097819016326
    H                0.425275812723851    -2.712099962342304     1.483097819016326
    H               -0.043724187276149    -2.144099962342304    -0.129902180983674
    H                0.954275812723851    -1.127099962342304     0.872097819016326
    H               -1.374724187276149    -0.291099962342304     0.951097819016326
    H               -0.957461187276149    -0.921679962342304     2.561107819016326
    H               -2.012751187276149    -1.872339962342304     1.449507819016326
    C                0.528275812723851     0.966900037657696    -1.711902180983674
    C                0.486275812723851     2.070900037657696    -0.698902180983674
    H                0.315275812723851     1.338900037657696    -2.715902180983674
    H                1.525275812723851     0.522900037657696    -1.715902180983674
    H               -0.192724187276149     0.187900037657696    -1.453902180983674
    H                0.864275812723851     1.695900037657696     0.249097819016326
    H               -0.562431187276149     2.380670037657696    -0.579492180983674
    H                1.117741812723851     2.911190037657696    -1.023192180983674

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-021ILE-038VAL-1-dimer.npy', np.array(charges))