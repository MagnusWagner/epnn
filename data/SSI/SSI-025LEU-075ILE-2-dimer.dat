import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.251804910126743     1.824543906052318     0.267944754456509
    C               -0.396804910126743     2.448543906052318     1.686944754456509
    H                0.732195089873257     1.366543906052318     0.160944754456509
    H               -1.024804910126744     1.071543906052318     0.112944754456509
    H               -0.368804910126743     2.607543906052318    -0.481055245543491
    H               -1.383804910126743     2.893543906052318     1.751944754456509
    H                0.353625089873257     3.237418906052318     1.843584754456509
    H               -0.311904910126743     1.694560906052318     2.483374754456509
    C                0.078195089873257    -1.557456093947682    -1.467055245543491
    C                0.575195089873257    -2.715456093947682    -0.483055245543491
    H                0.737195089873257    -0.691456093947682    -1.404055245543491
    H                0.088195089873257    -1.922456093947682    -2.490055245543492
    H               -0.937804910126743    -1.260456093947682    -1.212055245543491
    H                1.580195089873256    -3.021456093947682    -0.769055245543491
    H               -0.087804910126743    -3.567456093947682    -0.627055245543491
    H                0.566605089873257    -2.409966093947682     0.573634754456509

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-025LEU-075ILE-2-dimer.npy', np.array(charges))