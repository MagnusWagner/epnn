import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.496481035056048    -0.724751836640725    -0.997105914052552
    C                2.635481035056048    -0.766751836640725     0.023894085947448
    H                1.068481035056048     0.274248163359274    -1.073105914052552
    H                0.696481035056048    -1.399751836640726    -0.690105914052552
    H                1.858481035056048    -1.034751836640726    -1.979105914052552
    H                2.227481035056048    -0.472751836640726     0.982894085947448
    H                3.398711035056048    -0.031571836640725    -0.271035914052552
    H                3.079611035056048    -1.768731836640726     0.117584085947448
    C               -1.540518964943952     1.118248163359274     0.074894085947448
    C               -2.590518964943953     0.370248163359275     0.889894085947448
    H               -0.563518964943952     0.977248163359275     0.539894085947448
    H               -1.745518964943952     2.187248163359274     0.061894085947448
    H               -1.500518964943952     0.742248163359275    -0.947105914052552
    H               -2.541518964943952     0.740248163359275     1.913894085947448
    H               -3.615684964943953     0.529828163359275     0.524424085947448
    H               -2.373488964943952    -0.707701836640725     0.920174085947448

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-011ILE-045VAL-1-dimer.npy', np.array(charges))