import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.504332025697673     1.707168542321441     0.632395456345936
    C               -0.808667974302327     2.475168542321441     0.480395456345936
    H                0.399332025697673     0.901168542321441     1.358395456345936
    H                0.794332025697673     1.279168542321441    -0.328604543654064
    H                1.292332025697672     2.386168542321441     0.964395456345936
    H               -0.667667974302327     3.248168542321441    -0.278604543654064
    H               -1.084697974302328     2.955581542321442     1.430665456345936
    H               -1.614127974302327     1.809478302321441     0.136745456345936
    C               -0.171667974302327    -1.901831457678559     0.104395456345936
    C                0.470332025697673    -2.282831457678559    -1.215604543654064
    H               -0.835667974302327    -2.692831457678559     0.444395456345936
    H                0.603332025697673    -1.748831457678559     0.856395456345936
    H               -0.734667974302327    -0.978831457678559    -0.005604543654064
    H                1.273332025697673    -1.578831457678559    -1.438604543654064
    H               -0.261187974302327    -2.262887457678559    -2.036874543654065
    H                0.902892025697673    -3.289827457678558    -1.121534543654064

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-093ALA-099THR-1-dimer.npy', np.array(charges))