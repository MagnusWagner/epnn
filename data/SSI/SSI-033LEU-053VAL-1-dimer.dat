import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.770913523816057     0.238585531270749    -1.462467176598055
    C               -2.017913523816057     0.975585531270750    -0.962467176598055
    H                0.127086476183943     0.603585531270750    -0.976467176598055
    H               -0.876913523816057    -0.828414468729251    -1.259467176598055
    H               -0.668913523816057     0.380585531270749    -2.539467176598055
    H               -2.140913523816057     0.762585531270749     0.097532823401945
    H               -1.903423523816057     2.059635531270750    -1.109869176598055
    H               -2.913003523816057     0.617255531270749    -1.492009176598055
    C                0.922086476183943    -0.248414468729251     1.697532823401945
    C                1.869086476183943    -0.965414468729251     0.728532823401945
    H                1.413086476183943    -0.096414468729251     2.661532823401945
    H                0.646086476183943     0.726585531270749     1.295532823401945
    H                0.007086476183943    -0.825414468729251     1.842532823401945
    H                1.309086476183943    -1.263414468729251    -0.154467176598055
    H                2.300056476183943    -1.858134468729250     1.205312823401945
    H                2.672746476183943    -0.282514468729250     0.415832823401945

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-033LEU-053VAL-1-dimer.npy', np.array(charges))