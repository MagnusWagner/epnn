import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.273817653090019     1.786853087932419    -0.744022456619341
    C               -1.221817653090019     2.448853087932420    -1.734022456619341
    H               -0.183817653090019     2.386853087932419     0.160977543380659
    H               -0.663817653090019     0.809853087932419    -0.472022456619341
    H                0.708182346909981     1.648853087932419    -1.196022456619341
    H               -2.144817653090019     2.719853087932420    -1.221022456619341
    H               -1.474817653090019     1.700853087932420    -2.481022456619340
    H               -0.797479653090019     3.336235087932419    -2.226455456619341
    C                0.740182346909981    -1.392146912067580     0.997977543380659
    C                0.761182346909981    -2.838146912067581     1.473977543380659
    H                0.004182346909981    -1.269146912067580     0.204977543380659
    H                0.479182346909981    -0.730146912067581     1.820977543380659
    H                1.725182346909981    -1.107146912067580     0.625977543380659
    H               -0.249817653090019    -3.133146912067581     1.761977543380659
    H                1.376182346909981    -2.882146912067581     2.365977543380660
    H                1.153437346909981    -3.545209912067581     0.728190543380659

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-249ILE-276ILE-1-dimer.npy', np.array(charges))