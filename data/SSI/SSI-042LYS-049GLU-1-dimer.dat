import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.495994797175917     2.917516862763581    -0.315687294721581
    N                0.243005202824083     1.850516862763582    -1.041687294721581
    H                1.246005202824083     1.972516862763581    -0.979687294721581
    H                0.016005202824083     0.938516862763582    -0.635687294721581
    H               -0.018994797175917     1.811516862763582    -2.017687294721580
    H               -0.147994797175917     2.992516862763582     0.719312705278419
    H               -1.561994797175917     2.671516862763582    -0.300687294721581
    H               -0.371994797175917     3.888496862763581    -0.817496294721581
    C               -0.264994797175917    -2.617483137236419     0.781312705278419
    C                0.067005202824083    -1.200483137236418     0.353312705278419
    O               -0.828994797175917    -0.477483137236418    -0.136687294721581
    O                1.245005202824083    -0.803483137236418     0.508312705278419
    H                0.402005202824083    -2.861483137236418     1.613312705278420
    H               -0.000994797175917    -3.360483137236418     0.043312705278419
    H               -1.277674797175917    -2.713483137236418     1.199954705278419

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-042LYS-049GLU-1-dimer.npy', np.array(charges))