import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.354986578922775    -1.217771405441648     2.992521350088127
    C                0.594986578922775    -1.600771405441648     1.561521350088127
    O                0.822986578922775    -0.765771405441648     0.688521350088127
    N                0.449986578922775    -2.886771405441648     1.289521350088127
    H                1.061986578922775    -1.744771405441647     3.632521350088127
    H               -0.640013421077225    -1.575771405441648     3.264521350088127
    H                0.592986578922775    -3.192771405441648     0.338521350088127
    H                0.239986578922775    -3.550771405441648     2.021521350088126
    H                0.379776578922775    -0.135561405441648     3.187961350088127
    C                0.757986578922775     1.283228594558352    -2.126478649911873
    C               -0.613013421077225     1.696228594558352    -1.639478649911873
    O               -1.240013421077225     2.541228594558352    -2.258478649911873
    N               -1.085013421077225     1.082228594558353    -0.561478649911873
    H               -1.995013421077225     1.331228594558352    -0.208478649911873
    H               -0.513013421077225     0.377228594558352    -0.103478649911873
    H                0.611986578922775     0.495228594558352    -2.864478649911873
    H                1.320986578922775     0.869228594558352    -1.290478649911873
    H                1.344796578922775     2.105908594558353    -2.561048649911873

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-012GLN-034GLN-1-dimer.npy', np.array(charges))