import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                0.256400778588175    -1.298606014600868     2.581393074391956
    C               -0.539599221411825    -1.674606014600867     3.833393074391956
    H               -0.333599221411825    -1.481606014600867     1.686393074391956
    H                0.513400778588175    -0.240606014600867     2.632393074391956
    H                1.177400778588175    -1.880606014600868     2.535393074391956
    H                0.050400778588175    -1.371606014600868     4.698393074391957
    H               -0.688499221411825    -2.763426014600867     3.881353074391956
    H               -1.497639221411825    -1.135396014600867     3.870883074391956
    C                0.187400778588175     1.006393985399133    -0.329606925608044
    C               -1.287599221411825     1.304393985399132    -0.012606925608044
    C                0.407400778588175     0.413393985399133    -1.717606925608044
    O               -0.585599221411825     0.147393985399133    -2.433606925608044
    O                1.590400778588175     0.196393985399133    -2.081606925608043
    H                0.778400778588175     1.917393985399132    -0.223606925608044
    H                0.567400778588175     0.295393985399133     0.399393074391956
    H               -1.328599221411825     1.582393985399132     1.041393074391956
    H               -1.909519221411825     0.407233985399133    -0.147969925608044
    H               -1.655059221411825     2.179823985399133    -0.568123925608044

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-121VAL-157ASP-1-dimer.npy', np.array(charges))