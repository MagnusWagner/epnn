import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.584562784268934     1.510396065842381    -0.446587200203101
    C               -0.797562784268934     2.966396065842381    -0.853587200203101
    H                0.207437215731066     1.051396065842382    -1.035587200203101
    H               -0.304562784268934     1.454396065842382     0.606412799796899
    H               -1.506562784268934     0.943396065842382    -0.587587200203101
    H               -1.536562784268934     3.382396065842381    -0.168587200203101
    H               -1.209552784268933     3.010356065842382    -1.872577200203101
    H                0.139017215731066     3.534956065842382    -0.755827200203101
    C                0.947437215731066    -1.897603934157619     0.016412799796899
    C                0.436437215731066    -2.575603934157618     1.280412799796899
    H                1.767437215731067    -1.221603934157619     0.260412799796899
    H                1.311437215731066    -2.651603934157619    -0.683587200203101
    H                0.143437215731066    -1.333603934157619    -0.457587200203101
    H                1.240437215731067    -3.192603934157618     1.680412799796899
    H                0.153617215731066    -1.805893934157619     2.013602799796899
    H               -0.426402784268934    -3.214263934157619     1.040372799796899

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-082ILE-121LEU-1-dimer.npy', np.array(charges))