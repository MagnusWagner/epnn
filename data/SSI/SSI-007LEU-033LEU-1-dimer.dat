import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.781999779105964    -0.201458645520057    -0.063203718235070
    C               -3.179999779105965    -0.728458645520057    -0.377203718235070
    H               -1.809999779105964     0.417541354479943     0.833796281764930
    H               -1.105999779105964    -1.041458645520057     0.099796281764930
    H               -1.413999779105964     0.385541354479943    -0.905203718235070
    H               -3.115999779105964    -1.350458645520057    -1.265203718235070
    H               -3.880879779105964     0.102271354479943    -0.546505718235070
    H               -3.550679779105964    -1.360188645520057     0.443474281764930
    C                1.862000220894036     0.219541354479943    -0.147203718235070
    C                3.101000220894035     0.715541354479943     0.585796281764930
    H                1.968000220894036     0.380541354479943    -1.221203718235070
    H                1.724000220894036    -0.840458645520057     0.058796281764930
    H                0.984000220894036     0.756541354479943     0.212796281764930
    H                2.978000220894036     0.502541354479943     1.645796281764930
    H                3.215490220894035     1.799591354479943     0.438394281764930
    H                3.996150220894036     0.186491354479943     0.226876281764930

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-007LEU-033LEU-1-dimer.npy', np.array(charges))