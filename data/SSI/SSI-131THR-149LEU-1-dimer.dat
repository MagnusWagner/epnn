import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.553871809465200     0.832279261770057    -0.467352858886995
    C                3.036871809465200     0.885279261770057    -0.861352858886995
    H                1.412871809465200     0.143279261770057     0.365647141113005
    H                1.223871809465200     1.825279261770057    -0.162352858886995
    H                0.943871809465200     0.510279261770057    -1.310352858886995
    H                3.149871809465200     1.515279261770057    -1.744352858886995
    H                3.435851809465200    -0.120780738229943    -1.057971858886995
    H                3.590861809465200     1.324756261770057    -0.018762858886995
    C               -1.673128190534801    -0.442720738229943     0.503647141113005
    C               -2.916128190534800    -1.281720738229943     0.817647141113005
    H               -1.963128190534801     0.489279261770057     0.017647141113005
    H               -1.149128190534800    -0.206720738229943     1.428647141113005
    H               -1.003128190534801    -0.997720738229943    -0.150352858886995
    H               -3.520128190534800    -0.708720738229943     1.520647141113005
    H               -3.501108190534800    -1.460005738229943    -0.096692858886995
    H               -2.638288190534800    -2.232249738229943     1.296497141113005

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-131THR-149LEU-1-dimer.npy', np.array(charges))