import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.404704470517663     1.071364024455435    -0.904424371674706
    C                2.767704470517664     0.821364024455435    -0.262424371674706
    H                1.085704470517663     0.193364024455435    -1.468424371674706
    H                0.682704470517663     1.285364024455435    -0.117424371674706
    H                1.432704470517663     1.941364024455435    -1.559424371674706
    H                3.055704470517663     1.718364024455435     0.283575628325294
    H                3.540237470517663     0.570523024455435    -1.004224371674706
    H                2.688973470517663    -0.013894975544565     0.449015628325294
    C               -1.666295529482337    -0.330635975544565     0.743575628325294
    C               -2.499295529482337    -1.567635975544565     0.426575628325294
    H               -0.993295529482337    -0.515635975544565     1.582575628325294
    H               -1.087295529482337    -0.071635975544565    -0.140424371674706
    H               -2.305295529482337     0.522364024455435     0.975575628325294
    H               -3.251295529482336    -1.261635975544565    -0.303424371674706
    H               -3.032435529482337    -1.945784975544565     1.311315628325294
    H               -1.897590529482337    -2.356744975544565    -0.048034371674706

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-023VAL-041ILE-1-dimer.npy', np.array(charges))