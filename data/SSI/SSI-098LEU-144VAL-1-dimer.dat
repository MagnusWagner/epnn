import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.091771671263133    -2.010578389299106     0.476091499283775
    C                1.523771671263133    -2.092578389299106     0.996091499283775
    H                0.090771671263133    -1.630578389299106    -0.539908500716225
    H               -0.367228328736867    -2.997578389299106     0.479091499283775
    H               -0.502228328736867    -1.345578389299106     1.102091499283775
    H                2.090771671263133    -2.787578389299106     0.377091499283775
    H                1.982251671263133    -1.093838389299106     0.948021499283775
    H                1.490381671263133    -2.473618389299106     2.027441499283775
    C               -0.302228328736868     1.485421610700894    -0.635908500716225
    C               -1.306228328736867     2.622421610700894    -0.830908500716225
    H                0.145771671263133     1.552421610700894     0.355091499283775
    H               -0.821228328736868     0.532421610700894    -0.731908500716225
    H                0.477771671263133     1.518421610700894    -1.396908500716225
    H               -1.689228328736867     2.552421610700894    -1.848908500716225
    H               -0.824818328736867     3.601791610700894    -0.692748500716225
    H               -2.157368328736867     2.515491610700893    -0.142338500716225

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-098LEU-144VAL-1-dimer.npy', np.array(charges))