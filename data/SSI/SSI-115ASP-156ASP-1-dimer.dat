import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -2 1
    --
    -2 1
    C                0.828114758017964    -3.109278430841744    -1.555529097906482
    C                0.138114758017964    -1.758278430841744    -1.620529097906483
    O                0.656114758017964    -0.834278430841744    -0.974529097906482
    O               -0.920885241982036    -1.628278430841744    -2.272529097906482
    H                0.639114758017964    -3.508278430841744    -0.557529097906483
    H                1.904114758017964    -3.013278430841744    -1.656529097906482
    H                0.443582758017964    -3.827118430841744    -2.295014097906483
    C                0.392114758017964     0.616721569158256     1.638470902093518
    C                0.583114758017964     1.027721569158256     3.103470902093518
    C               -0.360885241982036     1.641721569158256     0.800470902093517
    O               -0.600885241982036     2.772721569158256     1.276470902093517
    O               -0.713885241982036     1.312721569158256    -0.352529097906483
    H                1.373114758017964     0.486721569158256     1.190470902093518
    H               -0.129885241982036    -0.342278430841744     1.617470902093517
    H                1.311114758017964     0.320721569158256     3.486470902093518
    H               -0.353211241982036     0.946501569158256     3.675043902093517
    H                1.060894758017964     2.009991569158255     3.233380902093518

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-115ASP-156ASP-1-dimer.npy', np.array(charges))