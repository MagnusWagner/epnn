import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.841734872232579     0.200053130389046    -2.361181152837064
    N               -0.938734872232579    -0.936946869610954    -2.029181152837065
    H               -1.449734872232579    -1.684946869610955    -1.576181152837064
    H               -0.497734872232579    -1.326946869610954    -2.853181152837064
    H               -0.205734872232579    -0.659946869610955    -1.369181152837065
    H               -2.715734872232578    -0.166946869610954    -2.911181152837064
    H               -1.317734872232579     0.913053130389046    -3.004181152837064
    H               -2.181874872232579     0.734253130389045    -1.461771152837064
    C                1.748265127767421     1.226053130389046     1.424818847162935
    C                0.687265127767421     0.150053130389046     1.181818847162936
    O                0.724265127767421    -0.468946869610954     0.087818847162936
    O               -0.200734872232579    -0.035946869610954     2.054818847162936
    H                2.459265127767421     1.224053130389046     0.596818847162936
    H                2.301265127767421     1.017053130389046     2.342818847162936
    H                1.272105127767421     2.214613130389045     1.502368847162936

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-141LYS-144GLU-1-dimer.npy', np.array(charges))