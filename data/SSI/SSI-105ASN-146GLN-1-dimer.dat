import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -2.124186341134586    -0.903474505767138    -2.560774439201680
    C               -1.928186341134586    -0.726474505767137    -1.064774439201680
    O               -1.198186341134586     0.155525494232863    -0.624774439201680
    N               -2.566186341134585    -1.572474505767137    -0.272774439201680
    H               -3.171186341134585    -1.138474505767137    -2.758774439201680
    H               -1.522186341134586    -1.758474505767137    -2.871774439201680
    H               -2.435186341134585    -1.484474505767137     0.724225560798320
    H               -3.140186341134586    -2.306474505767137    -0.659774439201680
    H               -1.825006341134586    -0.015954505767137    -3.137664439201680
    C                1.917813658865414     1.837525494232863     0.120225560798320
    C                1.914813658865414     0.730525494232863     1.164225560798320
    O                0.860813658865414     0.286525494232863     1.616225560798320
    N                3.094813658865415     0.279525494232863     1.562225560798320
    H                1.047813658865414     1.673525494232863    -0.512774439201680
    H                2.780813658865414     1.754525494232863    -0.535774439201680
    H                3.129813658865414    -0.463474505767137     2.246225560798320
    H                3.941813658865415     0.676525494232862     1.172225560798320
    H                1.819383658865414     2.841947494232862     0.557775560798320

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-105ASN-146GLN-1-dimer.npy', np.array(charges))