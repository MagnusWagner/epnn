import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.298884273070539     1.003701364571535    -0.814361632440046
    C               -2.755884273070539     1.447701364571535    -1.014361632440046
    H               -1.013884273070538     0.300701364571535    -1.595361632440046
    H               -0.644884273070539     1.874701364571535    -0.866361632440046
    H               -1.172884273070538     0.527701364571535     0.156638367559954
    H               -2.957884273070539     2.253701364571535    -0.309361632440046
    H               -3.417394273070539     0.598521364571535    -0.787866632440046
    H               -2.887394273070538     1.834381364571535    -2.035726632440046
    C                1.360115726929461    -0.848298635428465     0.922638367559954
    C                2.692115726929461    -1.603298635428466     0.903638367559954
    H                1.395115726929461     0.017701364571535     0.265638367559954
    H                0.558115726929462    -1.506298635428465     0.590638367559954
    H                1.144115726929462    -0.513298635428465     1.934638367559954
    H                2.851115726929461    -1.994298635428465    -0.102361632440046
    H                3.524975726929461    -0.938738635428465     1.176943367559954
    H                2.651095726929461    -2.452458635428465     1.601673367559954

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-060LEU-098VAL-1-dimer.npy', np.array(charges))