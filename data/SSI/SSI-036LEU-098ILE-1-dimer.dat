import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.173745994174951    -1.401142543966527    -0.983207694119600
    C                0.867745994174951    -2.723142543966527    -1.296207694119600
    H                0.872745994174951    -0.734142543966527    -0.483207694119600
    H               -0.184254005825049    -0.930142543966527    -1.895207694119600
    H               -0.685254005825049    -1.577142543966527    -0.336207694119600
    H                1.767745994174951    -2.499142543966527    -1.869207694119600
    H                1.165911994174951    -3.223202543966527    -0.362912294119600
    H                0.217954994174951    -3.348192543966527    -1.926352694119600
    C               -0.792254005825049     1.391857456033473     1.400792305880400
    C               -0.254254005825049     2.728857456033473     0.875792305880400
    H               -1.427254005825049     0.919857456033473     0.649792305880400
    H                0.032745994174951     0.720857456033473     1.637792305880400
    H               -1.360254005825049     1.532857456033473     2.320792305880400
    H                0.317745994174951     3.181857456033473     1.684792305880400
    H               -1.069185005825049     3.415007456033473     0.601763305880400
    H                0.411074994174951     2.584037456033473     0.011868805880400

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-036LEU-098ILE-1-dimer.npy', np.array(charges))