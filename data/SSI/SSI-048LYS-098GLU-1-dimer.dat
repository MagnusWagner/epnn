import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -2.164409221879959    -1.831234898266716    -1.633240891129401
    N               -2.169409221879959    -0.826234898266716    -0.539240891129402
    H               -1.218409221879959    -0.547234898266716    -0.280240891129402
    H               -2.603409221879959     0.032765101733284    -0.853240891129402
    H               -2.671409221879959    -1.139234898266716     0.280759108870598
    H               -1.277409221879959    -1.712234898266716    -2.261240891129401
    H               -3.044409221879959    -1.690234898266716    -2.269240891129401
    H               -2.207071221879959    -2.849328898266716    -1.218917091129401
    C                2.490590778120041     0.598765101733284     0.026759108870598
    C                1.102590778120041     0.702765101733284     0.612759108870598
    O                0.144590778120041     0.615765101733284    -0.184240891129402
    O                0.967590778120041     0.895765101733284     1.842759108870598
    H                2.569590778120041     1.266765101733284    -0.834240891129402
    H                2.658590778120041    -0.426234898266716    -0.314240891129402
    H                3.273191578120041     0.862992101733284     0.753203108870598

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-048LYS-098GLU-1-dimer.npy', np.array(charges))