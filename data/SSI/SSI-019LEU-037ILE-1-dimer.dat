import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.379028281378159     0.031503987858146    -1.850327528708160
    C                1.019028281378159     0.527503987858146    -3.157327528708159
    H                0.112028281378159     0.868503987858146    -1.207327528708160
    H                1.066028281378159    -0.632496012141854    -1.323327528708160
    H               -0.534971718621841    -0.517496012141854    -2.079327528708160
    H                0.362028281378159     1.269503987858146    -3.608327528708160
    H                2.000878281378159     0.986130987858146    -2.968565528708159
    H                1.123308281378159    -0.303866112141854    -3.870033528708159
    C               -0.259971718621841    -0.105496012141854     1.898672471291840
    C               -1.135971718621841    -0.449496012141854     3.109672471291841
    H               -0.617971718621841    -0.608496012141854     1.000672471291841
    H                0.763028281378159    -0.446496012141854     2.060672471291841
    H               -0.251971718621841     0.970503987858146     1.740672471291841
    H               -1.153971718621841    -1.535496012141854     3.209672471291841
    H               -2.167751718621842    -0.083149012141854     3.003772471291841
    H               -0.725821718621841    -0.014965012141854     4.033232471291840

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-019LEU-037ILE-1-dimer.npy', np.array(charges))