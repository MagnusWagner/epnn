import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.167866691914312     1.386005253948234     1.698152060440970
    C               -0.648866691914311     2.482005253948234     2.645152060440970
    H                0.923133308085688     1.356005253948234     1.675152060440970
    H               -0.552866691914311     0.423005253948234     2.038152060440970
    H               -0.537866691914311     1.580005253948234     0.689152060440970
    H               -0.327866691914312     2.213005253948234     3.646152060440970
    H               -0.211176691914312     3.445505253948234     2.345002060440970
    H               -1.746776691914311     2.548153253948234     2.630052060440970
    C               -0.744866691914312    -1.848994746051766    -0.427847939559030
    C                0.216133308085688    -0.942994746051766    -1.175847939559030
    O               -0.023866691914312    -0.570994746051766    -2.320847939559031
    N                1.323133308085688    -0.592994746051766    -0.537847939559030
    H               -1.722866691914312    -1.800994746051766    -0.910847939559030
    H               -0.863866691914312    -1.491994746051766     0.595152060440970
    H                1.938133308085688     0.057005253948234    -1.002847939559030
    H                1.520133308085689    -0.945994746051766     0.386152060440970
    H               -0.403166691914312    -2.894320746051766    -0.404727939559030

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-058LEU-094GLN-1-dimer.npy', np.array(charges))