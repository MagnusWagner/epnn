import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.671962215771393     0.573647112849569     1.175746584495469
    C               -0.966962215771393     0.898647112849569     2.485746584495469
    H               -2.643962215771393     1.062647112849570     1.109746584495469
    H               -1.069962215771393     0.942647112849569     0.344746584495469
    H               -1.790962215771393    -0.503352887150431     1.067746584495469
    H               -0.888962215771393     1.983647112849569     2.548746584495469
    H               -1.561573215771393     0.561207112849569     3.347471584495469
    H                0.059976784228607     0.504447112849569     2.484305584495469
    C                0.856037784228607    -0.493352887150431    -1.275253415504531
    C                1.777037784228607    -0.990352887150431    -2.384253415504531
    H               -0.187962215771393    -0.679352887150431    -1.532253415504531
    H                1.095037784228607    -0.997352887150431    -0.340253415504531
    H                0.998037784228607     0.578647112849569    -1.131253415504531
    H                2.806037784228606    -0.931352887150431    -2.021253415504531
    H                1.680857784228607    -0.343592887150431    -3.268815415504531
    H                1.573077784228607    -2.042362887150431    -2.632585415504531

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-010VAL-027ALA-1-dimer.npy', np.array(charges))