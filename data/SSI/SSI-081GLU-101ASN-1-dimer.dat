import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                2.185405628689591     0.464478999711326    -1.779078759986412
    C                1.112405628689591     1.472478999711326    -1.352078759986412
    O                0.647405628689591     1.434478999711326    -0.191078759986412
    O                0.688405628689591     2.295478999711326    -2.186078759986412
    H                2.783405628689591     0.894478999711326    -2.583078759986412
    H                1.701405628689591    -0.433521000288674    -2.166078759986412
    H                2.868885628689591     0.170222999711326    -0.968978759986412
    C                0.141405628689591    -1.222521000288674     1.987921240013588
    C               -1.207594371310409    -1.375521000288674     1.331921240013588
    O               -1.634594371310409    -0.539521000288674     0.542921240013588
    N               -1.893594371310409    -2.455521000288674     1.637921240013588
    H                0.492405628689591    -0.207521000288674     1.840921240013588
    H                0.830405628689591    -1.877521000288674     1.461921240013588
    H               -2.799594371310409    -2.567521000288674     1.203921240013588
    H               -1.520594371310409    -3.145521000288674     2.259921240013588
    H                0.124301928689591    -1.478364600288674     3.057621240013588

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-081GLU-101ASN-1-dimer.npy', np.array(charges))