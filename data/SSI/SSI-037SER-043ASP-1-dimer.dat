import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                0.542140768773611    -1.377490310225220    -1.267389284974356
    C                0.478140768773611    -2.907490310225220    -1.107389284974357
    O                1.775140768773611    -0.966490310225220    -1.875389284974356
    H               -0.292859231226389    -1.050490310225220    -1.889389284974357
    H                0.452140768773611    -0.903490310225220    -0.291389284974356
    H                0.539140768773611    -3.369490310225220    -2.092389284974356
    H                1.696140768773611    -0.030490310225220    -2.116389284974356
    H               -0.470099231226389    -3.170639310225221    -0.615875284974356
    H                1.329200768773611    -3.227649310225220    -0.488366984974356
    C               -0.498859231226389     0.425509689774780     2.212610715025644
    C               -0.781859231226389     1.377509689774780     1.056610715025644
    O               -1.926859231226389     1.662509689774780     0.680610715025644
    O                0.219140768773611     1.869509689774780     0.522610715025643
    H                0.130140768773611     0.944509689774780     2.938610715025644
    H                0.054140768773611    -0.438490310225220     1.843610715025644
    H               -1.407009231226389     0.081709689774780     2.729391715025644

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-037SER-043ASP-1-dimer.npy', np.array(charges))