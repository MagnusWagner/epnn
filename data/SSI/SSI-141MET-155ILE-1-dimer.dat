import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.138943246725871     1.373170665600578     0.995699810853192
    C               -1.570943246725871     0.201170665600578    -1.027300189146808
    S               -0.792943246725871     1.790170665600578    -0.616300189146808
    H                0.604056753274129     0.584170665600578     0.902699810853192
    H                0.350056753274129     2.253170665600578     1.414699810853192
    H               -0.932943246725871     1.066170665600578     1.674699810853192
    H               -0.813943246725871    -0.583829334399422    -1.035300189146808
    H               -1.973943246725871     0.277170665600578    -2.033300189146809
    H               -2.368663246725871    -0.071859334399422    -0.320831189146808
    C                1.586056753274129    -1.977829334399422     0.284699810853192
    C                1.813056753274129    -3.329829334399422     1.008699810853192
    H                1.559056753274129    -2.120829334399422    -0.796300189146808
    H                0.628056753274129    -1.569829334399422     0.605699810853192
    H                2.366056753274129    -1.258829334399422     0.536699810853192
    H                1.974056753274129    -3.137829334399422     2.068699810853192
    H                2.715766753274129    -3.790149334399422     0.580648810853192
    H                0.934246753274129    -3.986629334399422     0.929259810853192

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-141MET-155ILE-1-dimer.npy', np.array(charges))