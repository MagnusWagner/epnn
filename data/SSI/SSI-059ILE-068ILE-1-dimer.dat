import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.301523866578707    -1.827173731041676     0.072471509220404
    C                1.667523866578706    -1.172173731041676     1.420471509220404
    H                2.129523866578707    -2.424173731041676    -0.300528490779596
    H                0.440523866578707    -2.480173731041676     0.218471509220404
    H                1.031523866578707    -1.075173731041676    -0.664528490779596
    H                1.782523866578707    -1.977173731041675     2.147471509220404
    H                0.836523866578706    -0.546173731041676     1.748471509220404
    H                2.591497866578707    -0.575396731041676     1.409090509220404
    C               -1.029476133421294     0.880826268958324    -0.635528490779596
    C               -1.939476133421294     2.128826268958324    -0.856528490779596
    H               -1.125476133421293     0.505826268958324     0.380471509220404
    H               -1.247476133421294     0.086826268958324    -1.350528490779596
    H                0.005523866578707     1.174826268958324    -0.798528490779596
    H               -1.878476133421293     2.380826268958324    -1.914528490779596
    H               -1.597039233421293     2.986326268958324    -0.258667490779596
    H               -2.970310133421294     1.820933268958324    -0.627216490779596

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-059ILE-068ILE-1-dimer.npy', np.array(charges))