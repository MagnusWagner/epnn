import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.886609078037712    -0.546810093259987     2.174553904110788
    C                1.773609078037712     0.639189906740013     2.561553904110788
    H                0.717609078037712    -1.191810093259987     3.035553904110788
    H               -0.079390921962288    -0.176810093259987     1.835553904110788
    H                1.357609078037712    -1.121810093259987     1.377553904110788
    H                1.278609078037712     1.208189906740013     3.344553904110788
    H                2.752979078037712     0.266779906740013     2.896430904110788
    H                1.944139078037712     1.292029906740013     1.692807904110788
    C               -0.572390921962288    -0.019810093259987    -1.107446095889212
    C               -0.054390921962288     0.322189906740013    -2.500446095889212
    C               -2.059390921962288    -0.401810093259987    -1.190446095889212
    H                0.006609078037712    -0.843810093259987    -0.691446095889212
    H               -0.475390921962288     0.848189906740013    -0.453446095889212
    H               -0.791390921962288     0.966189906740013    -2.987446095889212
    H               -2.633390921962288     0.503189906740013    -1.394446095889212
    H               -2.206390921962287    -1.072810093259987    -2.037446095889212
    H                0.056089078037712    -0.602970093259987    -3.085151095889212
    H                0.876019078037712     0.908669906740013    -2.480897095889212
    H               -2.494670921962288    -0.899270093259987    -0.311208095889212

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-019LEU-061ARG-1-dimer.npy', np.array(charges))