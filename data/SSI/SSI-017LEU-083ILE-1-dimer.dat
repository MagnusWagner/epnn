import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.178262144491369    -1.035679227066164     0.321267593076494
    C               -2.618262144491368    -1.598679227066164     0.410267593076494
    H               -1.043262144491369    -0.486679227066164    -0.607732406923505
    H               -1.009262144491369    -0.358679227066164     1.157267593076494
    H               -0.442262144491368    -1.833679227066164     0.372267593076494
    H               -2.756262144491368    -2.101679227066164     1.367267593076495
    H               -2.832292144491368    -2.295729227066164    -0.413322406923506
    H               -3.322262144491368    -0.755029227066164     0.358897593076494
    C                1.301737855508631     1.721320772933836    -0.224732406923506
    C                2.499737855508632     0.913320772933836    -0.500732406923506
    H                1.558737855508632     2.777320772933836    -0.150732406923506
    H                0.593737855508631     1.593320772933836    -1.042732406923506
    H                0.836737855508631     1.394320772933836     0.706267593076494
    H                2.958737855508632     1.278320772933836    -1.421732406923506
    H                2.137737855508631    -0.097679227066164    -0.690732406923506
    H                3.260957855508632     0.882500772933836     0.292737593076494

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-017LEU-083ILE-1-dimer.npy', np.array(charges))