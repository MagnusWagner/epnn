import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.619557625825978     1.102820168577645    -2.455605008309168
    N               -0.470442374174022     0.253820168577645    -1.891605008309168
    H               -1.103442374174022    -0.099179831422355    -2.595605008309168
    H               -0.067442374174022    -0.523179831422355    -1.375605008309168
    H               -0.996442374174022     0.731820168577645    -1.162605008309168
    H                1.211557625825978     0.505820168577645    -3.156605008309168
    H                1.292557625825978     1.385820168577645    -1.639605008309168
    H                0.318597625825978     2.027080168577645    -2.970545008309168
    C               -0.055442374174022    -0.516179831422355     2.605394991690832
    C               -0.014442374174022    -0.340179831422355     1.089394991690832
    O                1.043557625825978    -0.562179831422355     0.459394991690832
    O               -1.067442374174022     0.006820168577645     0.515394991690832
    H               -0.701442374174022    -1.366179831422355     2.830394991690832
    H               -0.508442374174022     0.370820168577645     3.051394991690832
    H                0.925197625825978    -0.680089831422355     3.076014991690831

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-014LYS-023GLU-1-dimer.npy', np.array(charges))