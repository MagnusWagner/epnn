import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.513056839364792    -0.357037805654584     2.089431517012360
    C               -1.353056839364792     0.954962194345417     1.818431517012360
    O               -0.688056839364792    -1.380037805654584     1.102431517012360
    H                0.542943160635208    -0.096037805654584     2.163431517012360
    H               -0.809056839364792    -0.760037805654584     3.059431517012360
    H               -1.085056839364792     1.341962194345416     0.838431517012360
    H               -0.162056839364792    -2.145037805654583     1.384431517012360
    H               -1.156286839364792     1.707132194345416     2.596591517012360
    H               -2.428166839364792     0.723072194345416     1.837331517012360
    C                1.126943160635208     1.052962194345416    -2.354568482987640
    C                0.649943160635208     0.241962194345416    -1.217568482987640
    O                1.287943160635208     0.253962194345416    -0.153568482987640
    N               -0.398056839364792    -0.542037805654583    -1.438568482987640
    H                0.326943160635208     1.205962194345416    -3.079568482987640
    H                1.905943160635208     0.483962194346416    -2.862568482987640
    H               -0.737056839364792    -1.064037805654584    -0.640568482987640
    H               -0.876056839364792    -0.551037805654583    -2.322568482987641
    H                1.550433160635208     2.019172194345416    -2.042978482987640

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-014SER-084GLN-1-dimer.npy', np.array(charges))