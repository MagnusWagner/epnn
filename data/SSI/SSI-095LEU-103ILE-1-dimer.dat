import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.793970781860037     1.820420288677889     0.836076025079092
    C               -2.164970781860037     1.284420288677889     1.267076025079092
    H               -0.001970781860037     1.187420288677889     1.237076025079092
    H               -0.739970781860037     1.827420288677889    -0.252923974920908
    H               -0.658970781860037     2.839420288677889     1.204076025079092
    H               -2.942970781860037     1.937420288677889     0.902076025079092
    H               -2.198790781860037     1.247719288677889     2.365946025079092
    H               -2.354140781860037     0.286758288677889     0.844126025079092
    C                0.916029218139963    -1.041579711322111    -1.037923974920908
    C                2.050029218139963    -2.057579711322111    -1.063923974920908
    H                1.025029218139963    -0.310579711322111    -1.837923974920908
    H               -0.032970781860037    -1.560579711322111    -1.175923974920908
    H                0.901029218139963    -0.534579711322111    -0.073923974920908
    H                2.098029218139964    -2.505579711322111    -2.057923974920908
    H                1.789029218139963    -2.848579711322111    -0.363923974920908
    H                3.031929218139964    -1.633904711322111    -0.806283974920908

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-095LEU-103ILE-1-dimer.npy', np.array(charges))