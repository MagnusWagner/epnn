import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.692906963186399     0.010905376565258    -1.770610691113596
    S                0.408093036813601    -1.387094623434743    -1.629610691113596
    H               -1.120906963186399     0.043905376565258    -2.773610691113596
    H               -1.501906963186399    -0.083094623434742    -1.046610691113596
    H               -0.146906963186399     0.934905376565258    -1.584610691113595
    C                0.558493036813601    -2.840434623434742    -0.612100691113596
    H                1.415683036813601    -3.402964623434743    -0.918190691113596
    H               -0.330496963186399    -3.467564623434742    -0.714780691113596
    H                0.678463036813601    -2.556224623434742     0.436319308886404
    C               -0.149906963186399     0.693905376565258     2.701389308886405
    C               -0.128906963186399     1.491905376565257     1.418389308886404
    O                0.883093036813601     1.539905376565257     0.719389308886405
    N               -1.246906963186399     2.121905376565258     1.092389308886405
    H               -0.897906963186399     1.093905376565257     3.388389308886404
    H                0.826093036813601     0.839905376565258     3.169389308886404
    H               -1.256906963186399     2.685905376565257     0.256389308886404
    H               -2.070906963186399     2.038905376565258     1.675389308886404
    H               -0.310706963186399    -0.380894623434742     2.531189308886404

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-123MET-140ASN-1-dimer.npy', np.array(charges))