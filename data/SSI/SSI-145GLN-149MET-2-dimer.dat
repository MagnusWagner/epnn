import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.992378716297905     0.124200343740143     2.398874849349959
    C               -1.857378716297905     0.277200343740143     0.899874849349960
    O               -1.653378716297905    -0.701799656259857     0.201874849349960
    N               -1.963378716297905     1.500200343740143     0.393874849349960
    H               -1.760378716297905    -0.901799656259857     2.677874849349960
    H               -3.030378716297905     0.320200343740143     2.670874849349959
    H               -1.905378716297905     1.610200343740143    -0.608125150650040
    H               -2.180378716297905     2.289200343740143     0.983874849349960
    H               -1.351132616297905     0.830596343740143     2.946424849349960
    C                0.566621283702095    -1.126799656259857    -0.991125150650040
    C                2.103621283702095     1.022200343740143    -0.333125150650040
    S                2.231621283702095    -0.557799656259857    -1.181125150650040
    H               -0.091378716297905    -0.357799656259857    -1.390125150650040
    H                0.429621283702095    -2.047799656259857    -1.557125150650040
    H                0.453621283702095    -1.345799656259857     0.068874849349960
    H                2.444621283702095     0.932200343740143     0.692874849349960
    H                1.063621283702095     1.350200343740143    -0.330125150650040
    H                2.696437283702095     1.775940343740143    -0.872045150650041

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-145GLN-149MET-2-dimer.npy', np.array(charges))