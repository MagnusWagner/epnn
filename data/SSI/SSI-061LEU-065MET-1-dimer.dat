import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -2.595696685506972     0.053636768861525     1.250186522087530
    C               -2.651696685506972    -0.442363231138475     2.686186522087529
    H               -2.230696685506972    -0.742363231138475     0.601186522087530
    H               -3.594696685506972     0.342636768861525     0.931186522087530
    H               -1.947696685506972     0.927636768861525     1.175186522087530
    H               -3.121696685506972    -1.410363231138475     2.686186522087529
    H               -1.633446685506972    -0.537352231138475     3.091326522087530
    H               -3.265266685506972     0.230401768861525     3.303366522087530
    C               -0.029696685506972    -0.414363231138475    -1.479813477912470
    C                1.906303314493028     1.439636768861525    -0.814813477912470
    S                1.610303314493029    -0.331363231138475    -0.752813477912470
    H                0.009303314493028    -0.055363231138475    -2.508813477912470
    H               -0.376696685506972    -1.448363231138475    -1.469813477912470
    H               -0.724696685506972     0.202636768861525    -0.912813477912470
    H                1.664303314493028     1.803636768861525    -1.814813477912470
    H                2.966303314493028     1.622636768861525    -0.666813477912470
    H                1.305373314493028     1.997073768861525    -0.081233477912470

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-061LEU-065MET-1-dimer.npy', np.array(charges))