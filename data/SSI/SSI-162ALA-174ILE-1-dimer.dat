import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.458005428005019    -0.875334197755146     0.299959259826682
    C                1.875005428005019    -2.314334197755147     0.018959259826682
    H                1.469005428005019    -0.291334197755146    -0.622040740173318
    H                0.451005428005019    -0.857334197755146     0.720959259826682
    H                2.144005428005018    -0.425334197755146     1.018959259826682
    H                1.873005428005019    -2.857334197755146     0.964959259826682
    H                2.891145428005019    -2.344504197755146    -0.401224740173318
    H                1.149895428005019    -2.797984197755147    -0.652089740173318
    C               -1.020994571994981     1.982665802244854    -0.069040740173318
    C               -2.313994571994981     1.209665802244854    -0.263040740173318
    H               -1.169994571994981     3.037665802244854    -0.294040740173318
    H               -0.699994571994981     1.892665802244854     0.969959259826682
    H               -0.241994571994981     1.578665802244854    -0.716040740173318
    H               -3.094994571994981     1.662665802244854     0.348959259826682
    H               -2.108994571994981     0.216665802244854     0.130959259826682
    H               -2.638534571994982     1.153785802244854    -1.312589740173319

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-162ALA-174ILE-1-dimer.npy', np.array(charges))