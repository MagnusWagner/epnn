import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.671002702977971     0.724911633989670    -1.098168938391448
    C               -1.290002702977971     1.491911633989670    -2.261168938391448
    H                0.100997297022029     0.040911633989670    -1.453168938391448
    H               -0.220002702977971     1.425911633989670    -0.395168938391448
    H               -1.441002702977971     0.151911633989670    -0.579168938391448
    H               -2.004002702977972     2.208911633989670    -1.854168938391448
    H               -1.825311702977971     0.808281633989670    -2.936516938391448
    H               -0.526299702977971     2.065951633989670    -2.806361938391448
    C                0.907997297022029    -1.728088366010330     1.234831061608552
    C                1.051997297022029    -0.495088366010330     2.121831061608552
    H               -0.145002702977971    -1.930088366010330     1.033831061608552
    H                1.400997297022029    -1.545088366010330     0.279831061608552
    H                1.371997297022029    -2.594088366010330     1.711831061608552
    H                0.484997297022029     0.322911633989670     1.684831061608552
    H                0.703227297022029    -0.671278366010330     3.150091061608552
    H                2.111441297022029    -0.208598366010330     2.195999061608553

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-035ALA-065LEU-1-dimer.npy', np.array(charges))