import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.562668219650529     0.828001115026657    -0.316618639308870
    C               -2.786668219650529     0.862001115026657     0.600381360691130
    H               -1.348668219650530    -0.195998884973343    -0.620618639308870
    H               -1.751668219650530     1.438001115026657    -1.201618639308871
    H               -0.688668219650529     1.239001115026657     0.185381360691130
    H               -2.900668219650530     1.874001115026657     0.990381360691130
    H               -2.663268219650529     0.154416115026657     1.433501360691130
    H               -3.684338219650529     0.599462115026657     0.021361360691130
    C                2.131331780349470    -0.152998884973343    -0.450618639308870
    C                2.220331780349470    -1.539998884973343     0.171381360691130
    H                3.106331780349470     0.152001115026657    -0.832618639308870
    H                1.418331780349471    -0.168998884973343    -1.274618639308871
    H                1.788331780349470     0.567001115026657     0.292381360691130
    H                1.220331780349470    -1.842998884973343     0.472381360691130
    H                2.884621780349470    -1.514917884973343     1.047791360691130
    H                2.591621780349471    -2.265301884973343    -0.567588639308870

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-143VAL-147LEU-1-dimer.npy', np.array(charges))