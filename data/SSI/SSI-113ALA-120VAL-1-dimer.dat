import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                2.086442523935134     0.030942979152834     0.271034989713119
    C                1.967442523935134     0.318942979152834    -1.237965010286881
    H                3.126442523935134     0.129942979152834     0.584034989713120
    H                1.475442523935134     0.741942979152834     0.828034989713119
    H                1.741442523935134    -0.982057020847166     0.482034989713119
    H                0.921442523935134     0.222942979152834    -1.532965010286881
    H                2.564752523935134    -0.423357020847166    -1.787705010286881
    H                2.275392523935134     1.351642979152834    -1.458545010286881
    C               -1.685557476064866    -0.470057020847166    -0.134965010286881
    C               -2.363557476064866     0.119942979152834     1.104034989713119
    H               -2.004557476064866     0.071942979152834    -1.025965010286881
    H               -0.607557476064866    -0.386057020847166    -0.036965010286881
    H               -1.960557476064866    -1.520057020847166    -0.231965010286881
    H               -2.126557476064866     1.181942979152834     1.182034989713119
    H               -3.449768476064866     0.015242979152834     0.965564989713119
    H               -2.012713476064866    -0.401357020847166     2.006924989713120

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-113ALA-120VAL-1-dimer.npy', np.array(charges))