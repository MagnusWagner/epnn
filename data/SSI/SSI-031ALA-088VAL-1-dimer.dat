import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.888124093640295    -1.886693596800668     0.680199388485871
    C                0.474875906359705    -2.099693596800668     1.349199388485871
    H               -0.819124093640295    -1.146693596800668    -0.109800611514129
    H               -1.227124093640295    -2.823693596800668     0.236199388485871
    H               -1.636124093640295    -1.573693596800668     1.409199388485871
    H                0.447875906359705    -3.014693596800667     1.943199388485871
    H                0.733137906359705    -1.245383596800668     1.992204388485871
    H                1.275001906359705    -2.190283596800668     0.599805388485871
    C                0.222875906359705     1.272306403199332    -0.754800611514129
    C                0.181875906359705     2.715306403199332    -1.273800611514129
    H                0.500875906359705     0.589306403199332    -1.558800611514129
    H                0.963875906359705     1.198306403199332     0.041199388485871
    H               -0.755124093640295     1.009306403199332    -0.353800611514129
    H                1.200875906359705     2.981306403199332    -1.541800611514129
    H               -0.433041093640295     2.795446403199332    -2.182350611514129
    H               -0.149941093640295     3.406176403199332    -0.484750611514129

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-031ALA-088VAL-1-dimer.npy', np.array(charges))