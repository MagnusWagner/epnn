import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.539639069061975     0.463394953220814    -1.396342026863063
    C               -2.685639069061975     0.554394953220814    -0.395342026863063
    H               -0.676639069061975     1.015394953220814    -1.030342026863063
    H               -1.265639069061975    -0.580605046779186    -1.547342026863063
    H               -1.845639069061975     0.878394953220814    -2.354342026863063
    H               -3.565639069061975     0.073394953220814    -0.820342026863063
    H               -2.890013069061975     1.608534953220814    -0.156552026863063
    H               -2.438985069061975     0.003394953220814     0.524197973136937
    C                1.384360930938025    -0.316605046779186     0.975657973136937
    C                2.844360930938025    -0.699605046779186     0.819657973136937
    H                1.228360930938025     0.335394953220814     1.831657973136937
    H                1.067360930938025     0.213394953220814     0.080657973136937
    H                0.770360930938025    -1.209605046779186     1.098657973136937
    H                3.426360930938025     0.193394953220814     0.587657973136937
    H                3.205300930938025    -1.142735046779186     1.759527973136937
    H                2.943805930938025    -1.407165046779186    -0.016682026863063

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-009LEU-041VAL-2-dimer.npy', np.array(charges))