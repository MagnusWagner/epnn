import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.640791830898544     2.900048648156583    -0.195854788196608
    O                0.272208169101456     1.821048648156583    -0.223854788196608
    H                0.921208169101457     2.010048648156583    -0.913854788196608
    H               -0.156791830898544     3.780048648156583     0.230145211803392
    H               -1.485791830898544     2.624048648156583     0.437145211803392
    H               -1.004701830898544     3.134038648156583    -1.207194788196608
    C                0.511208169101456    -1.468951351843417    -0.169854788196608
    C               -0.932791830898544    -1.711951351843417    -0.593854788196608
    C                0.793208169101457    -1.946951351843417     1.244145211803392
    H                1.163208169101456    -2.033951351843417    -0.837854788196608
    H                0.747208169101456    -0.430951351843417    -0.290854788196608
    H               -1.583791830898543    -1.198951351843417     0.115145211803392
    H               -1.160791830898543    -2.773951351843416    -0.548854788196608
    H                0.200208169101456    -1.358951351843417     1.948145211803392
    H                0.517208169101456    -2.997951351843417     1.350145211803392
    H               -1.134351830898543    -1.300221351843417    -1.593774788196608
    H                1.861968169101456    -1.828521351843417     1.475945211803392

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-015SER-037LYS-1-dimer.npy', np.array(charges))