import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.596654593579170    -0.865821771032691    -1.189261379715267
    C                1.530654593579170    -2.224821771032691    -0.384261379715267
    H                0.680654593579170    -0.715821771032691    -1.760261379715267
    H                1.713654593579170    -0.026821771032691    -0.502261379715267
    H                2.437654593579170    -0.866821771032691    -1.875261379715267
    H                0.685654593579170    -2.196821771032691     0.304738620284733
    H                2.447654593579170    -2.352821771032692     0.193738620284733
    H                1.411774593579170    -3.126521771032691    -1.003031379715267
    C               -0.955345406420830     1.074178228967309     0.710738620284733
    C               -2.171345406420830     2.013178228967309     0.853738620284733
    H               -1.175345406420830     0.290178228967309    -0.015261379715267
    H               -0.090345406420830     1.638178228967308     0.377738620284733
    H               -0.719345406420830     0.619178228967309     1.673738620284733
    H               -1.943345406420830     2.789178228967309     1.584738620284733
    H               -3.039497406420830     1.433978228967308     1.201288620284733
    H               -2.416531406420829     2.554078228967309    -0.072201379715267

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-101ILE-123ILE-1-dimer.npy', np.array(charges))