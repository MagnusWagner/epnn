import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C               -2.439873666359715     1.401772917177299     1.186138275139367
    O               -1.615873666359716     0.296772917177299     1.493138275139366
    H               -1.348873666359716    -0.112227082822701     0.643138275139366
    H               -3.184873666359715     1.511772917177299     1.973138275139366
    H               -2.972873666359716     1.208772917177299     0.253138275139366
    H               -1.848443666359716     2.325116917177299     1.098678275139366
    C                1.225126333640284    -0.701227082822701     0.386138275139366
    C                2.415126333640285     0.232772917177299     0.484138275139367
    C                0.459126333640284    -0.510227082822701    -0.904861724860633
    O                1.053126333640284    -0.011227082822701    -1.876861724860633
    O               -0.742873666359716    -0.857227082822701    -0.929861724860633
    H                1.594126333640284    -1.728227082822701     0.427138275139366
    H                0.586126333640284    -0.566227082822701     1.251138275139366
    H                2.067126333640284     1.260772917177299     0.393138275139366
    H                3.105126333640285     0.023772917177299    -0.332861724860634
    H                2.964266333640285     0.111788917177299     1.429558275139367

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-014SER-017GLU-1-dimer.npy', np.array(charges))