import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                3.900354157250180    -1.217853166701867     0.318170288658708
    O                2.696354157250180    -1.156853166701868    -0.426829711341292
    H                2.822354157250180    -1.655853166701868    -1.248829711341292
    H                4.261354157250179    -2.246853166701867     0.327170288658708
    H                3.617354157250180    -0.976853166701867     1.343170288658708
    H                4.733714157250180    -0.556964166701867     0.037560288658708
    C               -3.260645842749820     1.086146833298133     0.754170288658708
    C               -0.146645842749820     0.519146833298133    -0.980829711341292
    C               -1.065645842749820    -0.219853166701867     0.862170288658708
    C               -1.913645842749820     0.665146833298133     0.297170288658708
    N                0.037354157250180    -0.299853166701867     0.046170288658708
    N               -1.335645842749820     1.101146833298133    -0.866829711341292
    H                0.885354157250180    -0.840853166701867     0.199170288658708
    H                0.559354157250180     0.681146833298133    -1.786829711341292
    H               -1.239645842749820    -0.760853166701867     1.780170288658708
    H               -3.703645842749820     1.742146833298133     0.005170288658708
    H               -3.134645842749820     1.670146833298133     1.666170288658708
    H               -3.952619842749820     0.256210833298133     0.960030288658708

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-071SER-082HIE-1-dimer.npy', np.array(charges))