import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.025502140920888     0.656172809113679    -1.342073719322979
    C                1.816502140920888     1.589172809113679    -0.432073719322979
    H                0.626502140920889    -0.174827190886322    -0.772073719322979
    H                0.193502140920888     1.203172809113678    -1.785073719322979
    H                1.670502140920888     0.282172809113678    -2.139073719322979
    H                1.132502140920889     1.953172809113678     0.328926280677021
    H                2.661702140920889     1.076172809113678     0.050076280677021
    H                2.171842140920889     2.456582809113679    -1.007695719322979
    C               -1.273497859079112    -1.713827190886322     0.424926280677021
    C               -1.570497859079112    -0.535827190886321     1.344926280677021
    H               -1.326497859079112    -1.406827190886321    -0.619073719322979
    H               -0.273497859079112    -2.089827190886322     0.638926280677021
    H               -1.978497859079112    -2.519827190886321     0.605926280677021
    H               -0.679497859079111     0.091172809113678     1.392926280677021
    H               -1.764497859079112    -0.912827190886321     2.342926280677021
    H               -2.410351859079111     0.092992809113678     1.014421280677021

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-009LEU-058ILE-1-dimer.npy', np.array(charges))