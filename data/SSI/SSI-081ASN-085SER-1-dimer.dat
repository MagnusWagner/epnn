import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -2.890713635499885     0.257692326956705     1.076448860566045
    C               -1.397713635499885     0.501692326956705     0.914448860566045
    O               -0.952713635499885     1.062692326956705    -0.084551139433955
    N               -0.610713635499885     0.099692326956705     1.911448860566045
    H               -3.272713635499885     0.950692326956705     1.827448860566045
    H               -3.036713635499884    -0.747307673043295     1.473448860566045
    H                0.380286364500115     0.266692326956705     1.837448860566045
    H               -1.002713635499885    -0.326307673043295     2.739448860566045
    H               -3.458183635499885     0.346091326956705     0.138278860566045
    C                1.673286364500115    -0.990307673043295    -0.871551139433955
    C                1.238286364500115    -0.958307673043295    -2.323551139433955
    O                2.580286364500116     0.073692326956705    -0.641551139433955
    H                0.806286364500115    -0.898307673043295    -0.220551139433955
    H                2.170286364500115    -1.940307673043295    -0.665551139433955
    H                2.135286364500115    -1.044307673043295    -2.941551139433955
    H                3.001286364500116    -0.059307673043295     0.220448860566045
    H                0.748936364500115    -0.000727673043295    -2.555031139433956
    H                0.576636364500115    -1.807345373043295    -2.550151139433955

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-081ASN-085SER-1-dimer.npy', np.array(charges))