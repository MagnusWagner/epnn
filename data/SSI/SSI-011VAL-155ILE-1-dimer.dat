import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.245989291118229     0.246289235608132    -2.124690941262060
    C                0.484010708881771    -1.081710764391869    -2.348690941262059
    H                0.086010708881771     0.969289235608132    -2.864690941262059
    H               -1.321989291118229     0.107289235608132    -2.232690941262060
    H               -0.018989291118229     0.637289235608132    -1.141690941262059
    H                0.442010708881771    -1.278710764391868    -3.420690941262060
    H                1.539500708881771    -1.022070764391868    -2.044759941262059
    H               -0.018089291118229    -1.925210764391868    -1.852303941262059
    C               -0.254989291118229     0.147289235608132     1.524309058737940
    C                0.026010708881771     0.691289235608132     2.952309058737940
    H                0.605010708881771    -0.373710764391868     1.111309058737940
    H               -1.082989291118229    -0.556710764391868     1.569309058737941
    H               -0.544989291118229     0.982289235608132     0.889309058737941
    H                0.158010708881771    -0.158710764391868     3.622309058737940
    H               -0.855989291118229     1.233289235608132     3.294309058737940
    H                0.904820708881771     1.348089235608132     3.031749058737940

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-011VAL-155ILE-1-dimer.npy', np.array(charges))