import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.789275306491549     0.678727968865953    -1.219713431423075
    C                0.846275306491550     0.729727968865953    -2.470713431423075
    H                2.136275306491550     1.684727968865953    -0.972713431423075
    H                1.254275306491550     0.269727968865953    -0.365713431423075
    H                2.655275306491550     0.044727968865953    -1.418713431423075
    H                0.503275306491550    -0.275272031134047    -2.714713431423075
    H                1.410053306491549     1.135727968865953    -3.323553431423075
    H               -0.002621693508450     1.396327968865953    -2.258493431423075
    C               -1.017724693508451    -0.316272031134047     1.248286568576925
    C               -1.626724693508451    -1.090272031134047     2.439286568576925
    H               -0.775724693508451     0.702727968865953     1.552286568576925
    H               -0.103724693508450    -0.813272031134047     0.921286568576925
    H               -1.726724693508451    -0.288272031134047     0.421286568576925
    H               -0.845724693508450    -1.084272031134047     3.191286568576925
    H               -2.553902893508450    -0.667172031134047     2.853176568576925
    H               -1.844774993508450    -2.128472031134047     2.148556568576924

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-098VAL-287LEU-1-dimer.npy', np.array(charges))