import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C               -3.082806208345354     1.532089470571425    -0.043720966371867
    C               -1.877806208345354     1.056089470571425     0.758279033628133
    O               -1.551806208345354    -0.150910529428575     0.708279033628133
    O               -1.263806208345354     1.895089470571425     1.453279033628133
    H               -2.941806208345354     2.579089470571425    -0.321720966371867
    H               -3.977806208345354     1.476089470571425     0.580279033628133
    H               -3.240616208345355     0.944789470571425    -0.960330966371867
    C                1.310193791654646    -2.296910529428575    -0.243720966371867
    C                2.005193791654646    -1.061910529428575    -0.768720966371867
    O                2.942193791654645    -1.147910529428575    -1.559720966371867
    N                1.556193791654646     0.101089470571425    -0.332720966371867
    H                2.029193791654646     0.941089470571425    -0.625720966371867
    H                0.739193791654646     0.136089470571425     0.268279033628133
    H                0.259193791654646    -2.053910529428575    -0.082720966371867
    H                1.737193791654646    -2.582910529428575     0.718279033628133
    H                1.353623791654646    -3.132207529428575    -0.958140966371867

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-076ASP-188GLN-1-dimer.npy', np.array(charges))