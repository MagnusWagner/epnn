import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.649198910282975     1.444154459412471    -0.523846354207173
    C                0.257801089717025     2.660154459412471    -0.364846354207173
    H               -0.215198910282975     0.748154459412471    -1.242846354207173
    H               -0.752198910282975     0.948154459412471     0.438153645792827
    H               -1.635198910282975     1.736154459412471    -0.872846354207173
    H               -0.181198910282975     3.312154459412471     0.386153645792827
    H                0.351631089717025     3.200904459412472    -1.318147354207173
    H                1.249241089717025     2.346124459412471    -0.006469354207173
    C                0.688801089717025    -1.967845540587529    -0.157846354207173
    C               -0.295198910282975    -2.135845540587529     1.044153645792827
    H                1.295801089717025    -2.866845540587529    -0.271846354207173
    H                0.118801089717025    -1.809845540587529    -1.073846354207173
    H                1.337801089717025    -1.104845540587529    -0.009846354207173
    H               -0.774198910282975    -1.177845540587529     1.235153645792827
    H                0.252721089717025    -2.459255540587528     1.941475645792827
    H               -1.074248910282975    -2.880365540587528     0.823314645792827

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-043VAL-069VAL-1-dimer.npy', np.array(charges))