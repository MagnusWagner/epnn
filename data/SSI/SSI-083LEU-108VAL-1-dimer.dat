import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.463613951625787     0.228089707209263    -1.665799001513739
    C                0.610613951625787     0.219089707209263    -3.176799001513739
    H               -0.139386048374213    -0.619910292790737    -1.343799001513739
    H                1.449613951625787     0.159089707209263    -1.200799001513739
    H               -0.018386048374213     1.152089707209262    -1.341799001513739
    H                1.124613951625787    -0.703910292790737    -3.434799001513738
    H               -0.370466048374213     0.228446707209263    -3.674179001513739
    H                1.248613951625787     1.057126707209263    -3.494046001513739
    C               -0.991386048374213    -0.279910292790737     1.812200998486261
    C               -0.090386048374213    -0.166910292790737     3.031200998486261
    H               -1.078386048374213     0.691089707209263     1.327200998486261
    H               -0.565386048374213    -0.978910292790737     1.092200998486261
    H               -1.989386048374213    -0.581910292790737     2.125200998486261
    H                0.806613951625787     0.371089707209263     2.734200998486262
    H               -0.607596048374213     0.384540707209263     3.830198998486261
    H                0.229363951625787    -1.163104292790738     3.370844998486262

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-083LEU-108VAL-1-dimer.npy', np.array(charges))