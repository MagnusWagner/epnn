import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C               -0.993793388581544    -0.120096938863372     0.472806994381502
    C               -2.722793388581544     1.524903061136628     1.897806994381502
    S               -2.744793388581543     0.263903061136627     0.608806994381502
    H               -0.637793388581543    -0.585096938863373     1.390806994381502
    H               -0.832793388581544    -0.816096938863372    -0.346193005618498
    H               -0.426793388581543     0.789903061136627     0.277806994381502
    H               -3.712793388581543     1.979903061136628     1.959806994381502
    H               -1.999793388581543     2.288903061136628     1.639806994381501
    H               -2.445793388581544     1.131164061136628     2.886868994381502
    C                2.497206611418457     0.913903061136628    -1.172193005618499
    C                2.398206611418456    -0.589096938863372    -0.934193005618498
    O                2.316206611418457    -1.357096938863372    -1.915193005618498
    O                2.438206611418456    -1.011096938863372     0.238806994381502
    H                3.544206611418456     1.164903061136627    -1.026193005618498
    H                1.897206611418457     1.463903061136627    -0.446193005618498
    H                2.197636611418456     1.201257061136628    -2.190863005618498

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-205MET-223ASP-2-dimer.npy', np.array(charges))