import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.519494183392571     0.037514087503418     1.233330522068606
    C               -1.156494183392571    -1.431485912496582     1.331330522068606
    H               -2.490494183392571     0.220514087503418     1.697330522068606
    H               -0.772494183392571     0.657514087503418     1.725330522068606
    H               -1.557494183392571     0.370514087503418     0.196330522068606
    H               -0.194494183392571    -1.589485912496582     0.842330522068606
    H               -1.906404183392571    -2.063435912496582     0.833059522068606
    H               -1.061524183392571    -1.702015912496582     2.393306522068606
    C                1.700505816607429     0.222514087503418    -0.818669477931394
    C                0.974505816607429     1.171514087503418    -1.749669477931394
    H                2.749505816607428     0.499514087503418    -0.716669477931394
    H                1.239505816607429     0.249514087503418     0.169330522068606
    H                1.639505816607429    -0.792485912496582    -1.209669477931394
    H               -0.059494183392571     0.837514087503418    -1.849669477931394
    H                1.462545816607429     1.135254087503417    -2.734811477931395
    H                0.962965816607429     2.176414087503418    -1.302406477931394

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-073ILE-128ALA-1-dimer.npy', np.array(charges))