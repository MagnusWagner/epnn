import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.863314330527184     1.955778395900871    -0.002349445787554
    C                0.965314330527184     1.817778395900871    -1.519349445787554
    H                0.136314330527184     1.253778395900871     0.394650554212446
    H                1.836314330527184     1.747778395900871     0.445650554212446
    H                0.565314330527184     2.971778395900871     0.259650554212446
    H                1.338314330527184     0.819778395900871    -1.742349445787553
    H               -0.053575669472816     1.932418395900871    -1.917735445787554
    H                1.662994330527184     2.561328395900871    -1.932121445787554
    C               -1.167685669472816    -1.175221604099129     0.878650554212446
    C               -0.655685669472816    -2.597221604099129     0.638650554212446
    H               -1.346685669472816    -0.670221604099129    -0.070349445787554
    H               -2.097685669472816    -1.208221604099129     1.442650554212446
    H               -0.433685669472816    -0.629221604099129     1.470650554212446
    H               -0.413685669472816    -3.065221604099129     1.587650554212446
    H                0.209844330527184    -2.566591604099129    -0.039524445787554
    H               -1.466375669472816    -3.160641604099129     0.153540554212446

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-162LEU-201LEU-1-dimer.npy', np.array(charges))