import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C               -2.945703405579970    -1.036798794940845     0.999981968683863
    C               -1.985703405579969     0.049201205059155     0.632981968683863
    O               -0.907703405579969    -0.294798794940845     0.115981968683863
    O               -2.246703405579969     1.250201205059155     0.819981968683863
    H               -2.439703405579969    -1.800798794940845     1.587981968683863
    H               -3.276703405579969    -1.503798794940845     0.069981968683863
    H               -3.823311405579969    -0.653788794940845     1.541381968683863
    C                2.304296594420031    -0.059798794940845    -0.457018031316137
    C                3.188296594420031    -1.176798794940845    -0.966018031316137
    C                2.597296594420031     1.270201205059155    -1.126018031316137
    H                1.286296594420031    -0.344798794940845    -0.667018031316137
    H                2.428296594420031     0.047201205059155     0.617981968683863
    H                3.008296594420031    -2.067798794940845    -0.362018031316137
    H                4.226296594420030    -0.872798794940845    -0.823018031316137
    H                3.605296594420031     1.596201205059155    -0.860018031316137
    H                2.536296594420030     1.188201205059155    -2.211018031316137
    H                3.029106594420031    -1.431788794940845    -2.024148031316137
    H                1.875041594420030     2.040081205059155    -0.816788031316137

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-033ASP-279LYS-2-dimer.npy', np.array(charges))