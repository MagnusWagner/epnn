import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                1.085407757557358    -2.693756569044058     1.885511612265598
    C                0.665407757557357    -1.491756569044057     1.009511612265598
    O               -0.446592242442642    -1.488756569044057     0.461511612265597
    N                1.531407757557358    -0.463756569044057     0.867511612265597
    H                1.221407757557358     0.337243430955943     0.309511612265598
    H                2.441407757557358    -0.486756569044057     1.300511612265598
    H                1.914407757557357    -2.398756569044058     2.529511612265597
    H                1.455407757557358    -3.475756569044057     1.222511612265598
    H                0.275657757557358    -3.110644569044057     2.502361612265598
    C               -1.722592242442643     1.587243430955943     0.032511612265598
    C               -0.664592242442642     1.515243430955943    -1.096488387734402
    O                0.540407757557358     1.474243430955943    -0.871488387734402
    O               -1.037592242442642     1.503243430955943    -2.273488387734403
    H               -2.386592242442642     0.723243430955943    -0.040488387734402
    H               -2.321592242442642     2.480243430955943    -0.146488387734402
    H               -1.322462242442642     1.642958430955943     1.055641612265598

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-109GLN-161GLU-2-dimer.npy', np.array(charges))