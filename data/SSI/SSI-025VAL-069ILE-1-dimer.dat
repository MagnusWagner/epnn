import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.117801547807874     2.112086889240520     0.478178227758285
    C                1.056198452192126     1.827086889240519    -0.451821772241715
    H               -0.487801547807874     3.128086889240519     0.322178227758285
    H               -0.927801547807874     1.417086889240519     0.261178227758285
    H                0.171198452192126     1.982086889240519     1.522178227758285
    H                1.517198452192126     0.888086889240519    -0.147821772241715
    H                1.802658452192126     2.630316889240520    -0.364545172241715
    H                0.718058452192126     1.722936889240519    -1.493366772241715
    C                0.113198452192126    -1.679913110759481     0.410178227758285
    C               -1.049801547807874    -2.264913110759481    -0.433821772241715
    H                0.409198452192126    -2.391913110759481     1.182178227758285
    H                0.952198452192126    -1.481913110759481    -0.240821772241715
    H               -0.144801547807874    -0.730913110759481     0.876178227758285
    H               -1.327801547807874    -1.495913110759481    -1.157821772241715
    H               -1.925921547807874    -2.433593110759480     0.209570927758285
    H               -0.777741547807874    -3.167053110759481    -1.001386972241715

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-025VAL-069ILE-1-dimer.npy', np.array(charges))