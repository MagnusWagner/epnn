import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C               -2.117353833477212    -2.317154919395524     0.299470020197951
    C               -1.900353833477213    -0.864154919395524    -0.110529979802049
    O               -0.926353833477212    -0.610154919395524    -0.835529979802049
    O               -2.658353833477212     0.022845080604476     0.323470020197951
    H               -2.091353833477212    -2.934154919395524    -0.601529979802049
    H               -3.095353833477212    -2.446154919395524     0.766470020197951
    H               -1.324323833477212    -2.650494919395524     0.985020020197951
    C                1.036646166522788     1.357845080604476     1.165470020197951
    C                1.968646166522787     0.946845080604476     0.057470020197951
    O                3.148646166522788     1.276845080604476     0.082470020197951
    N                1.476646166522788     0.226845080604476    -0.921529979802049
    H                2.076646166522787    -0.051154919395524    -1.679529979802049
    H                0.497646166522788     0.013845080604476    -0.928529979802049
    H                0.177646166522788     0.689845080604476     1.199470020197951
    H                0.672646166522788     2.357845080604476     0.928470020197951
    H                1.544676166522787     1.362895080604476     2.141110020197951

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-096ASP-100ASN-1-dimer.npy', np.array(charges))