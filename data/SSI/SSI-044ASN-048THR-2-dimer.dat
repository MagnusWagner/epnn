import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.238656181731705    -0.711769960796070     1.039060684411106
    C               -1.057656181731705    -1.051769960796070    -0.424939315588894
    O               -1.809656181731705    -1.841769960796070    -0.994939315588894
    N               -0.046656181731705    -0.460769960796070    -1.041939315588894
    H                0.135343818268295    -0.690769960796070    -2.004939315588894
    H                0.578343818268295     0.150230039203930    -0.521939315588894
    H               -0.702656181731705     0.204230039203930     1.277060684411106
    H               -0.782656181731705    -1.518769960796070     1.612060684411106
    H               -2.295326181731705    -0.591089960796070     1.319960684411106
    C                2.098343818268295     2.557230039203930     0.658060684411106
    O                1.667343818268295     1.201230039203930     0.628060684411106
    H                1.684343818268295     0.855230039203930     1.544060684411106
    H                2.326343818268295     2.859230039203930    -0.364939315588894
    H                1.297268818268295     3.205210039203930     1.043260684411106
    H                3.023029818268296     2.644100039203930     1.247460684411106

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-044ASN-048THR-2-dimer.npy', np.array(charges))