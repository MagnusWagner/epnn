import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.891883322879105    -1.246322916727874     1.518645844948346
    C                1.121883322879105    -2.315322916727874     0.450645844948346
    H                1.608883322879106    -0.432322916727874     1.407645844948346
    H               -0.110116677120895    -0.833322916727874     1.404645844948346
    H                0.968883322879106    -1.670322916727874     2.519645844948346
    H                0.991883322879106    -1.857322916727874    -0.529354155051654
    H                2.136708322879105    -2.735200916727874     0.512555844948346
    H                0.374343322879105    -3.115334916727874     0.556305844948346
    C               -0.461116677120895     1.281677083272126    -0.815354155051654
    C               -1.548116677120895     2.280677083272126    -1.151354155051654
    H                0.252883322879105     1.202677083272126    -1.635354155051654
    H                0.057883322879105     1.591677083272126     0.090645844948346
    H               -0.906116677120895     0.300677083272126    -0.643354155051654
    H               -2.216116677120895     2.361677083272126    -0.294354155051654
    H               -2.121396677120895     1.928121083272126    -2.021444155051654
    H               -1.091698677120895     3.250564083272126    -1.398344155051654

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-051VAL-071ALA-1-dimer.npy', np.array(charges))