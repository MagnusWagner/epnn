import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.817443965158546     3.132586379186191     1.939142693611263
    O                0.188556034841454     2.176586379186191     1.846142693611263
    H                0.991556034841453     2.474586379186191     2.296142693611263
    H               -1.210443965158547     3.341586379186191     0.945142693611264
    H               -0.417443965158547     4.053586379186192     2.366142693611264
    H               -1.619843965158547     2.744821379186191     2.583962693611264
    C                0.056556034841454     0.081586379186191    -2.667857306388736
    C                0.350556034841453    -0.179413620813809    -0.077857306388736
    C                0.144556034841454    -0.643413620813809    -1.344857306388736
    C               -0.025443965158546    -2.326413620813809     0.071142693611264
    N                0.274556034841453    -1.256413620813809     0.781142693611264
    N               -0.137443965158546    -1.979413620813809    -1.220857306388736
    H                0.647556034841454     0.816586379186191     0.159142693611264
    H                0.355556034841453    -1.220413620813809     1.802142693611263
    H               -0.810443965158546    -0.316413620813809    -3.194857306388736
    H                0.909556034841454    -0.100413620813809    -3.303857306388736
    H               -0.192443965158547    -3.317413620813809     0.474142693611263
    H               -0.083703965158546     1.166066379186191    -2.548564306388736

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-120SER-136HIE-1-dimer.npy', np.array(charges))