import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.567379893476887    -1.484435504637592     0.583420682090478
    C                0.828379893476887    -2.326435504637591     1.836420682090478
    H                0.878379893476887    -2.021435504637592    -0.311579317909522
    H               -0.499620106523113    -1.273435504637592     0.506420682090478
    H                1.121379893476887    -0.549435504637592     0.655420682090478
    H                0.416379893476887    -3.325435504637591     1.684420682090478
    H                0.269379893476887    -1.867435504637592     2.649420682090478
    H                1.889751893476887    -2.402401504637592     2.115200682090478
    C               -0.910620106523113     1.641564495362408    -0.530579317909522
    C               -0.477620106523113     2.173564495362409    -1.892579317909522
    H               -1.284620106523113     2.459564495362409     0.085420682090478
    H               -1.698620106523113     0.898564495362408    -0.658579317909522
    H               -0.062620106523113     1.184564495362408    -0.027579317909522
    H               -0.252620106523113     1.324564495362408    -2.536579317909522
    H                0.433112893476887     2.778566495362409    -1.772009317909522
    H               -1.299818106523113     2.743055495362408    -2.350479317909522

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-011ILE-037LEU-1-dimer.npy', np.array(charges))