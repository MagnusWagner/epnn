import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.384625004075694     0.172411302850251     1.792537444001679
    C                1.657625004075694    -0.319588697149749     2.435537444001679
    H                0.566625004075694     1.061411302850251     1.190537444001679
    H               -0.009374995924306    -0.603588697149749     1.138537444001679
    H               -0.365374995924306     0.389411302850251     2.555537444001679
    H                2.434625004075694    -0.400588697149749     1.673537444001679
    H                1.474625004075694    -1.324588697149749     2.811537444001679
    H                2.002065004075694     0.336491302850251     3.248507444001679
    C               -0.708374995924306    -0.531588697149749    -1.797462555998321
    C               -1.335374995924306     0.691411302850251    -2.426462555998321
    H               -1.380374995924306    -1.011588697149749    -1.090462555998321
    H               -0.437374995924306    -1.256588697149749    -2.558462555998321
    H                0.195625004075694    -0.246588697149749    -1.260462555998321
    H               -2.236374995924305     0.388411302850251    -2.959462555998321
    H               -1.597244995924306     1.411561302850251    -1.637282555998321
    H               -0.629584995924306     1.105681302850251    -3.161472555998321

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-018ILE-052VAL-1-dimer.npy', np.array(charges))