import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.044886295787909    -0.379129381625874     1.834457885823338
    C               -0.648886295787909     0.716870618374126     0.864457885823338
    O                0.223113704212091     1.540870618374127     1.137457885823338
    N               -1.309886295787909     0.745870618374126    -0.282542114176662
    H               -1.187886295787909    -1.313129381625874     1.288457885823338
    H               -2.009886295787909    -0.094129381625874     2.256457885823338
    H               -1.117886295787909     1.499870618374127    -0.923542114176662
    H               -2.057886295787909     0.090870618374126    -0.452542114176662
    H               -0.309346295787909    -0.534279381625874     2.637518885823338
    C                1.569113704212091    -0.557129381625873    -1.804542114176662
    C                1.214113704212091    -2.027129381625873    -1.624542114176662
    H                0.684113704212091     0.032870618374126    -2.027542114176662
    H                1.980113704212091    -0.154129381625874    -0.888542114176662
    H                2.297113704212091    -0.442129381625874    -2.605542114176662
    H                2.085113704212091    -2.632129381625873    -1.871542114176662
    H                0.371413704212091    -2.308749381625873    -2.273042114176662
    H                0.952113704212091    -2.214159381625873    -0.572692114176662

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-121ASN-132THR-1-dimer.npy', np.array(charges))