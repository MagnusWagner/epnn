import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.262838938623892    -1.252346393495147     1.212100862221225
    C               -0.553838938623892    -1.356346393495147     2.696100862221225
    H               -1.133838938623892    -0.863346393495147     0.681100862221225
    H                0.580161061376108    -0.579346393495147     1.048100862221225
    H               -0.023838938623892    -2.236346393495146     0.806100862221225
    H                0.352161061376108    -1.686346393495147     3.210100862221224
    H               -1.355428938623892    -2.085337393495147     2.885910862221225
    H               -0.822938938623892    -0.365308393495147     3.090350862221225
    C               -0.280838938623892     1.241653606504853    -1.620899137778775
    C                1.096161061376108     1.362653606504853    -2.291899137778775
    H               -0.717838938623892     0.264653606504853    -1.830899137778775
    H               -0.168838938623892     1.354653606504854    -0.541899137778775
    H               -0.952838938623892     2.018653606504853    -1.971899137778775
    H                1.492161061376108     2.347653606504853    -2.049899137778775
    H                0.981691061376108     1.276983606504853    -3.382569137778776
    H                1.785531061376108     0.605651606504853    -1.889769137778775

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-119ALA-160LEU-1-dimer.npy', np.array(charges))