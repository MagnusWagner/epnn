import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.081980194109088    -0.579350834425849     2.097129660622193
    C                0.855980194109088    -1.870350834425849     1.794129660622193
    H               -0.954019805890912    -0.657350834425849     1.775129660622193
    H                0.096980194109088    -0.388350834425849     3.168129660622193
    H                0.540980194109088     0.261649165574151     1.576129660622193
    H                0.492980194109088    -2.647350834425849     2.461129660622193
    H                0.698210194109088    -2.171671834425849     0.748029660622193
    H                1.927380194109088    -1.722201834425849     1.994529660622193
    C               -0.253019805890912     1.040649165574151    -1.239870339377807
    C               -0.679019805890912     1.411649165574151    -2.654870339377807
    H               -0.204019805890912     1.931649165574151    -0.613870339377807
    H               -0.979019805890912     0.354649165574151    -0.804870339377807
    H                0.727980194109088     0.566649165574151    -1.265870339377807
    H               -1.624019805890912     1.949649165574151    -2.585870339377807
    H               -0.856019805890912     0.485649165574151    -3.201870339377807
    H                0.062090194109088     2.006113165574151    -3.209274339377808

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-104VAL-126ILE-1-dimer.npy', np.array(charges))