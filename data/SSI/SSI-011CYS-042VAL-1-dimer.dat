import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.415717285682562     0.483870644012210    -0.727136257031689
    C                1.286717285682563     0.479870644012210    -1.979136257031689
    S               -1.045282714317438     1.553870644012210    -0.862136257031689
    H                0.086717285682562    -0.539129355987791    -0.538136257031689
    H                1.022717285682562     0.817870644012210     0.116863742968311
    H                0.699717285682562     0.095870644012210    -2.818136257031689
    H               -1.409282714317438     1.530870644012210     0.425863742968311
    H                2.185069285682562    -0.133919355987790    -1.817175257031689
    H                1.631633285682563     1.499370644012209    -2.206417257031689
    C               -0.282282714317438    -2.149129355987791     1.721863742968311
    C                0.867717285682562    -2.149129355987791     2.730863742968311
    H               -1.099282714317438    -2.777129355987791     2.078863742968311
    H               -0.661282714317438    -1.136129355987790     1.600863742968311
    H                0.064717285682562    -2.528129355987791     0.758863742968311
    H                0.490717285682562    -1.786129355987790     3.685863742968311
    H                1.246239285682562    -3.173279355987791     2.864413742968311
    H                1.661426285682563    -1.461339355987791     2.403793742968311

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-011CYS-042VAL-1-dimer.npy', np.array(charges))