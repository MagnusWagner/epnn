import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.353493336231252    -1.078389692924169     1.204344587522947
    C               -0.243493336231252    -1.694389692924169     2.602344587522946
    H               -1.391493336231252    -1.056389692924169     0.870344587522947
    H               -0.000493336231252    -0.046389692924169     1.239344587522947
    H                0.260506663768748    -1.636389692924169     0.498344587522947
    H               -0.997493336231252    -1.249389692924169     3.249344587522947
    H               -0.391240336231252    -2.783129692924169     2.549274587522946
    H                0.747134663768748    -1.471589692924169     3.025444587522947
    C               -0.044493336231252     1.666610307075832    -1.289655412477053
    C                0.643506663768748     1.102610307075832    -2.516655412477054
    H               -0.605493336231252     2.559610307075831    -1.550655412477053
    H               -0.744493336231252     0.932610307075831    -0.890655412477053
    H                0.699506663768747     1.909610307075831    -0.531655412477053
    H               -0.118493336231252     0.855610307075831    -3.251655412477054
    H                1.327643663768747     1.844060307075831    -2.955075412477054
    H                1.190277663768748     0.184150307075831    -2.256905412477054

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-012LEU-024VAL-1-dimer.npy', np.array(charges))