import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.618916012671528    -0.096570985651732     2.557873077821822
    N                1.850916012671528    -0.251570985651732     1.115873077821822
    H                1.085916012671528     0.186429014348268     0.590873077821821
    H                2.714916012671528     0.192429014348268     0.831873077821822
    H                1.888916012671528    -1.223570985651732     0.840873077821822
    H                1.620916012671528     0.969429014348268     2.807873077821821
    H                2.423916012671528    -0.571570985651732     3.128873077821821
    H                0.654186012671528    -0.518320985651732     2.876343077821821
    C               -1.930083987328472     0.503429014348268    -1.932126922178178
    C               -0.908083987328472     0.078429014348268    -0.902126922178179
    O               -0.631083987328472    -1.136570985651732    -0.834126922178179
    O               -0.319083987328472     0.940429014348268    -0.216126922178179
    H               -2.384083987328472    -0.371570985651732    -2.403126922178179
    H               -1.388083987328472     1.045429014348268    -2.708126922178179
    H               -2.736593987328472     1.121419014348268    -1.510676922178179

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-020LYS-040GLU-1-dimer.npy', np.array(charges))