import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.636917344225775    -0.563743227454839    -0.275980697234210
    C                2.102917344225775    -1.593743227454839    -1.320980697234210
    H                1.130917344225775    -1.061743227454839     0.554019302765790
    H                2.504917344225775    -0.026743227454839     0.105019302765790
    H                0.968917344225775     0.169256772545161    -0.727980697234210
    H                2.478917344225775    -1.048743227454839    -2.183980697234210
    H                1.270527344225775    -2.239795227454839    -1.636810697234210
    H                2.929037344225775    -2.185879227454839    -0.900380697234210
    C               -1.346082655774225     1.602256772545161     0.622019302765790
    C               -2.403082655774225     0.554256772545161     0.969019302765790
    H               -1.708082655774225     2.606256772545161     0.835019302765790
    H               -0.453082655774225     1.421256772545161     1.221019302765789
    H               -1.087082655774225     1.529256772545161    -0.433980697234210
    H               -2.661082655774225     0.657256772545161     2.024019302765789
    H               -1.940082655774225    -0.423743227454839     0.846019302765790
    H               -3.322722655774225     0.614947772545161     0.368539302765790

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-104VAL-108ILE-1-dimer.npy', np.array(charges))