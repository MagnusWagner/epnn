import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.824875345706801    -0.404467435843945    -0.351553621645413
    C               -2.710875345706801    -1.583467435843945     0.103446378354587
    H               -1.789875345706801     0.378532564156055     0.407446378354587
    H               -0.809875345706801    -0.770467435843945    -0.480553621645413
    H               -2.184875345706801     0.011532564156055    -1.295553621645413
    H               -2.332875345706801    -1.958467435843945     1.051446378354587
    H               -3.759582345706801    -1.273697435843945     0.222856378354587
    H               -2.680053345706801    -2.393657435843945    -0.639953621645413
    C                1.615124654293199     0.840532564156055    -0.238553621645413
    C                2.914124654293198     1.157532564156055     0.490446378354587
    H                0.812124654293199     1.504532564156055     0.084446378354587
    H                1.793124654293199     0.950532564156055    -1.303553621645413
    H                1.340124654293199    -0.195467435843945    -0.042553621645413
    H                3.713124654293198     0.626532564156055    -0.021553621645413
    H                2.841114654293199     0.764852564156055     1.515376378354587
    H                3.134934654293199     2.234622564156055     0.457076378354587

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-038VAL-041VAL-1-dimer.npy', np.array(charges))