import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.580792064328343    -0.108259417222660     2.153140867353097
    C                0.816792064328343     0.856740582777340     1.020140867353096
    O                0.556792064328343     0.540740582777340    -0.137859132646904
    N                1.312792064328343     2.043740582777340     1.335140867353097
    H                1.075792064328343     0.243740582777340     3.041140867353097
    H                1.069792064328343    -1.046259417222660     1.885140867353096
    H                1.488792064328343     2.698740582777340     0.589140867353096
    H                1.538792064328343     2.290740582777340     2.292140867353096
    H               -0.486027935671657    -0.313309417222660     2.325920867353097
    C               -2.171207935671657    -1.473259417222660    -2.335859132646903
    O               -0.936207935671657    -1.682259417222660    -1.682859132646904
    H               -0.229207935671657    -1.309259417222660    -2.226859132646903
    H               -2.264207935671657    -2.141259417222660    -3.194859132646904
    H               -2.191207935671657    -0.442259417222660    -2.695859132646904
    H               -3.009897935671657    -1.630779417222660    -1.641749132646904

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-029ASN-179SER-1-dimer.npy', np.array(charges))