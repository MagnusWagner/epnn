import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.689296279359840    -0.654047067589198     1.566677814246607
    C                0.275296279359840    -1.692047067589198     2.593677814246607
    H                1.590296279359841    -0.147047067589198     1.872677814246607
    H                0.840296279359840    -1.127047067589198     0.595677814246607
    H               -0.105703720640160     0.086952932410802     1.473677814246607
    H               -0.697703720640160    -2.065047067589198     2.300677814246607
    H                0.201156279359840    -1.245054067589198     3.596024814246607
    H                0.976236279359840    -2.539791067589198     2.597995714246607
    C               -0.429703720640160     0.543952932410802    -1.640322185753393
    C               -0.531703720640160     1.798952932410802    -2.522322185753393
    H               -0.355703720640160    -0.361047067589198    -2.244322185753393
    H                0.468296279359840     0.613952932410802    -1.028322185753393
    H               -1.278703720640160     0.469952932410802    -0.964322185753393
    H               -0.428703720640160     2.673952932410801    -1.880322185753393
    H               -1.514393720640160     1.852759932410802    -3.013668185753393
    H                0.266706279359840     1.825423932410802    -3.278523185753393

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-058VAL-085ILE-1-dimer.npy', np.array(charges))