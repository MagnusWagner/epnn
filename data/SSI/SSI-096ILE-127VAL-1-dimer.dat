import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.726336204509335    -0.109229019682410    -0.356029908617446
    C                2.628336204509335    -1.216229019682410    -0.892029908617447
    H                1.587336204509335    -0.229229019682410     0.717970091382554
    H                2.182336204509335     0.869770980317590    -0.514029908617446
    H                0.752336204509335    -0.143229019682410    -0.840029908617447
    H                3.641336204509335    -0.994229019682410    -0.554029908617446
    H                2.621161204509335    -1.231296019682410    -1.991902908617446
    H                2.355548204509335    -2.203563019682410    -0.491081908617446
    C               -2.066663795490665     0.102770980317590     0.117970091382554
    C               -2.292663795490665     1.222770980317590     1.121970091382553
    H               -1.635663795490665    -0.761229019682410     0.624970091382553
    H               -3.011663795490665    -0.213229019682410    -0.325029908617446
    H               -1.392663795490665     0.430770980317590    -0.672029908617446
    H               -3.091663795490665     0.938770980317590     1.797970091382554
    H               -2.565273795490665     2.160406980317590     0.615489091382553
    H               -1.387696795490665     1.375284980317590     1.728414091382554

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-096ILE-127VAL-1-dimer.npy', np.array(charges))