import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.256769957296508    -0.200879867618541    -1.621216139211226
    C                0.721769957296508    -1.637879867618541    -1.636216139211226
    H                2.322769957296508    -0.208879867618541    -1.851216139211226
    H                0.745769957296508     0.404120132381459    -2.369216139211225
    H                1.117769957296508     0.242120132381459    -0.638216139211226
    H                1.019769957296508    -2.076879867618541    -2.587216139211225
    H                1.153669957296508    -2.218989867618541    -0.808106139211226
    H               -0.377260042703492    -1.632869867618541    -1.590396139211226
    C               -0.983230042703492     1.196120132381459     0.917783860788774
    C               -0.995230042703492     0.644120132381459     2.345783860788774
    H               -0.028230042703492     1.677120132381459     0.721783860788774
    H               -1.132230042703492     0.392120132381459     0.212783860788774
    H               -1.788230042703492     1.908120132381459     0.752783860788774
    H               -1.970230042703492     0.195120132381459     2.533783860788775
    H               -0.825650042703492     1.446010132381459     3.079413860788774
    H               -0.238870042703492    -0.144739867618541     2.470763860788774

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-075LEU-111LEU-2-dimer.npy', np.array(charges))