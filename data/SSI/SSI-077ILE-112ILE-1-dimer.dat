import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.899957553478596    -1.048596571291939    -1.439896087891458
    C                0.907957553478596     0.441403428708061    -1.871896087891458
    H                1.132957553478596    -1.698596571291939    -2.282896087891458
    H                1.631957553478596    -1.224596571291939    -0.652896087891458
    H               -0.072042446521404    -1.305596571291939    -1.036896087891458
    H                0.476957553478596     1.041403428708061    -1.070896087891458
    H                0.299617553478596     0.580653428708061    -2.777726087891458
    H                1.936987553478596     0.781303428708061    -2.060491087891458
    C               -0.125042446521404     0.216403428708061     1.722103912108542
    C               -1.677042446521404     0.400403428708061     1.590103912108542
    H                0.138957553478596     0.182403428708061     2.770103912108542
    H                0.161957553478596    -0.726596571291939     1.265103912108542
    H                0.408957553478596     1.030403428708061     1.235103912108542
    H               -2.167042446521404    -0.404596571291939     2.139103912108542
    H               -1.943042446521404     0.260403428708061     0.541103912108542
    H               -2.075642446521405     1.368943428708061     1.926332912108542

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-077ILE-112ILE-1-dimer.npy', np.array(charges))