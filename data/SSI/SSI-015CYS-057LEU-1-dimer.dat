import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.623594273750312     0.395059160376311    -0.197995241016111
    C                2.004594273750312     0.257059160377311     0.446004758983889
    S                0.665594273750312     1.125059160377311    -1.847995241016111
    H                0.155594273750312    -0.590940839622689    -0.253995241016111
    H               -0.001405726249688     1.030059160377311     0.433004758983889
    H                2.507594273750313     1.224059160377311     0.364004758983889
    H               -0.643405726249688     1.041059160377311    -2.113995241016112
    H                2.592914273750313    -0.501500839623689    -0.091089241016111
    H                1.886334273750312     0.052989160377311     1.520421758983889
    C               -2.249405726249688    -1.685940839622689     1.178004758983888
    C               -1.705405726249688    -1.379940839622689     2.565004758983889
    H               -2.235405726249688    -0.780940839622689     0.579004758983889
    H               -1.608405726249688    -2.425940839622688     0.708004758983889
    H               -3.265405726249687    -2.080940839622689     1.246004758983889
    H               -0.765405726249688    -0.845940839622689     2.466004758983888
    H               -2.417645726249687    -0.759790839622689     3.129038758983889
    H               -1.524685726249688    -2.313090839623689     3.118699758983889

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-015CYS-057LEU-1-dimer.npy', np.array(charges))