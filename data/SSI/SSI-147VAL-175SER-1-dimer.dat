import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -2.008630391811046     0.458909225006787     0.133202543308470
    C               -3.488630391811045     0.503909225006787    -0.217797456691530
    H               -1.481630391811045     1.276909225006787    -0.364797456691530
    H               -1.875630391811045     0.556909225006787     1.212202543308470
    H               -1.576630391811045    -0.492090774993212    -0.176797456691530
    H               -3.968630391811045    -0.368090774993212     0.223202543308470
    H               -3.631870391811046     0.484479225006788    -1.308257456691530
    H               -3.940130391811045     1.389409225006788     0.253402543308470
    C                1.564369608188955     0.012909225006788     0.430202543308470
    C                2.804369608188955     0.363909225006788    -0.412797456691530
    O                1.091369608188955    -1.250090774993213     0.114202543308470
    H                1.847369608188955     0.022909225006788     1.482202543308470
    H                0.785369608188955     0.758909225006787     0.281202543308470
    H                3.249369608188954     1.280909225006787    -0.061797456691530
    H                0.629369608188955    -1.150090774993213    -0.749797456691530
    H                2.521009608188955     0.563169225006788    -1.456827456691530
    H                3.558319608188954    -0.434310774993212    -0.346397456691530

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-147VAL-175SER-1-dimer.npy', np.array(charges))