import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.878789407822859     2.160200658915065     0.582435063417337
    C                0.343210592177141     1.373200658915065     0.163435063417337
    O                1.260210592177141     1.147200658915065     0.954435063417337
    N                0.361210592177141     0.933200658915065    -1.087564936582663
    H               -1.012789407822859     2.997200658915065    -0.104564936582663
    H               -0.705789407822858     2.571200658915065     1.573435063417337
    H                1.173210592177141     0.416200658915065    -1.390564936582663
    H               -0.382789407822859     1.163200658915065    -1.729564936582663
    H               -1.784829407822859     1.536620658915065     0.567226063417337
    C               -0.144789407822859    -2.329799341084935     0.244435063417337
    C               -0.920789407822859    -3.164799341084935    -0.772564936582663
    H               -0.166789407822859    -1.287799341084935    -0.039564936582663
    H               -0.611789407822859    -2.430799341084935     1.222435063417337
    H                0.885210592177141    -2.673799341084935     0.326435063417337
    H               -0.870789407822859    -4.214799341084936    -0.484564936582663
    H               -0.496249407822859    -3.025919341084935    -1.777790736582663
    H               -1.981139407822859    -2.872789341084935    -0.792080636582663

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-016GLN-098LEU-1-dimer.npy', np.array(charges))