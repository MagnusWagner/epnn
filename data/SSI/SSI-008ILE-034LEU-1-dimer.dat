import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.193487274275621     1.547777646023367     1.558537742535543
    C               -1.718487274275621     1.618777646023367     1.452537742535543
    H                0.189512725724379     0.746777646023367     0.939537742535543
    H                0.255512725724379     2.485777646023367     1.235537742535543
    H                0.118512725724379     1.390777646023367     2.591537742535543
    H               -2.065487274275621     2.363777646023367     2.167537742535543
    H               -2.188135274275621     0.653942646023367     1.694457742535543
    H               -2.024371274275621     1.928959646023367     0.442477742535543
    C                0.494512725724379    -1.270222353976633    -0.989462257464457
    C                1.410512725724379    -1.905222353976633    -2.024462257464457
    H               -0.017487274275621    -2.039222353976633    -0.410462257464457
    H                1.115512725724379    -0.679222353976633    -0.320462257464457
    H               -0.230487274275621    -0.613222353976633    -1.469462257464457
    H                1.833512725724378    -1.114222353976632    -2.642462257464457
    H                0.846653725724379    -2.600744353976633    -2.663452257464457
    H                2.249492725724379    -2.417534353976633    -1.530862257464457

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-008ILE-034LEU-1-dimer.npy', np.array(charges))