import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.374817339364797    -0.322796971928221     0.035064892951669
    C                2.681817339364798    -1.070796971928221    -0.173935107048331
    C                0.832817339364797    -0.529796971928221     1.437064892951669
    H                1.510817339364797     0.744203028071779    -0.153935107048331
    H                0.625817339364797    -0.702796971928221    -0.657935107048331
    H                2.549817339364797    -2.135796971928221     0.007064892951669
    H                3.429817339364797    -0.694796971928221     0.523064892951669
    H               -0.152182660635203    -0.050796971928221     1.489064892951669
    H                0.682817339364797    -1.602796971928221     1.607064892951669
    H                3.067938339364797    -0.896278971928221    -1.189045107048331
    H                1.496695339364797    -0.102912971928221     2.203244892951670
    C               -2.825182660635203     1.325203028071779    -0.482935107048331
    O               -1.667182660635203     0.528203028071779    -0.722935107048331
    H               -1.966182660635203    -0.383796971928221    -0.828935107048331
    H               -3.240182660635202     1.066203028071779     0.492064892951669
    H               -2.538600660635202     2.387200028071779    -0.477215107048331
    H               -3.586074660635203     1.111923028071779    -1.248155107048331

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-007LYS-099THR-1-dimer.npy', np.array(charges))