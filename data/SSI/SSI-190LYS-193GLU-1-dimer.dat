import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.085521266063584    -0.388912903454723     2.433516465657868
    C                0.235478733936416    -1.039912903454723     2.708516465657868
    N               -0.895521266063584     0.923087096545277     1.767516465657868
    H               -1.670521266063584    -1.044912903454723     1.779516465657868
    H               -1.636521266063584    -0.275912903454723     3.373516465657868
    H                0.918478733936416    -0.863912903454723     1.876516465657868
    H                0.080478733936416    -2.118912903454724     2.774516465657868
    H               -0.578521266063584     0.758087096545277     0.805516465657868
    H               -1.778521266063584     1.415087096545277     1.693516465657868
    H               -0.242521266063584     1.524087096545277     2.254516465657868
    H                0.708148733936416    -0.708274903454723     3.644786465657868
    C                1.740478733936416     0.686087096545277    -1.710483534342132
    C                0.389478733936416     0.049087096545277    -1.759483534342132
    O               -0.314521266063584    -0.061912903454723    -0.733483534342132
    O                0.007478733936416    -0.301912903454723    -2.888483534342132
    H                1.800478733936416     1.399087096545277    -2.535483534342132
    H                2.495478733936416    -0.083912903454723    -1.879483534342132
    H                1.979488733936416     1.207166096545277    -0.771683534342132

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-190LYS-193GLU-1-dimer.npy', np.array(charges))