import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C               -1.951498250614114    -1.462184252701291    -1.215698083419551
    C               -0.568498250614114    -0.892184252701291    -1.511698083419551
    O                0.461501749385887    -1.461184252701291    -1.087698083419551
    O               -0.521498250614114     0.166815747298709    -2.176698083419550
    H               -2.521498250614114    -1.531184252701291    -2.144698083419550
    H               -2.468498250614114    -0.763184252701291    -0.555698083419551
    H               -1.934239250614114    -2.448080952701291    -0.728143083419551
    C                0.682501749385886     0.897815747298709     1.549301916580449
    C                1.701501749385887     0.422815747298709     2.582301916580449
    C                0.199501749385886     2.311815747298708     1.862301916580449
    H                1.146501749385886     0.903815747298709     0.561301916580449
    H               -0.182498250614114     0.233815747298709     1.524301916580449
    H                1.243501749385887     0.347815747298709     3.568301916580449
    H                2.514501749385886     1.148815747298709     2.636301916580449
    H                1.059501749385886     2.989815747298708     1.842301916580449
    H               -0.483498250614113     2.625815747298708     1.065301916580449
    H                2.128984749385886    -0.552943852701291     2.308162916580450
    H               -0.306759250614114     2.370201747298709     2.837130916580449

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-009ASP-021LYS-1-dimer.npy', np.array(charges))