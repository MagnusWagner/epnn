import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.864290650104772    -0.026513060673067    -1.155245128305765
    C               -2.833290650104773    -0.050513060673067     0.007754871694235
    H               -2.290290650104773     0.497486939326933    -2.014245128305765
    H               -0.949290650104772     0.486486939326933    -0.855245128305765
    H               -1.589290650104772    -1.043513060673067    -1.438245128305765
    H               -2.457290650104772    -0.772513060673067     0.734754871694235
    H               -3.825344650104773    -0.389023060673067    -0.325775128305765
    H               -2.877900650104772     0.922266939326933     0.519324871694235
    C                1.595709349895228     0.054486939326933     0.490754871694235
    C                3.096709349895227     0.035486939326933     0.653754871694235
    H                1.322709349895227    -0.121513060673067    -0.550245128305765
    H                1.151709349895228    -0.746513060673067     1.080754871694235
    H                1.189709349895227     1.009486939326933     0.826754871694235
    H                3.453709349895227    -0.893513060673067     0.209754871694235
    H                3.565162349895228     0.880726939326933     0.128274871694235
    H                3.367878349895227     0.015966939326933     1.719624871694235

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-154ILE-160VAL-1-dimer.npy', np.array(charges))