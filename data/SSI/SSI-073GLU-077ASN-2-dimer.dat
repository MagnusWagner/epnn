import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C               -0.483654356919193     2.557557347572569     0.484527867801067
    C                0.937345643080807     2.096557347572568     0.181527867801067
    O                1.150345643080807     0.873557347572569     0.032527867801067
    O                1.845345643080807     2.954557347572569     0.095527867801067
    H               -0.507654356919193     3.038557347572569     1.465527867801067
    H               -1.162654356919193     1.702557347572569     0.530527867801067
    H               -0.859354356919193     3.271458347572569    -0.263265132198933
    C               -1.565654356919193    -2.893442652427431    -1.201472132198933
    C               -0.783654356919193    -2.106442652427431    -0.175472132198933
    O                0.424345643080807    -2.278442652427431    -0.028472132198933
    N               -1.471654356919193    -1.253442652427431     0.564527867801067
    H               -2.450654356919193    -2.329442652427431    -1.502472132198933
    H               -1.898654356919193    -3.815442652427431    -0.723472132198933
    H               -0.953654356919193    -0.662442652427431     1.196527867801067
    H               -2.461654356919193    -1.133442652427431     0.428527867801067
    H               -0.965714356919193    -3.133419652427432    -2.091686132198933

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-073GLU-077ASN-2-dimer.npy', np.array(charges))