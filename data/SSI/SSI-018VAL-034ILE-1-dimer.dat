import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.473169016499336     0.444409756592000    -1.476325947439264
    C               -0.711169016499336     1.757409756592001    -1.579325947439264
    H               -2.361169016499336     0.477409756592000    -2.108325947439264
    H               -0.836169016499336    -0.375590243408000    -1.812325947439264
    H               -1.774169016499336     0.239409756592000    -0.449325947439264
    H                0.128830983500664     1.718409756592000    -0.884325947439264
    H               -1.355821016499336     2.605179756592000    -1.304175947439264
    H               -0.305929016499336     1.879989756592001    -2.594585947439264
    C                0.844830983500664    -0.388590243408000     1.472674052560736
    C                1.338830983500664    -1.807590243408000     1.573674052560736
    H                0.224830983500664    -0.277590243408000     0.588674052560736
    H                0.245830983500664    -0.141590243408000     2.347674052560736
    H                1.682830983500664     0.304409756592000     1.411674052560736
    H                0.491830983500664    -2.486590243408000     1.482674052560736
    H                1.744830983500664    -1.919590243408000     2.577674052560736
    H                2.122320983500664    -2.091000243408000     0.855474052560736

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-018VAL-034ILE-1-dimer.npy', np.array(charges))