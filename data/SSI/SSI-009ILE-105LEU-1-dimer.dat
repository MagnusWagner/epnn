import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.789041751233742    -1.824520231376206    -0.118546136573692
    C                0.228958248766258    -2.098520231376206    -1.214546136573692
    H               -1.428041751233742    -2.686520231376206     0.053453863426308
    H               -0.261041751233742    -1.606520231376206     0.807453863426308
    H               -1.404041751233742    -0.966520231376206    -0.389546136573692
    H                0.885958248766258    -2.912520231376206    -0.903546136573692
    H                0.835958248766258    -1.200520231376206    -1.316546136573693
    H               -0.250771751233742    -2.360980231376206    -2.168995136573693
    C                0.769958248766258     1.484479768623794     0.333453863426308
    C               -0.213041751233742     2.436479768623794     0.999453863426307
    H                0.588958248766258     0.462479768623794     0.645453863426307
    H                0.658958248766258     1.545479768623794    -0.749546136573693
    H                1.790958248766258     1.755479768623794     0.601453863426308
    H               -1.212041751233742     2.233479768623794     0.611453863426308
    H               -0.216631751233742     2.293689768623794     2.090140863426307
    H                0.049488248766258     3.467749768623794     0.720966863426307

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-009ILE-105LEU-1-dimer.npy', np.array(charges))