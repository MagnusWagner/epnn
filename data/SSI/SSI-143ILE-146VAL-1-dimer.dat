import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.253600854069836    -1.454334974959966    -1.409066281690621
    C                0.292399145930164    -2.763334974959966    -0.823066281690622
    H               -0.178600854069836    -1.469334974959966    -2.497066281690622
    H               -1.296600854069836    -1.315334974959966    -1.124066281690622
    H                0.289399145930164    -0.592334974959966    -1.035066281690622
    H                0.095399145930164    -2.760334974959966     0.250933718309378
    H                1.379229145930164    -2.835224974959966    -0.976766281690622
    H               -0.226120854069836    -3.625394974959966    -1.268066281690621
    C                0.061399145930164     1.487665025040034     0.676933718309378
    C               -0.098600854069836     2.730665025040034     1.547933718309378
    H                1.113399145930164     1.265665025040034     0.501933718309378
    H               -0.380600854069836     0.628665025040034     1.182933718309378
    H               -0.445600854069836     1.636665025040035    -0.277066281690622
    H                0.504399145930164     2.571665025040034     2.441933718309378
    H                0.269339145930164     3.622595025040034     1.019633718309378
    H               -1.142650854069836     2.864845025040034     1.867233718309378

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-143ILE-146VAL-1-dimer.npy', np.array(charges))