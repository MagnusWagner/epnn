import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.190980324934578     1.847773471020974     0.296335531270749
    C               -0.157980324934578     2.902773471020974    -0.804664468729250
    H               -0.582980324934578     2.239773471020973     1.233335531270749
    H               -0.845980324934578     1.043773471020974    -0.030664468729251
    H                0.811019675065422     1.455773471020974     0.479335531270749
    H               -1.174980324934578     3.066773471020974    -1.159664468729251
    H                0.241499675065422     3.844463471020974    -0.400154468729251
    H                0.456389675065422     2.557463471020974    -1.649244468729250
    C                0.048019675065422    -1.821226528979026    -0.252664468729251
    C                0.302019675065422    -2.926226528979027     0.761335531270749
    H               -0.605980324934578    -1.075226528979026     0.189335531270749
    H                0.993019675065422    -1.358226528979026    -0.540664468729250
    H               -0.417980324934578    -2.224226528979027    -1.151664468729251
    H                0.777019675065422    -3.768226528979026     0.259335531270749
    H               -0.643750324934578    -3.253663528979026     1.217745531270749
    H                0.979859675065422    -2.565289528979027     1.548895531270750

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-029VAL-087LEU-1-dimer.npy', np.array(charges))