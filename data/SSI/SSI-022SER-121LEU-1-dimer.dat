import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.064123158308866    -0.872065271970402    -0.240821147713981
    C               -2.480123158308866    -0.677065271970402    -0.784821147713980
    O               -0.840123158308866    -2.236065271970402     0.053178852286019
    H               -0.327123158308866    -0.518065271970402    -0.963821147713981
    H               -0.950123158308866    -0.303065271970402     0.678178852286019
    H               -3.179123158308866    -1.145065271970402    -0.092821147713981
    H               -0.538123158308866    -2.671065271970402    -0.758821147713980
    H               -2.576673158308866    -1.139455271970402    -1.778241147713981
    H               -2.726053158308866     0.394184728029598    -0.828941147713981
    C                1.608876841691134     1.546934728029598     0.342178852286019
    C                2.805876841691134     2.432934728029598     0.675178852286019
    H                0.784876841691134     2.157934728029598    -0.030821147713981
    H                1.892876841691134     0.832934728029598    -0.430821147713981
    H                1.279876841691134     0.995934728029598     1.215178852286019
    H                3.609876841691134     1.815934728029598     1.075178852286019
    H                2.523056841691134     3.202644728029598     1.408368852286019
    H                3.175036841691134     2.922734728029598    -0.237961147713981

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-022SER-121LEU-1-dimer.npy', np.array(charges))