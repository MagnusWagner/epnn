import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.031892773493281    -2.338108429762193     1.460509098464844
    C                0.244892773493281    -1.377108429762193     0.307509098464844
    O               -0.353107226506719    -0.280108429762193     0.333509098464844
    O                0.985892773493281    -1.746108429762193    -0.619490901535156
    H                0.608892773493281    -3.257108429762193     1.325509098464844
    H               -1.023107226506719    -2.620108429762193     1.479509098464844
    H                0.282982773493281    -1.895978429762193     2.435944098464844
    C               -0.900107226506719     3.202891570237807    -0.961490901535156
    N                0.009892773493281     2.154891570237807    -0.436490901535156
    H               -0.466107226506719     1.280891570237807    -0.226490901535156
    H                0.739892773493281     1.930891570237807    -1.115490901535156
    H                0.474892773493281     2.456891570237807     0.412509098464844
    H               -1.489107226506719     2.802891570237807    -1.793490901535156
    H               -0.309107226506719     4.042891570237806    -1.338490901535156
    H               -1.577667226506719     3.575620570237807    -0.179193901535156

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-106GLU-129LYS-1-dimer.npy', np.array(charges))