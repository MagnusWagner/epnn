import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.629081465040889     0.977700533723304     1.657602598370560
    C               -0.833081465040889     2.171700533723304     2.581602598370561
    H               -1.560081465040889     0.421700533723304     1.538602598370560
    H               -0.328081465040889     1.345700533723304     0.680602598370560
    H                0.140918534959111     0.316700533723304     2.051602598370561
    H               -1.683081465040889     2.722700533723303     2.199602598370561
    H               -1.053141465040889     1.842340533723304     3.607806598370561
    H                0.052258534959111     2.824510533723304     2.585213598370561
    C                0.604918534959111    -0.541299466276696    -1.629397401629440
    C                1.518918534959111    -1.284299466276696    -0.645397401629439
    C               -0.618081465040889    -1.360299466276696    -2.071397401629440
    H                0.263918534959111     0.375700533723304    -1.158397401629440
    H                1.187918534959111    -0.269299466276696    -2.510397401629439
    H                0.928918534959111    -1.601299466276696     0.218602598370560
    H               -0.269081465040889    -2.295299466276696    -2.496397401629439
    H               -1.240081465040889    -1.582299466276696    -1.202397401629440
    H                2.339688534959111    -0.637859466276696    -0.301227901629440
    H                1.919198534959111    -2.196329466276696    -1.112271301629439
    H               -1.218321465040889    -0.832399466276696    -2.827068401629439

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-025VAL-185ARG-1-dimer.npy', np.array(charges))