import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.646587719631001    -0.091050022129730    -0.643165384910949
    C               -2.534587719631000    -1.251050022129730    -0.169165384910949
    H               -1.171587719631001     0.391949977870270     0.209834615089051
    H               -0.866587719631001    -0.472050022129730    -1.302165384910948
    H               -2.248587719631000     0.629949977870270    -1.186165384910949
    H               -1.914587719631001    -1.995050022129731     0.329834615089051
    H               -3.333337719631000    -0.895330022129731     0.498264615089051
    H               -3.009227719631001    -1.689290022129730    -1.059475384910948
    C                1.866412280368999     0.852949977870269    -0.305165384910949
    C                2.317412280369000     0.484949977870270     1.125834615089051
    H                2.659412280369000     1.382949977870270    -0.826165384910949
    H                1.642412280368999    -0.062050022129730    -0.853165384910949
    H                0.969412280368999     1.470949977870269    -0.279165384910949
    H                1.512412280368999    -0.057050022129730     1.621834615089051
    H                2.489542280369000     1.460129977870270     1.604784615089051
    H                3.239182280369000    -0.115100022129730     1.142464615089052

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-186VAL-223LEU-1-dimer.npy', np.array(charges))