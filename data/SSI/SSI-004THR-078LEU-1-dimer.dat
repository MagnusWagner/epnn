import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.761945556115494    -0.567204888852479     0.993736010248457
    C               -1.674945556115494    -0.991204888852479     2.138736010248457
    H                0.052054443884506     0.049795111147521     1.373736010248457
    H               -0.345945556115494    -1.452204888852479     0.510736010248457
    H               -1.331945556115495    -0.012204888852479     0.249736010248457
    H               -2.544945556115494    -1.502204888852479     1.726736010248457
    H               -2.003625556115495    -0.119977888852479     2.724338010248458
    H               -1.127995556115495    -1.683187888852479     2.796005010248457
    C                0.559054443884506     1.015795111147521    -1.870263989751543
    C                1.880054443884505     0.547795111147521    -1.263263989751543
    H                0.677054443884506     1.178795111147521    -2.941263989751543
    H               -0.208945556115494     0.259795111147521    -1.724263989751543
    H                0.228054443884506     1.939795111147521    -1.404263989751543
    H                1.780054443884506     0.536795111147521    -0.179263989751543
    H                2.701254443884505     1.225677111147521    -1.539143989751543
    H                2.098524443884505    -0.482554888852479    -1.580513989751543

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-004THR-078LEU-1-dimer.npy', np.array(charges))