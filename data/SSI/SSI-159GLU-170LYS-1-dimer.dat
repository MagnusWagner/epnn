import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                1.569583744189803    -1.717387520135446     1.051838692146022
    C                0.595583744189803    -0.632387520135446     1.538838692146022
    O                0.737583744189804     0.555612479864554     1.164838692146022
    O               -0.332416255810197    -1.000387520135446     2.303838692146021
    H                1.011583744189803    -2.345387520135446     0.357838692146022
    H                1.880583744189803    -2.339387520135446     1.894838692146021
    H                2.470033744189803    -1.322087520135446     0.558968692146022
    C               -0.617416255810196     1.325612479864554    -1.678161307853978
    C                0.105583744189803     0.686612479864554    -2.871161307853979
    C               -2.053416255810197     0.825612479864554    -1.512161307853978
    H               -0.045416255810197     1.120612479864554    -0.807161307853978
    H               -0.641416255810196     2.408612479864555    -1.815161307853978
    H               -0.423416255810197     0.945612479864554    -3.790161307853979
    H                0.118583744189803    -0.398387520135446    -2.752161307853978
    H               -2.650416255810196     1.162612479864554    -2.367161307853979
    H               -2.036416255810197    -0.262387520135446    -1.521161307853978
    H                1.133797744189803     1.075532479864554    -2.910125307853979
    H               -2.484104255810196     1.202282479864554    -0.572681307853978

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-159GLU-170LYS-1-dimer.npy', np.array(charges))