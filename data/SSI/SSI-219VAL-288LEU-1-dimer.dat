import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.511985671958560     1.513489929346170     0.510238480826837
    C                0.930985671958560     2.979489929346171     0.615238480826836
    H                0.659985671958560     1.181489929346170    -0.516761519173163
    H                1.123985671958560     0.904489929346170     1.175238480826837
    H               -0.533014328041440     1.380489929346170     0.784238480826837
    H                0.802985671958560     3.301489929346170     1.650238480826837
    H                0.307187671958560     3.609711929346170    -0.035681519173163
    H                1.994128671958560     3.082490929346170     0.352333980826837
    C               -0.952014328041440    -1.539510070653830    -0.733761519173163
    C               -0.493014328041440    -2.950510070653830    -0.389761519173163
    H               -0.142014328041440    -0.847510070653830    -0.536761519173163
    H               -1.216014328041440    -1.488510070653830    -1.790761519173163
    H               -1.825014328041440    -1.261510070653830    -0.150761519173163
    H               -1.292014328041440    -3.649510070653830    -0.632761519173163
    H               -0.242751328041440    -3.044448070653830     0.677264180826836
    H                0.387045671958560    -3.203915070653830    -0.999089519173163

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-219VAL-288LEU-1-dimer.npy', np.array(charges))