import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                0.806687880925296    -0.641219801383894    -3.014263442546596
    C               -0.210312119074704     0.063780198616106    -2.141263442546596
    O               -0.810312119074704    -0.610219801383894    -1.274263442546597
    O               -0.402312119074705     1.286780198616106    -2.311263442546596
    H                1.188687880925295     0.029780198616106    -3.784263442546596
    H                0.299687880925295    -1.465219801383895    -3.522263442546596
    H                1.639107880925296    -1.051313801383894    -2.423584442546596
    C               -0.220312119074704    -1.432219801383894     2.185736557453403
    C                0.189687880925296     0.032780198616106     2.235736557453404
    O                0.762687880925295     0.504780198616106     3.216736557453403
    N               -0.098312119074705     0.761780198616106     1.171736557453404
    H                0.144687880925296     1.737780198616106     1.164736557453403
    H               -0.487312119074705     0.306780198616106     0.343736557453403
    H               -0.877312119074705    -1.596219801383895     1.331736557453403
    H               -0.781312119074705    -1.648219801383894     3.091736557453403
    H                0.644257880925295    -2.108178801383894     2.110869557453403

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-107ASP-125ASN-1-dimer.npy', np.array(charges))