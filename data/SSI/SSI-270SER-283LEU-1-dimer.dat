import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.657444046582764     0.221920163398373     1.385119416726909
    C                2.168444046582764     0.053920163398373     1.557119416726909
    O                0.366444046582764     1.461920163398373     0.792119416726909
    H                0.256444046582764    -0.586079836601627     0.771119416726909
    H                0.182444046582764     0.183920163398373     2.367119416726909
    H                2.529444046582765     0.907920163398373     2.120119416726908
    H                0.864444046582764     2.197920163398373     1.228119416726909
    H                2.641054046582764    -0.002999836601627     0.565459416726908
    H                2.400824046582764    -0.864079836601627     2.116839416726909
    C               -1.233555953417236    -0.283079836601627    -1.797880583273091
    C               -2.003555953417236    -1.619079836601627    -2.010880583273091
    H               -1.490555953417236     0.435920163398373    -2.574880583273091
    H               -1.520555953417236     0.144920163398373    -0.837880583273091
    H               -0.157555953417236    -0.463079836601627    -1.803880583273091
    H               -3.060555953417236    -1.377079836601627    -2.064880583273092
    H               -1.704945953417236    -2.087919836601627    -2.960100583273091
    H               -1.859845953417236    -2.326789836601627    -1.181130583273091

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-270SER-283LEU-1-dimer.npy', np.array(charges))