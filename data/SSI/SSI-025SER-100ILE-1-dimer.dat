import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.416702647175276     1.321251821199366    -0.274454052872958
    C                1.073702647175276     2.013251821199366     0.918545947127042
    O                1.270702647175276     0.329251821199366    -0.835454052872958
    H               -0.505297352824724     0.848251821199366     0.056545947127042
    H                0.165702647175276     2.062251821199367    -1.033454052872959
    H                0.287702647175276     2.620251821199366     1.368545947127042
    H                2.017702647175276     0.771251821199366    -1.263454052872958
    H                1.906298847175276     2.658801821199366     0.602235947127042
    H                1.336650647175276     1.270771821199366     1.686385947127041
    C               -1.984297352824724    -1.450748178800634    -0.213454052872958
    C               -0.908297352824724    -2.257748178800634     0.489545947127042
    H               -2.839297352824724    -2.072748178800634    -0.481454052872958
    H               -2.338297352824724    -0.660748178800634     0.452545947127042
    H               -1.585297352824724    -0.979748178800634    -1.112454052872958
    H               -0.155297352824724    -1.558748178800633     0.854545947127042
    H               -0.411918352824724    -2.968198178800634    -0.187854052872958
    H               -1.349996352824724    -2.763788178800633     1.360655947127042

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-025SER-100ILE-1-dimer.npy', np.array(charges))