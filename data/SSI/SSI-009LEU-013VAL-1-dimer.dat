import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.529413767227229     1.012664566949185     1.206695052990372
    C                0.383413767227229     1.103664566949185     2.207695052990372
    H                2.392413767227229     1.564664566949185     1.572695052990372
    H                1.803413767227229    -0.031335433050815     1.055695052990372
    H                1.223413767227229     1.427664566949185     0.248695052990372
    H               -0.496586232772771     0.622664566949185     1.782695052990372
    H                0.179039767227229     2.157804566949185     2.446485052990372
    H                0.630067767227229     0.552664566949185     3.127235052990372
    C               -0.283586232772771    -0.968335433050815    -1.366304947009627
    C               -1.628586232772771    -1.143335433050815    -2.050304947009627
    H               -0.063586232772771     0.084664566949185    -1.212304947009628
    H               -0.296586232772771    -1.465335433050815    -0.396304947009628
    H                0.502413767227229    -1.409335433050815    -1.979304947009628
    H               -2.401586232772770    -0.748335433050815    -1.390304947009627
    H               -1.652150232772771    -0.599935433050815    -3.006424947009628
    H               -1.828067232772771    -2.211315433050815    -2.222424947009627

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-009LEU-013VAL-1-dimer.npy', np.array(charges))