import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.596150037657696     1.202218507240509    -1.001857889670156
    C               -0.854150037657696     2.237218507240509    -2.091857889670156
    H               -1.542150037657696     0.770218507240509    -0.669857889670156
    H                0.038849962342304     0.407218507240509    -1.383857889670156
    H               -0.101150037657696     1.678218507240509    -0.155857889670156
    H                0.119849962342304     2.617218507240509    -2.389857889670156
    H               -1.464640037657696     3.065941507240509    -1.703887889670156
    H               -1.335400037657696     1.810805507240509    -2.984367889670156
    C                0.307849962342304    -2.000781492759491     0.977142110329844
    C                1.139849962342304    -1.437781492759491     2.115142110329844
    H                0.554849962342304    -3.048781492759491     0.820142110329844
    H               -0.752150037657696    -1.932781492759491     1.223142110329844
    H                0.497849962342304    -1.446781492759491     0.059142110329844
    H                0.973849962342304    -2.061781492759491     2.994142110329844
    H                2.206449962342304    -1.459942492759491     1.847062110329844
    H                0.834749962342304    -0.409959492759491     2.361102110329844

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-173LEU-190VAL-1-dimer.npy', np.array(charges))