import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                1.935724517046680     0.158129683737724    -0.530931163536468
    C                2.229724517046680    -1.044870316262276    -1.416931163536468
    C                1.531724517046680     1.348129683737724    -1.394931163536468
    H                1.140724517046680    -0.089870316262276     0.164068836463532
    H                2.830724517046680     0.420129683737724     0.035068836463532
    H                3.068724517046680    -0.797870316262276    -2.069931163536469
    H                1.357724517046680    -1.235870316262276    -2.045931163536469
    H                2.310724517046680     1.528129683737724    -2.138931163536468
    H                0.597724517046680     1.116129683737724    -1.912931163536468
    H                2.460985217046680    -1.967030316262276    -0.863634163536468
    H                1.397526417046680     2.257213683737723    -0.790318163536468
    C               -0.981275482953320    -0.533870316262276     2.156068836463532
    C               -1.440275482953320    -0.094870316262276     0.768068836463532
    O               -1.322275482953320     1.112129683737724     0.456068836463532
    O               -1.926275482953320    -0.946870316262276    -0.010931163536468
    H               -1.310275482953320     0.213129683737724     2.883068836463532
    H                0.108724517046680    -0.570870316262276     2.208068836463531
    H               -1.408723482953320    -1.503380316262276     2.451606836463531

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-023LYS-029GLU-2-dimer.npy', np.array(charges))