import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.255019835508098     0.181799530714120    -1.028182001209250
    C                1.287019835508098     1.369799530714120    -1.993182001209250
    O                2.027019835508098     0.426799530714120     0.138817998790750
    H                0.223019835508098    -0.032200469285880    -0.751182001209250
    H                1.665019835508098    -0.698200469285880    -1.524182001209250
    H                2.329019835508098     1.598799530714121    -2.203182001209250
    H                1.726019835508098     1.258799530714121     0.530817998790750
    H                0.806689835508098     2.244769530714120    -1.530892001209250
    H                0.808449835508098     1.073029530714120    -2.938112001209250
    C               -1.756980164491902    -1.007200469285880     0.922817998790750
    C               -2.935980164491902    -1.048200469285880     1.911817998790750
    H               -0.814980164491902    -1.178200469285880     1.445817998790750
    H               -1.891980164491902    -1.773200469285880     0.164817998790750
    H               -1.722980164491902    -0.051200469285880     0.400817998790750
    H               -2.934980164491902    -2.011200469285880     2.422817998790750
    H               -2.874650164491902    -0.237480469285880     2.652747998790750
    H               -3.878280164491902    -0.968650469285880     1.349907998790750

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-005SER-028VAL-1-dimer.npy', np.array(charges))