import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.722787387942868     1.709430540469721     1.021601695484855
    C                2.067787387942868     1.281430540469721     1.622601695484855
    H               -0.082212612057132     1.114430540469721     1.454601695484855
    H                0.539787387942868     2.760430540469720     1.249601695484855
    H                0.733787387942868     1.573430540469721    -0.060398304515145
    H                2.005787387942868     1.439430540469721     2.697601695484855
    H                2.243735387942868     0.215730540469721     1.414467695484855
    H                2.884832387942868     1.901779540469721     1.225606695484855
    C               -1.096212612057132    -0.825569459530279    -1.114398304515145
    C               -1.692212612057132    -2.169569459530279    -1.530398304515145
    H               -0.101212612057132    -0.709569459530279    -1.545398304515145
    H               -1.729212612057132    -0.015569459530279    -1.478398304515145
    H               -1.030212612057132    -0.766569459530279    -0.027398304515145
    H               -1.737212612057132    -2.189569459530279    -2.619398304515145
    H               -1.042244612057132    -2.980039459530279    -1.168903304515145
    H               -2.711216612057132    -2.292979459530279    -1.134921304515145

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-038LEU-054LEU-1-dimer.npy', np.array(charges))