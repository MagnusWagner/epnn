import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.302547042794429     3.462862738444919     1.161128396239204
    C               -0.423547042794429     2.275862738444919     0.820128396239204
    O                0.684452957205571     2.144862738444919     1.332128396239204
    N               -0.919547042794429     1.398862738444919    -0.032871603760796
    H               -0.406547042794429     0.551862738444919    -0.252871603760796
    H               -1.820547042794429     1.561862738444919    -0.470871603760796
    H               -1.754547042794429     3.852862738444919     0.248128396239204
    H               -0.657547042794429     4.232862738444919     1.580128396239204
    H               -2.089547042794429     3.200052738444919     1.883318396239204
    C               -0.018547042794429    -3.668137261555081    -0.830871603760796
    C                0.470452957205571    -2.231137261555081    -0.812871603760796
    O               -0.309547042794429    -1.297137261555081    -0.950871603760796
    N                1.767452957205571    -2.043137261555080    -0.635871603760796
    H                0.826452957205571    -4.326137261555080    -0.618871603760796
    H               -0.377547042794429    -3.886137261555081    -1.835871603760796
    H                2.123452957205571    -1.098137261555081    -0.651871603760796
    H                2.401452957205571    -2.826137261555081    -0.574871603760796
    H               -0.804667042794429    -3.853567261555081    -0.084131603760796

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-025ASN-181ASN-1-dimer.npy', np.array(charges))