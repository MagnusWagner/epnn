import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.182506557865484    -0.878559201056029    -1.434163255482659
    C               -0.806506557865484    -1.762559201056029    -2.513163255482659
    H                0.800493442134516    -0.540559201056029    -1.763163255482658
    H               -0.805506557865484     0.002440798943971    -1.271163255482658
    H               -0.059506557865484    -1.433559201056029    -0.506163255482659
    H               -1.819506557865484    -2.022559201056029    -2.218163255482659
    H               -0.242260557865484    -2.703473201056029    -2.592583255482659
    H               -0.886057557865484    -1.214304201056029    -3.463473255482659
    C                0.364493442134516     0.942440798943971     1.322836744517341
    C                0.618493442134516     1.698440798943971     2.626836744517342
    H                0.266493442134516     1.632440798943971     0.485836744517341
    H                1.213493442134516     0.291440798943971     1.114836744517341
    H               -0.525506557865484     0.327440798943971     1.397836744517341
    H                1.534493442134516     2.254440798943971     2.504836744517342
    H               -0.178407557865484     2.427138798943972     2.836471744517341
    H                0.773531442134516     0.981931798943971     3.446945744517341

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-018ALA-023VAL-1-dimer.npy', np.array(charges))