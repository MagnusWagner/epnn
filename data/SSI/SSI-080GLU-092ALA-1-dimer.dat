import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                0.646297807504522    -1.282114568972382    -1.770399977320929
    C                1.111297807504522    -0.234114568972382    -0.794399977320929
    O                0.911297807504522    -0.413114568972382     0.440600022679071
    O                1.689297807504522     0.767885431027618    -1.267399977320928
    H               -0.425702192495478    -1.424114568972382    -1.622399977320929
    H                1.123297807504522    -2.239114568972381    -1.550399977320929
    H                0.794707807504522    -1.017094568972382    -2.827629977320928
    C               -2.112702192495478    -0.180114568972382     1.739600022679072
    C               -2.155702192495478     1.329885431027618     1.594600022679072
    H               -1.408702192495478    -0.463114568972382     2.523600022679072
    H               -3.103702192495478    -0.558114568972382     1.995600022679072
    H               -1.799702192495478    -0.632114568972381     0.798600022679071
    H               -2.831702192495478     1.568885431027618     0.771600022679071
    H               -1.163572192495478     1.737313431027618     1.350290022679071
    H               -2.562492192495478     1.760353431027618     2.521540022679072

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-080GLU-092ALA-1-dimer.npy', np.array(charges))