import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -2 1
    --
    -2 1
    C                1.655241747282733    -0.238716338413162     0.465998470438306
    C                3.178241747282733    -0.124716338413162     0.324998470438306
    C                1.010241747282733     0.995283661586838     1.099998470438306
    O                0.360241747282733     1.773283661586838     0.368998470438306
    O                1.134241747282733     1.186283661586838     2.331998470438307
    H                1.233241747282733    -0.408716338413162    -0.528001529561694
    H                1.412241747282733    -1.112716338413162     1.073998470438307
    H                3.623241747282734     0.066283661586838     1.301998470438307
    H                3.390241747282734     0.735283661586838    -0.311001529561694
    H                3.637665747282734    -1.019949338413162    -0.119401529561694
    C               -2.421758252717267     0.330283661586838    -1.560001529561693
    C               -1.774758252717267    -0.966716338413162    -1.121001529561694
    O               -1.134758252717267    -1.658716338413162    -1.948001529561694
    O               -1.940758252717267    -1.308716338413162     0.066998470438306
    H               -2.480758252717266     1.031283661586838    -0.728001529561694
    H               -3.431758252717267     0.086283661586838    -1.888001529561694
    H               -1.905007252717267     0.801629661586838    -2.409001529561694

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-069GLU-123ASP-1-dimer.npy', np.array(charges))