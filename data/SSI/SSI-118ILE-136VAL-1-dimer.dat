import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.318145514809837    -0.270595732750069     1.275847486004667
    C                2.408145514809837     0.316404267249931     2.175847486004667
    H                0.434145514809837     0.369404267249931     1.288847486004667
    H                1.677145514809837    -0.359595732750069     0.251847486004667
    H                1.037145514809837    -1.269595732750069     1.611847486004667
    H                3.274145514809836    -0.339595732750069     2.142847486004667
    H                2.045009514809836     0.364294267249931     3.213073486004667
    H                2.721258514809837     1.306614267249931     1.813295486004667
    C               -1.205854485190163     0.085404267249931    -1.351152513995333
    C               -2.521854485190163    -0.121595732750069    -2.101152513995333
    H               -1.379854485190163     0.504404267249931    -0.361152513995333
    H               -0.707854485190163    -0.876595732750069    -1.228152513995333
    H               -0.555854485190163     0.756404267249931    -1.916152513995333
    H               -3.104854485190163    -0.857595732750069    -1.548152513995333
    H               -3.096089485190163     0.815014267249931    -2.156079513995333
    H               -2.327459485190163    -0.527665732750069    -3.104805513995333

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-118ILE-136VAL-1-dimer.npy', np.array(charges))