import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.730216664853484    -0.904784291084248    -0.811990533096317
    C               -1.962216664853484    -1.691784291084248     0.477009466903683
    H               -2.337216664853484    -1.295784291084248    -1.626990533096316
    H               -2.007216664853484     0.137215708915752    -0.652990533096316
    H               -0.678216664853485    -0.953784291084248    -1.097990533096317
    H               -3.019216664853484    -1.629784291084248     0.726009466903683
    H               -1.685873664853484    -2.747173291084247     0.336338466903683
    H               -1.387860664853484    -1.244823291084248     1.301836466903683
    C                1.149783335146516     1.364215708915753    -0.130990533096317
    C                2.546783335146515     1.228215708915752     0.463009466903683
    H                1.105783335146516     0.881215708915752    -1.108990533096316
    H                0.425783335146516     0.905215708915752     0.535009466903683
    H                0.872783335146516     2.413215708915752    -0.239990533096317
    H                2.570783335146515     1.695215708915752     1.442009466903683
    H                3.290652335146516     1.721735708915752    -0.179715533096317
    H                2.800600335146516     0.166795708915752     0.600734466903683

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-146VAL-161VAL-1-dimer.npy', np.array(charges))