import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.393385614737531    -1.486028483096268    -0.923669178461411
    C                1.737385614737530    -2.008028483096267     0.464330821538589
    H                1.546385614737531    -2.271028483096267    -1.663669178461411
    H                0.347385614737530    -1.175028483096267    -0.956669178461411
    H                2.021385614737531    -0.626028483096267    -1.162669178461411
    H                1.546385614737531    -1.192028483096267     1.163330821538589
    H                2.801905614737531    -2.273592483096267     0.543547821538589
    H                1.058155614737530    -2.825296483096267     0.748438821538589
    C               -1.097614385262470     1.140971516903732     0.198330821538589
    C               -2.030614385262470     2.344971516903733     0.262330821538589
    H               -1.239614385262470     0.495971516903733     1.067330821538589
    H               -1.300614385262470     0.566971516903733    -0.707669178461411
    H               -0.060614385262470     1.478971516903733     0.165330821538589
    H               -1.811614385262470     2.999971516903732    -0.582669178461411
    H               -1.862984385262470     2.901983516903733     1.195945821538589
    H               -3.076434385262469     2.015744516903732     0.173664821538589

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-101ALA-128ALA-1-dimer.npy', np.array(charges))