import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.179845045613795    -0.964304169804808    -0.838624987772917
    C               -1.499845045613796    -1.611304169804808    -2.177624987772917
    H               -0.723845045613796     0.013695830195192    -0.993624987772917
    H               -2.102845045613796    -0.819304169804808    -0.276624987772917
    H               -0.510845045613796    -1.603304169804808    -0.261624987772917
    H               -2.111845045613796    -0.927304169804808    -2.764624987772917
    H               -0.569625045613796    -1.839364169804808    -2.718634987772917
    H               -2.067805045613796    -2.540104169804808    -2.020294987772917
    C                1.211154954386205     0.554695830195192     1.667375012227083
    C                1.472154954386204     2.020695830195192     1.344375012227083
    H                2.098154954386205     0.103695830195192     2.112375012227083
    H                0.390154954386204     0.470695830195192     2.382375012227083
    H                0.957154954386204     0.011695830195192     0.758375012227083
    H                1.830154954386204     2.509695830195192     2.251375012227083
    H                2.229634954386205     2.110825830195192     0.551845012227083
    H                0.538454954386204     2.511655830195192     1.032665012227083

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-124LEU-181VAL-1-dimer.npy', np.array(charges))