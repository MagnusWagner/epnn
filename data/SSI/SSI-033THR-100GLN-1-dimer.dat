import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.602162238938347    -1.872404208503258     0.784641106110624
    C               -1.773162238938347    -2.754404208503257     0.446641106110624
    H               -0.695162238938347    -0.961404208503257     0.203641106110624
    H               -0.616162238938347    -1.625404208503258     1.846641106110624
    H                0.333837761061653    -2.364404208503258     0.531641106110624
    H               -1.843162238938348    -3.511404208503258     1.227641106110624
    H               -1.698612238938348    -3.289010208503258    -0.511818893889376
    H               -2.687315238938347    -2.144462208503258     0.494551106110624
    C                0.243837761061653     1.135595791496743    -1.769358893889376
    C                0.609837761061653     1.217595791496742    -0.298358893889376
    O                0.009837761061653     1.946595791496742     0.447641106110624
    N                1.526837761061653     0.461595791496742     0.314641106110624
    H                0.220837761061653     0.081595791496742    -2.046358893889376
    H                0.807837761061653     1.802595791496743    -2.427358893889377
    H                1.742837761061653     0.712595791496742     1.261641106110624
    H                1.989837761061652    -0.315404208503257    -0.113358893889376
    H               -0.807312238938347     1.378810791496743    -1.983688893889376

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-033THR-100GLN-1-dimer.npy', np.array(charges))