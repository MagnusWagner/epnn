import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.259724712918407     1.577227896517322    -1.087693367755244
    C                0.050724712918407     1.174227896517322    -2.538693367755243
    H                0.695724712918407     2.577227896517322    -1.039693367755244
    H               -0.699275287081593     1.580227896517322    -0.571693367755244
    H                0.924724712918407     0.864227896517322    -0.596693367755244
    H               -0.543275287081593     1.963227896517322    -2.996693367755243
    H                1.021044712918407     1.096945896517322    -3.051043367755244
    H               -0.523525287081593     0.237900896517322    -2.598073367755244
    C               -0.683275287081593    -0.844772103482678     1.644306632244756
    C                0.379724712918407    -1.907772103482678     1.981306632244756
    H               -0.202275287081593     0.116227896517322     1.462306632244756
    H               -1.227275287081593    -1.143772103482678     0.746306632244756
    H               -1.405275287081593    -0.729772103482678     2.451306632244757
    H               -0.126275287081593    -2.825772103482678     2.254306632244757
    H                0.992804712918407    -1.610174303482678     2.844766632244756
    H                1.010734712918407    -2.113536103482678     1.104106632244756

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-122LEU-188VAL-1-dimer.npy', np.array(charges))