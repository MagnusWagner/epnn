import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                2.060915192748408     0.834843184518904    -0.395506892346112
    C                1.582915192748409     2.245843184518904    -0.011506892346112
    H                2.991915192748408     0.893843184518904    -0.964506892346112
    H                2.226915192748408     0.236843184518904     0.501493107653888
    H                1.303915192748408     0.343843184518904    -1.008506892346112
    H                0.688915192748408     2.160843184518904     0.610493107653888
    H                1.353165192748409     2.816053184518904    -0.923686892346112
    H                2.370525192748409     2.766843184518904     0.552613107653888
    C               -1.228084807251592    -1.061156815481096     0.165493107653888
    C               -2.415084807251592    -2.017156815481096     0.247493107653888
    H               -0.406084807251592    -1.427156815481096     0.783493107653888
    H               -0.886084807251592    -0.986156815481096    -0.866506892346112
    H               -1.522084807251592    -0.065156815481096     0.496493107653888
    H               -3.264084807251592    -1.568156815481096    -0.261506892346112
    H               -2.705154807251592    -2.248486815481096     1.283033107653888
    H               -2.159724807251592    -2.951406815481096    -0.274016892346112

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-220ALA-256THR-1-dimer.npy', np.array(charges))