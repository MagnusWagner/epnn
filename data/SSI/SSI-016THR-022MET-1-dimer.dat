import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.171318901226618    -2.325717444901310    -0.618379468191800
    C                1.781318901226618    -3.521717444901309     0.110620531808200
    H                1.218318901226618    -2.476717444901309    -1.697379468191800
    H                0.130318901226618    -2.207717444901309    -0.317379468191800
    H                1.709318901226618    -1.417717444901309    -0.348379468191800
    H                1.828318901226618    -3.286717444901309     1.171620531808200
    H                2.778248901226618    -3.838954444901309    -0.229225468191800
    H                1.119228901226618    -4.387707444901309    -0.036683468191800
    C               -0.776681098773382     0.738282555098691    -1.161379468191800
    C               -1.603681098773382     2.383282555098690     0.776620531808200
    S               -0.229681098773382     1.273282555098691     0.442620531808200
    H               -1.060681098773382     1.578282555098691    -1.783379468191800
    H                0.025318901226618     0.188282555098691    -1.653379468191800
    H               -1.639681098773382     0.082282555098691    -1.048379468191800
    H               -2.506681098773382     1.804282555098691     0.950620531808200
    H               -1.755681098773382     3.032282555098690    -0.085379468191800
    H               -1.373971098773382     2.993182555098691     1.662762531808200

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-016THR-022MET-1-dimer.npy', np.array(charges))