import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C               -0.012455392198313    -0.723660724772017    -0.593432561855876
    C               -0.501455392198313    -1.953660724772017    -1.402432561855876
    C                0.924544607801687    -1.090660724772017     0.589567438144124
    O                1.225544607801687    -2.292660724772017     0.776567438144124
    O                1.433544607801687    -0.189660724772017     1.276567438144124
    H                0.446544607801687    -0.002660724772017    -1.251432561855876
    H               -0.892455392198313    -0.244660724772017    -0.165432561855876
    H               -0.907455392198314    -1.547660724772017    -2.329432561855876
    H               -1.304956392198313    -2.477320724772017    -0.863762561855876
    H                0.351116607801687    -2.588620724772017    -1.685192561855876
    C               -1.455455392198313     2.771339275227983    -1.023432561855876
    C               -1.544455392198313     3.337339275227983     0.390567438144124
    H               -1.287455392198313     1.701339275227983    -1.003432561855876
    H               -2.396455392198313     2.960339275227983    -1.544432561855876
    H               -0.669455392198313     3.258339275227983    -1.601432561855876
    H               -1.625455392198313     4.421339275227982     0.312567438144124
    H               -0.630443392198313     3.085249275227983     0.948267438144124
    H               -2.455127392198313     2.960289275227983     0.878937438144124

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-006ASP-116VAL-1-dimer.npy', np.array(charges))