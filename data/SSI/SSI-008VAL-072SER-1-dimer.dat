import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.806713684271942    -1.391875652628681     1.883628900676835
    C               -1.215713684271942    -0.083875652628681     2.584628900676835
    H               -1.657713684271942    -2.072875652628681     1.843628900676835
    H               -0.482713684271942    -1.206875652628681     0.874628900676835
    H                0.027286315728058    -1.868875652628681     2.392628900676835
    H               -0.357713684271942     0.584124347371319     2.576628900676835
    H               -1.526373684271942    -0.283175652628681     3.620857900676835
    H               -2.030353684271942     0.383594347371319     2.012062900676835
    C                0.263286315728058     0.492124347371319    -1.093371099323165
    C                0.022286315728058     0.829124347371319    -2.568371099323165
    O                1.615286315728058     0.166124347371319    -0.814371099323165
    H               -0.024713684271942     1.351124347371319    -0.484371099323165
    H               -0.391713684271942    -0.341875652628681    -0.870371099323165
    H               -0.960713684271942     1.297124347371319    -2.635371099323165
    H                1.695286315728058    -0.118875652628681     0.102628900676835
    H               -0.001833684271942    -0.084515652628681    -3.180480499323165
    H                0.755936315728058     1.564224347371319    -2.930854299323165

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-008VAL-072SER-1-dimer.npy', np.array(charges))