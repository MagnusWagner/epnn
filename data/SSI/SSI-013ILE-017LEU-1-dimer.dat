import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.659091261150842    -0.381865338327052     0.307243948132788
    C                2.812091261150842     0.545134661672948     0.740243948132788
    H                1.460091261150842    -0.275865338327052    -0.759756051867212
    H                1.914091261150842    -1.420865338327052     0.514243948132788
    H                0.752091261150842    -0.156865338327052     0.870243948132788
    H                2.862091261150841     0.517134661672948     1.830243948132787
    H                2.626351261150841     1.584984661672948     0.433307948132788
    H                3.779371261150842     0.211494661672948     0.336436948132788
    C               -2.182908738849159    -0.518865338327052     0.091243948132788
    C               -2.289908738849158     0.359134661672948    -1.143756051867213
    H               -3.129908738849158    -1.029865338327052     0.270243948132788
    H               -1.396908738849158    -1.260865338327052    -0.049756051867212
    H               -1.934908738849158     0.092134661672948     0.959243948132788
    H               -1.325908738849158     0.831134661672948    -1.304756051867213
    H               -3.070892738849158     1.122774661672948    -1.013712051867212
    H               -2.516092738849158    -0.257465338327052    -2.026162051867212

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-013ILE-017LEU-1-dimer.npy', np.array(charges))