import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.066829000922912     0.478606959883179    -2.232522971097826
    C                0.612170999077088     0.272606959883179    -3.577522971097826
    H               -0.709829000922912    -0.368393040116821    -2.002522971097827
    H                0.690170999077089     0.555606959883179    -1.453522971097827
    H               -0.658829000922912     1.392606959883179    -2.248522971097827
    H                1.118170999077089    -0.687393040116821    -3.537522971097827
    H               -0.118716000922912     0.269734959883179    -4.399590971097827
    H                1.377668999077089     1.038104959883179    -3.772521971097827
    C                0.792170999077088     0.194606959883179     2.526477028902173
    C               -0.199829000922912    -0.143393040116821     1.434477028902173
    O               -1.074829000922912     0.636606959883179     1.062477028902173
    N               -0.085829000922912    -1.364393040116821     0.915477028902173
    H                1.739170999077088    -0.274393040116821     2.260477028902173
    H                0.447170999077088    -0.252393040116821     3.460477028902174
    H               -0.737829000922912    -1.640393040116821     0.197477028902173
    H                0.612170999077088    -2.007393040116821     1.256477028902173
    H                0.945324999077088     1.273873959883179     2.673877028902173

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-048LEU-077GLN-1-dimer.npy', np.array(charges))