import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.680355198184783    -1.759131483365231    -0.741559793313577
    C               -2.153355198184782    -1.883131483365231    -1.145559793313577
    H               -0.206355198184783    -2.741131483365230    -0.752559793313577
    H               -0.144355198184783    -1.112131483365230    -1.433559793313577
    H               -0.609355198184782    -1.341131483365231     0.262440206686423
    H               -2.615355198184782    -0.898131483365231    -1.066559793313577
    H               -2.671175198184782    -2.582151483365231    -0.472326793313577
    H               -2.219855198184782    -2.215621483365231    -2.191994793313577
    C                0.838644801815217     1.442868516634769     0.615440206686423
    C                1.990644801815217     2.198868516634770     1.275440206686423
    H                0.195644801815217     2.133868516634769     0.091440206686423
    H                1.237644801815217     0.726868516634769    -0.103559793313577
    H                0.256644801815217     0.909868516634770     1.367440206686423
    H                2.565644801815218     2.700868516634769     0.498440206686423
    H                1.601744801815217     2.943528516634769     1.985540206686423
    H                2.661764801815218     1.481558516634770     1.770480206686423

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-015LEU-038LEU-1-dimer.npy', np.array(charges))