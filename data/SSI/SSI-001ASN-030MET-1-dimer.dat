import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.979974434861013    -2.561352655877668     1.901534351179156
    C                1.909974434861013    -1.099352655877668     1.499534351179156
    O                2.860974434861013    -0.323352655877668     1.674534351179156
    N                0.792974434861013    -0.718352655877668     0.970534351179156
    H                0.785974434861013     0.233647344122332     0.622534351179156
    H               -0.081025565138987    -1.153352655877668     1.211534351179156
    H                1.875974434861013    -2.552352655877668     2.989534351179157
    H                2.986974434861013    -2.936352655877668     1.699534351179156
    H                1.200674434861013    -3.223142655877668     1.495664351179156
    C               -1.683025565138987    -0.041352655877668    -0.534465648820844
    C               -2.643025565138987     2.321647344122332    -1.505465648820844
    S               -1.387025565138987     1.081647344122332    -1.865465648820844
    H               -1.090025565138987    -0.935352655877668    -0.706465648820844
    H               -2.737025565138987    -0.328352655877668    -0.535465648820844
    H               -1.450025565138987     0.427647344122332     0.420534351179156
    H               -3.572025565138987     1.819647344122332    -1.231465648820844
    H               -2.834025565138987     2.923647344122332    -2.382465648820844
    H               -2.314689565138987     2.959516344122331    -0.671605648820844

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-001ASN-030MET-1-dimer.npy', np.array(charges))