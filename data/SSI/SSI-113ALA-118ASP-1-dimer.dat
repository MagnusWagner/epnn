import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C               -2.458640645891025    -1.654939249638768     0.068848812341400
    C               -1.399640645891025    -2.674939249638768    -0.336151187658600
    H               -3.392640645891025    -2.158939249638768     0.316848812341400
    H               -2.120640645891025    -1.087939249638768     0.936848812341400
    H               -2.630640645891025    -0.960939249638768    -0.753151187658600
    H               -0.524640645891025    -2.125939249638768    -0.689151187658600
    H               -1.787490645891025    -3.305753249638768    -1.149569187658600
    H               -1.091490645891025    -3.272559249638768     0.534420812341400
    C               -0.218640645891025     1.116060750361232     0.315848812341400
    C               -0.053640645891025     2.629060750361233     0.462848812341400
    C                1.068359354108975     0.418060750361232    -0.058151187658600
    O                1.734359354108975     0.871060750361232    -1.019151187658600
    O                1.394359354108975    -0.597939249638768     0.593848812341400
    H               -0.626640645891025     0.701060750361232     1.237848812341400
    H               -0.939640645891025     0.913060750361232    -0.477151187658600
    H                0.270359354108975     3.025060750361233    -0.501151187658600
    H                0.697099354108975     2.869296750361232     1.230102812341400
    H               -1.047540645891025     3.053777750361232     0.667261812341400

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-113ALA-118ASP-1-dimer.npy', np.array(charges))