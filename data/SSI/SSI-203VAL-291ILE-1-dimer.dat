import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.911619645559115    -1.670523409683923     1.174904754111149
    C                0.398380354440886    -2.278523409683923     1.653904754111149
    H               -1.700619645559114    -2.423523409683923     1.151904754111149
    H               -1.221619645559115    -0.884523409683923     1.862904754111150
    H               -0.795619645559114    -1.245523409683923     0.175904754111150
    H                0.256380354440885    -2.712523409683923     2.637904754111150
    H                0.712760354440885    -3.057583409683924     0.943817754111149
    H                1.127750354440885    -1.456723409683923     1.705490754111149
    C               -0.017619645559115     1.343476590316077    -1.058095245888851
    C                0.535380354440885     2.600476590316076    -1.776095245888851
    H                0.363380354440885     0.432476590316077    -1.518095245888851
    H                0.305380354440885     1.357476590316077    -0.018095245888850
    H               -1.106619645559114     1.347476590316077    -1.088095245888851
    H                1.617380354440886     2.511476590316077    -1.886095245888850
    H                0.328380354440885     3.463476590316076    -1.144095245888850
    H                0.059230354440885     2.728666590316077    -2.759380845888851

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-203VAL-291ILE-1-dimer.npy', np.array(charges))