import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.817059506272311     0.203958256917647    -1.719205565432274
    C               -1.550059506272311    -0.643041743082353    -2.776205565432273
    H               -0.575059506272311    -0.418041743082353    -0.857205565432274
    H                0.103940493727689     0.610958256917647    -2.139205565432273
    H               -1.448059506272311     1.032958256917647    -1.399205565432274
    H               -1.801059506272312     0.022958256917647    -3.601205565432274
    H               -2.471763506272311    -1.084481743082353    -2.369275565432273
    H               -0.867079506272311    -1.420741743082353    -3.148675565432273
    C                0.717940493727689     0.132958256917647     1.623794434567726
    C                1.641940493727688     0.299958256917647     2.874794434567726
    H               -0.086059506272311     0.864958256917647     1.648794434567726
    H                1.307940493727688     0.301958256917647     0.721794434567726
    H                0.304940493727689    -0.874041743082353     1.567794434567726
    H                2.411940493727689    -0.468041743082353     2.831794434567727
    H                1.078730493727689     0.218258256917647     3.816134434567727
    H                2.127770493727689     1.286728256917647     2.890624434567727

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-087LEU-109VAL-1-dimer.npy', np.array(charges))