import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                1.529262858299080     1.578679415419896     0.294505891983064
    C                2.366262858299081     2.697679415419896     0.915505891983064
    O                0.966262858299080     0.734679415419896     1.277505891983065
    H                0.733262858299081     2.008679415419896    -0.316494108016936
    H                2.171262858299081     0.982679415419896    -0.354494108016936
    H                2.798262858299081     3.284679415419896     0.102505891983064
    H                0.591262858299080     0.005679415419896     0.733505891983064
    H                3.175982858299081     2.269849415419896     1.524865891983064
    H                1.732722858299080     3.365899415419896     1.517265891983064
    C               -1.916737141700920    -1.865320584580104    -1.770494108016936
    C               -1.206737141700920    -1.231320584580104    -0.587494108016935
    O                0.009262858299080    -0.955320584580104    -0.686494108016935
    O               -1.863737141700920    -1.030320584580104     0.456505891983064
    H               -2.969737141700919    -1.574320584580104    -1.770494108016936
    H               -1.865737141700920    -2.949320584580104    -1.659494108016935
    H               -1.463407141700920    -1.586850584580104    -2.733274108016936

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-102SER-169ASP-1-dimer.npy', np.array(charges))