import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                1.553169728152510    -2.001328132403610    -0.207545558830109
    C                0.579169728152510    -3.040328132403610     0.325454441169891
    H                1.048169728152510    -1.299328132403610    -0.866545558830109
    H                1.995169728152510    -1.455328132403610     0.626454441169891
    H                2.350169728152510    -2.500328132403610    -0.758545558830109
    H                1.129169728152510    -3.728328132403610     0.969454441169891
    H                0.118529728152510    -3.601828132403610    -0.500698558830109
    H               -0.191990271847490    -2.531358132403610     0.922333441169891
    C               -0.728830271847490     0.989671867596390    -1.425545558830109
    C               -0.539830271847490     1.306671867596390     0.050454441169891
    O               -0.521830271847490     0.342671867596390     0.854454441169891
    O               -0.389830271847490     2.501671867596390     0.404454441169891
    H               -1.405830271847490     0.142671867596390    -1.535545558830109
    H                0.235169728152510     0.684671867596390    -1.840545558830109
    H               -1.093520271847490     1.835321867596390    -2.027105558830109

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-011THR-166GLU-1-dimer.npy', np.array(charges))