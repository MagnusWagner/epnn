import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.409553161149474     1.006015915992754     0.168542589775612
    C               -2.575553161149474     1.987015915992754     0.361542589775612
    H               -0.457553161149474     1.538015915992754     0.178542589775612
    H               -1.410553161149474     0.268015915992754     0.968542589775612
    H               -1.513553161149474     0.476015915992754    -0.781457410224388
    H               -2.367553161149474     2.602015915992754     1.233542589775612
    H               -2.648333161149474     2.613515915992754    -0.539677410224388
    H               -3.516399161149474     1.444115915992754     0.534932589775612
    C                1.455446838850526    -1.318984084007246    -0.781457410224388
    C                2.524446838850526    -1.667984084007246     0.254542589775612
    H                0.795446838850526    -0.546984084007246    -0.391457410224388
    H                1.934446838850526    -0.952984084007246    -1.690457410224388
    H                0.872446838850526    -2.207984084007246    -1.029457410224388
    H                3.187446838850526    -2.398984084007246    -0.201457410224388
    H                2.063756838850526    -2.118684084007246     1.145962589775612
    H                3.122466838850526    -0.788274084007246     0.534692589775612

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-027VAL-090THR-1-dimer.npy', np.array(charges))