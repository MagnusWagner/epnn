import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.268572290460591    -0.280790990331700     1.583141202299535
    C               -0.511572290460591    -1.444790990331700     2.598141202299534
    H                0.041427709539409     0.621209009668300     2.112141202299535
    H                0.511427709539409    -0.559790990331700     0.871141202299535
    H               -1.189572290460591    -0.069790990331700     1.033141202299535
    H                0.405427709539409    -1.695790990331700     3.135141202299535
    H               -1.293669290460591    -1.170630990331700     3.321441202299535
    H               -0.842071290460591    -2.317540990331700     2.015831202299535
    C                0.807427709539409     1.392209009668300    -1.724858797700465
    C               -0.024572290460591     0.338209009668300    -2.452858797700465
    H                0.163427709539409     2.202209009668301    -1.387858797700465
    H                1.293427709539409     0.941209009668300    -0.860858797700465
    H                1.565427709539409     1.788209009668300    -2.400858797700465
    H               -0.775572290460591    -0.059790990331700    -1.769858797700465
    H                0.631427709539409    -0.469790990331700    -2.772858797700466
    H               -0.543386290460591     0.732709009668300    -3.338988797700465

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-033LEU-089ILE-1-dimer.npy', np.array(charges))