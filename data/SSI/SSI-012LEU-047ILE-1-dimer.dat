import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.896769773285357    -0.462561107185193    -0.114187337937108
    C                2.444769773285357    -1.885561107185193    -0.149187337937108
    H                2.605769773285357     0.246438892814807    -0.540187337937108
    H                0.992769773285357    -0.421561107185193    -0.723187337937108
    H                1.640769773285357    -0.179561107185193     0.905812662062892
    H                2.658769773285357    -2.100561107185193    -1.173187337937107
    H                3.340609773285357    -1.980951107185193     0.481985662062892
    H                1.678229773285357    -2.597871107185193     0.189971662062892
    C               -1.597230226714643     0.698438892814807     0.310812662062892
    C               -2.738230226714643     1.651438892814807    -0.039187337937108
    H               -1.851230226714643     0.146438892814807     1.203812662062892
    H               -1.444230226714643    -0.021561107185193    -0.491187337937108
    H               -0.649230226714643     1.218438892814807     0.444812662062892
    H               -2.482230226714643     2.149438892814807    -0.975187337937108
    H               -2.874060226714644     2.407778892814807     0.747894662062892
    H               -3.688320226714644     1.112628892814807    -0.169592337937108

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-012LEU-047ILE-1-dimer.npy', np.array(charges))