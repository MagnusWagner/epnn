import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.097266861133514     2.359232021651577    -2.072081154031562
    C                0.834266861133514     1.990232021651577    -0.619081154031562
    O                1.585266861133514     1.236232021651577     0.008918845968438
    N               -0.235733138866486     2.536232021651576    -0.064081154031562
    H                1.708266861133514     3.263232021651576    -2.065081154031562
    H                0.156266861133514     2.598232021651576    -2.571081154031563
    H               -0.408733138866486     2.382232021651576     0.917918845968438
    H               -0.817733138866486     3.171232021651576    -0.592081154031562
    H                1.624476861133514     1.566972021651577    -2.623781154031562
    C                0.363266861133514    -2.835767978348424     0.323918845968438
    C               -0.882733138866486    -2.050767978348424     0.695918845968438
    O               -1.963733138866486    -2.618767978348424     0.883918845968438
    N               -0.748733138866486    -0.741767978348424     0.801918845968438
    H               -1.558733138866486    -0.195767978348424     1.051918845968438
    H                0.150266861133514    -0.306767978348424     0.630918845968438
    H                0.747266861133514    -3.326767978348424     1.218918845968438
    H                1.133266861133514    -2.158767978348424    -0.045081154031562
    H                0.137196861133514    -3.590067978348424    -0.444151154031562

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-010ASN-014GLN-2-dimer.npy', np.array(charges))