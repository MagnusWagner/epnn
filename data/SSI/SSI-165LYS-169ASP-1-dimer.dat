import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.383439454117195     1.656357093987515     2.922502402957148
    N                0.086439454117195     0.322357093987515     2.322502402957148
    H               -0.083560545882805     0.359357093987515     1.313502402957148
    H                0.853439454117195    -0.321642906012485     2.477502402957148
    H               -0.738560545882805    -0.090642906012485     2.740502402957148
    H                1.367439454117195     2.003357093987515     2.594502402957148
    H                0.415439454117195     1.565357093987515     4.013502402957148
    H               -0.368530545882805     2.412647093987515     2.653122402957148
    C               -0.794560545882805    -1.107642906012485    -2.538497597042852
    C               -0.084560545882805    -0.473642906012485    -1.355497597042852
    O               -0.741560545882805    -0.272642906012485    -0.311497597042852
    O                1.131439454117195    -0.197642906012485    -1.454497597042852
    H               -1.847560545882805    -0.816642906012485    -2.538497597042852
    H               -0.743560545882805    -2.191642906012484    -2.427497597042851
    H               -0.341230545882805    -0.829172906012485    -3.501277597042852

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-165LYS-169ASP-1-dimer.npy', np.array(charges))