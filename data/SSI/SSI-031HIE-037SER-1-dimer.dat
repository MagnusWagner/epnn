import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.050727439318381     0.880964027412875    -3.288672820896628
    C               -0.092727439318381     1.448964027412875     0.308327179103373
    C               -0.059727439318381    -0.341035972587125    -0.971672820896627
    C               -0.072727439318381     0.756964027412875    -1.784672820896627
    N               -0.068727439318381     0.120964027412875     0.327327179103373
    N               -0.104727439318381     1.856964027412875    -0.955672820896627
    H               -0.083727439318381    -0.457035972587125     1.166327179103373
    H               -0.098727439318381     2.094964027412875     1.179327179103373
    H               -0.040727439318381    -1.374035972587125    -1.281672820896627
    H                0.827272560681619     0.351964027412875    -3.654672820896627
    H                0.056272560681619     1.932964027412875    -3.556672820896627
    H               -0.943537439318381     0.469174027412875    -3.781952820896627
    C                0.794272560681619    -2.335035972587125     2.933327179103372
    O               -0.365727439318381    -1.653035972587126     2.500327179103373
    H               -1.010727439318381    -1.651035972587126     3.222327179103373
    H                0.887272560681619    -2.257035972587125     4.018327179103372
    H                1.666272560681619    -1.856035972587125     2.485327179103373
    H                0.782702560681619    -3.392595972587125     2.630959179103372

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-031HIE-037SER-1-dimer.npy', np.array(charges))