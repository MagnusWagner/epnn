import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.940139144764774     0.216249046935418     0.089831383595672
    C               -1.570139144764774     1.697249046935417     0.191831383595672
    H               -3.003139144764774     0.111249046935418    -0.124168616404328
    H               -1.379139144764774    -0.240750953064582    -0.725168616404328
    H               -1.688139144764774    -0.312750953064582     1.002831383595672
    H               -0.523139144764774     1.775249046935418     0.475831383595672
    H               -2.170379144764774     2.212049046935418     0.956491383595672
    H               -1.688179144764774     2.190399046935418    -0.784318616404328
    C                1.854860855235226    -0.240750953064582     0.121831383595672
    C                1.655860855235226    -1.671750953064582    -0.399168616404328
    H                2.819860855235226     0.147249046935418    -0.206168616404328
    H                1.070860855235226     0.398249046935418    -0.274168616404328
    H                1.801860855235226    -0.228750953064582     1.207831383595672
    H                0.752860855235226    -2.075750953064583     0.058831383595672
    H                2.505510855235226    -2.325160953064582    -0.151888616404328
    H                1.495880855235226    -1.663140953064582    -1.487438616404328

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-054LEU-061LEU-1-dimer.npy', np.array(charges))