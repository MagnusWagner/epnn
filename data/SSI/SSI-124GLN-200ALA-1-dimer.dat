import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.422699775393287     0.597008297137328     2.493553156776162
    C               -0.765699775393287    -0.199991702862672     1.266553156776162
    O               -1.631699775393287     0.168008297137328     0.479553156776162
    N               -0.007699775393287    -1.274991702862672     1.048553156776163
    H                0.346300224606713     1.320008297137328     2.229553156776162
    H               -0.015699775393287    -0.076991702862672     3.248553156776163
    H               -0.190699775393287    -1.833991702862672     0.228553156776162
    H                0.716300224606713    -1.536991702862672     1.701553156776163
    H               -1.295949775393287     1.124238297137328     2.905203156776162
    C                0.824300224606713     0.255008297137328    -2.057446843223838
    C                1.897300224606713     0.508008297137328    -3.127446843223838
    H                0.168300224606713     1.118008297137328    -1.953446843223838
    H                0.222300224606713    -0.607991702862672    -2.343446843223838
    H                1.304300224606713     0.048008297137328    -1.100446843223837
    H                2.498300224606712    -0.396991702862672    -3.241446843223837
    H                2.544590224606712     1.329648297137328    -2.786966843223837
    H                1.449640224606713     0.749498297137328    -4.102783843223838

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-124GLN-200ALA-1-dimer.npy', np.array(charges))