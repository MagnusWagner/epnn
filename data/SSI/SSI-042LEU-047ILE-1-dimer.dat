import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.292896278585028    -0.242759346634672    -1.330320425543472
    C                2.124896278585028     0.921240653365328    -1.863320425543471
    H                0.246896278585028    -0.128759346634672    -1.614320425543471
    H                1.657896278585028    -1.174759346634672    -1.763320425543472
    H                1.382896278585028    -0.299759346634672    -0.248320425543472
    H                1.979896278585028     0.966240653365328    -2.939320425543472
    H                1.808996278585028     1.866090653365328    -1.396985625543472
    H                3.195636278585028     0.756510653365328    -1.672581425543471
    C               -1.708103721414972    -0.839759346634672     1.032679574456528
    C               -1.702103721414972     0.165240653365328     2.163679574456528
    H               -0.978103721414972    -1.626759346634672     1.197679574456529
    H               -2.697103721414972    -1.293759346634672     0.962679574456529
    H               -1.488103721414972    -0.335759346634672     0.092679574456528
    H               -1.946103721414972    -0.357759346634672     3.089679574456528
    H               -2.501103721414972     0.877240653365328     1.965679574456529
    H               -0.752013721414972     0.704050653365328     2.294084574456528

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-042LEU-047ILE-1-dimer.npy', np.array(charges))