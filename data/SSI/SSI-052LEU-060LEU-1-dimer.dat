import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.523829943708745     1.074017201132875     0.037352584339238
    C                2.965829943708745     1.408017201132875    -0.314647415660762
    H                1.233829943708745     0.128017201132875    -0.419647415660762
    H                1.422829943708745     0.994017201132875     1.119352584339238
    H                0.861829943708745     1.865017201132875    -0.315647415660762
    H                3.223829943708745     2.353017201132875     0.159352584339238
    H                3.043959943708745     1.503506201132875    -1.407707415660763
    H                3.650299943708745     0.624738201132875     0.043092584339238
    C               -1.746170056291255    -0.707982798867125     0.343352584339238
    C               -2.744170056291255    -1.775982798867125    -0.066647415660762
    H               -2.195170056291255    -0.025982798867125     1.066352584339238
    H               -0.870170056291255    -1.176982798867125     0.793352584339238
    H               -1.425170056291255    -0.146982798867125    -0.534647415660762
    H               -2.272170056291255    -2.425982798867125    -0.800647415660762
    H               -3.630800056291255    -1.295182798867125    -0.505637415660762
    H               -3.035000056291254    -2.374204798867125     0.809452584339238

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-052LEU-060LEU-1-dimer.npy', np.array(charges))