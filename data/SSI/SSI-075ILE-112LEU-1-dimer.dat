import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.372260093639026     1.749385860553793     0.305129278702202
    C               -1.109260093639026     2.639385860553793     1.330129278702202
    H                0.375739906360974     1.132385860553792     0.801129278702202
    H               -1.093260093639026     1.087385860553792    -0.175870721297798
    H                0.107739906360974     2.356385860553792    -0.461870721297798
    H               -1.483260093639026     2.024385860553793     2.147129278702202
    H               -1.949260093639026     3.118385860553793     0.826129278702202
    H               -0.422085093639026     3.412457860553793     1.704499278702202
    C                0.870739906360974    -1.882614139446207    -0.126870721297798
    C                0.605739906360974    -2.505614139446208    -1.498870721297798
    H                1.107739906360974    -2.654614139446208     0.603129278702202
    H                1.719739906360974    -1.203614139446208    -0.188870721297798
    H               -0.005260093639026    -1.323614139446207     0.202129278702202
    H                1.451739906360973    -3.120614139446208    -1.750870721297798
    H               -0.311689093639026    -3.110560139446208    -1.547490721297798
    H                0.562129906360974    -1.724841139446208    -2.272490721297798

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-075ILE-112LEU-1-dimer.npy', np.array(charges))