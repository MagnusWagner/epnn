import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.211974896929559    -0.795829256572471    -1.315983676696969
    C                2.141974896929559     0.282170743427528    -0.759983676696969
    H                1.039974896929559    -1.569829256572471    -0.568983676696969
    H                0.254974896929559    -0.355829256572472    -1.591983676696969
    H                1.653974896929559    -1.245829256572471    -2.205983676696969
    H                1.695974896929559     0.649170743427528     0.160016323303031
    H                3.137114896929559    -0.126369256572472    -0.530224676696969
    H                2.214014896929559     1.135120743427529    -1.450843676696969
    C               -0.948025103070441     0.451170743427528     1.087016323303031
    C               -2.405025103070441     0.057170743427528     0.985016323303031
    H               -0.333025103070441    -0.423829256572472     1.307016323303031
    H               -0.639025103070441     0.892170743427528     0.142016323303031
    H               -0.800025103070441     1.184170743427529     1.879016323303031
    H               -2.972025103070441     0.875170743427529     0.548016323303031
    H               -2.753795103070441    -0.119019256572472     2.013276323303031
    H               -2.508845103070441    -0.831789256572471     0.345511323303031

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-016LEU-065LEU-1-dimer.npy', np.array(charges))