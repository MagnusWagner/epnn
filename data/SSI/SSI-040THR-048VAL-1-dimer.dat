import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.852202195430076     0.480959419851727    -2.029661953103640
    C                1.112202195430076    -1.019040580148273    -1.975661953103640
    H                1.540202195430076     0.949959419851727    -2.735661953103640
    H               -0.174797804569924     0.661959419851727    -2.354661953103640
    H                0.981202195430076     0.936959419851727    -1.047661953103640
    H                0.423202195430076    -1.462040580148273    -1.258661953103640
    H                2.142217195430076    -1.250239580148273    -1.666442953103640
    H                0.911568195430076    -1.447317580148273    -2.968800953103640
    C               -0.640797804569924     0.516959419851727     1.365338046896360
    C               -1.314797804569924     0.016959419851727     2.640338046896360
    H               -0.957797804569924    -0.081040580148273     0.510338046896360
    H               -0.903797804569924     1.555959419851727     1.188338046896360
    H                0.443202195430076     0.474959419851727     1.465338046896360
    H               -2.392797804569924     0.054959419851727     2.483338046896360
    H               -1.024159804569924    -1.015626580148273     2.883848046896360
    H               -1.093127804569924     0.671068419851727     3.496498046896360

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-040THR-048VAL-1-dimer.npy', np.array(charges))