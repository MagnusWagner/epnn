import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.669710093558373    -0.680565864356716     0.425913278467855
    C                3.056710093558372    -0.440565864356716     0.994913278467855
    H                1.733710093558372    -1.093565864356716    -0.581086721532145
    H                1.124710093558372    -1.389565864356716     1.046913278467855
    H                1.127710093558372     0.264434135643284     0.392913278467855
    H                3.596710093558372    -1.377565864356716     0.990913278467855
    H                3.620270093558373     0.297724135643284     0.405573278467855
    H                2.971140093558372    -0.088115864356716     2.033403278467855
    C               -1.850289906441628     0.106434135643284    -0.380086721532145
    C               -2.879289906441628     1.018434135643284    -1.035086721532145
    H               -1.978289906441628     0.091434135643284     0.700913278467855
    H               -1.948289906441627    -0.907565864356716    -0.765086721532145
    H               -0.854289906441628     0.474434135643284    -0.624086721532145
    H               -2.683289906441627     1.035434135643284    -2.106086721532145
    H               -2.782019906441628     2.044704135643284    -0.651276721532145
    H               -3.890449906441628     0.603724135643284    -0.910316721532145

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-064VAL-073ALA-1-dimer.npy', np.array(charges))