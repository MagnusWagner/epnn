import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.081448063589716     0.031365746573449     2.052751456189705
    C                0.689448063589716    -1.116634253426551     2.849751456189705
    H               -0.925551936410284     0.250365746573449     2.409751456189705
    H                0.699448063589716     0.923365746573448     2.172751456189705
    H                0.051448063589716    -0.209634253426551     0.991751456189704
    H                1.677448063589716    -1.325634253426552     2.438751456189705
    H                0.083168063589716    -2.032856253426552     2.795351456189705
    H                0.808698063589716    -0.812049253426551     3.899991456189704
    C               -0.526551936410284     0.549365746573448    -1.699248543810296
    C               -0.243551936410284     0.534365746573448    -3.204248543810296
    H                0.316448063589716     0.992365746573449    -1.166248543810296
    H               -1.419551936410284     1.145365746573449    -1.501248543810296
    H               -0.700551936410284    -0.463634253426551    -1.339248543810296
    H               -1.105551936410284     0.080365746573449    -3.685248543810296
    H                0.639188063589716    -0.087856253426551    -3.413091543810296
    H               -0.134071936410284     1.558136746573449    -3.591425543810296

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-123VAL-134LEU-1-dimer.npy', np.array(charges))