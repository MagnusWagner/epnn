import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.353431247718041     1.057279586162266    -1.429890318723392
    C                0.530568752281959     2.065279586162267    -2.162890318723392
    H                0.096568752281959     0.067279586162267    -1.438890318723392
    H               -0.495431247718041     1.362279586162267    -0.393890318723392
    H               -1.329431247718041     1.007279586162267    -1.913890318723392
    H                0.022568752281959     3.027279586162267    -2.170890318723392
    H                0.693688752281959     1.745839586162266    -3.202770318723392
    H                1.490718752281959     2.182859586162266    -1.639170318723392
    C               -0.168431247718041    -1.858720413837734     1.100109681276608
    C               -0.005431247718041    -1.268720413837733     2.493109681276608
    H               -0.596431247718041    -2.859720413837734     1.165109681276608
    H               -0.835431247718041    -1.230720413837733     0.510109681276608
    H                0.801568752281959    -1.906720413837734     0.608109681276608
    H                0.450568752281959    -0.284720413837733     2.386109681276608
    H                0.648878752281959    -1.902900413837733     3.109309681276608
    H               -0.986831247718041    -1.149910413837734     2.975529681276608

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-097ALA-105LEU-1-dimer.npy', np.array(charges))