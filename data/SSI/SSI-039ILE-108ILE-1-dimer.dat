import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.089004000546810     0.874816884504648    -1.186862266390658
    C               -0.214004000546810     1.554816884504649    -2.560862266390658
    H               -0.632004000546810    -0.069183115495352    -1.168862266390658
    H                0.959995999453190     0.657816884504648    -0.987862266390658
    H               -0.462004000546810     1.533816884504648    -0.401862266390658
    H               -0.035004000546810     0.819816884504648    -3.342862266390658
    H                0.574995999453190     2.302816884504649    -2.621862266390658
    H               -1.187334000546810     2.045780884504649    -2.707792266390658
    C               -0.257004000546810    -0.585183115495352     2.058137733609342
    C                0.550995999453190    -1.849183115495352     1.694137733609342
    H               -0.626004000546810    -0.656183115495352     3.083137733609342
    H                0.364995999453190     0.304816884504648     1.969137733609342
    H               -1.102004000546810    -0.448183115495352     1.382137733609342
    H                0.836995999453190    -1.765183115495352     0.643137733609342
    H               -0.055914000546810    -2.759910115495351     1.804747733609342
    H                1.470635999453190    -1.909874115495352     2.294617733609342

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-039ILE-108ILE-1-dimer.npy', np.array(charges))