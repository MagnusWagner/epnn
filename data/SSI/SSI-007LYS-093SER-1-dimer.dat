import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.524401563020400     1.042831738478971     0.656716224883508
    C               -1.335401563020400     2.239831738478972     1.149716224883508
    C                0.382598436979600     0.512831738478971     1.766716224883508
    H               -1.205401563020400     0.251831738478971     0.334716224883508
    H                0.090598436979600     1.340831738478971    -0.195283775116492
    H               -0.645401563020400     3.002831738478971     1.514716224883508
    H               -1.989401563020400     1.923831738478971     1.961716224883508
    H                0.821598436979600    -0.431168261521029     1.426716224883508
    H                1.205598436979600     1.219831738478971     1.917716224883508
    H               -1.972751563020400     2.667371738478971     0.361683224883508
    H               -0.153731563020400     0.365691738478971     2.715770224883508
    C                0.393598436979600    -2.364168261521029    -1.916283775116492
    O                0.889598436979600    -1.151168261521029    -1.382283775116492
    H                1.824598436979600    -1.074168261521029    -1.628283775116492
    H                0.924598436979600    -3.209168261521028    -1.474283775116492
    H                0.569598436979600    -2.367168261521029    -2.994283775116492
    H               -0.686161563020400    -2.463238261521028    -1.731059375116492

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-007LYS-093SER-1-dimer.npy', np.array(charges))