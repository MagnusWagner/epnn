import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.582794197539648    -1.665256129177700    -0.450476619619429
    C               -2.049794197539648    -2.986256129177700     0.140523380380571
    H               -0.723794197539648    -1.828256129177700    -1.104476619619429
    H               -2.387794197539648    -1.202256129177700    -1.019476619619429
    H               -1.318794197539648    -0.955256129177700     0.336523380380571
    H               -2.891794197539648    -2.784256129177700     0.804523380380571
    H               -1.257894197539648    -3.482176129177700     0.721013380380571
    H               -2.394234197539648    -3.642336129177700    -0.672446619619429
    C                2.133205802460352     0.510743870822300     0.489523380380571
    C                0.867205802460352     1.225743870822300     0.120523380380571
    O                0.102205802460352     1.752743870822300     0.947523380380571
    N                0.620205802460352     1.251743870822300    -1.161476619619429
    H                2.906205802460352     0.769743870822300    -0.235476619619429
    H                1.954205802460352    -0.558256129177700     0.396523380380571
    H               -0.150794197539648     1.866743870822300    -1.434476619619429
    H                1.042205802460352     0.550743870822300    -1.756476619619429
    H                2.510265802460352     0.764773870822300     1.491163380380571

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-018ILE-022GLN-1-dimer.npy', np.array(charges))