import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.000631773747706    -0.147380370743663    -1.740602158853944
    C                1.166631773747706     0.158619629256337    -2.672602158853944
    H               -0.397368226252294     0.774619629256337    -1.318602158853944
    H               -0.787368226252294    -0.652380370743663    -2.299602158853943
    H                0.324631773747706    -0.805380370743663    -0.936602158853943
    H                1.635631773747706    -0.781380370743663    -2.971602158853944
    H                1.908501773747706     0.787559629256337    -2.158732158853943
    H                0.799801773747706     0.667549629256337    -3.576162158853943
    C               -0.927368226252294    -0.617380370743663     1.905397841146056
    C               -0.243368226252294     0.607619629256337     2.516397841146056
    H               -1.471368226252294    -1.162380370743663     2.676397841146056
    H               -1.624368226252294    -0.297380370743663     1.130397841146056
    H               -0.180368226252294    -1.272380370743663     1.456397841146056
    H                0.276631773747706     1.107619629256337     1.705397841146056
    H                0.491581773747706     0.261039629256337     3.257837841146056
    H               -0.934588226252294     1.355289629256337     2.932577841146057

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-205THR-209LEU-1-dimer.npy', np.array(charges))