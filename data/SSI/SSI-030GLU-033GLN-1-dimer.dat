import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                1.481071437408791     2.741456666428057     0.134135097791041
    C                0.314071437408791     1.912456666428057     0.600135097791041
    O                0.426071437408791     1.243456666428057     1.649135097791041
    O               -0.739928562591209     1.987456666428057    -0.069864902208959
    H                1.353071437408791     3.757456666428058     0.512135097791041
    H                1.485071437408791     2.808456666428057    -0.954864902208959
    H                2.455831437408791     2.374929666428057     0.488395097791041
    C                0.981071437408791    -2.394543333571943    -0.201864902208959
    C               -0.441928562591209    -2.007543333571943    -0.591864902208959
    O               -1.291928562591209    -2.858543333571943    -0.837864902208959
    N               -0.714928562591209    -0.717543333571943    -0.680864902208959
    H               -1.632928562591209    -0.428543333571943    -0.969864902208959
    H               -0.041928562591209    -0.012543333571943    -0.436864902208959
    H                1.005071437408791    -2.495543333571943     0.881135097791041
    H                1.675071437408791    -1.607543333571943    -0.461864902208959
    H                1.325251437408791    -3.335110333571943    -0.656694902208959

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-030GLU-033GLN-1-dimer.npy', np.array(charges))