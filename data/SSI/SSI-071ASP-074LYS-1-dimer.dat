import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                0.252538136636544     1.178299492858557    -1.649285155365783
    C               -1.026461863363456     1.015299492858557    -0.878285155365783
    O               -1.225461863363456     1.640299492858557     0.187714844634217
    O               -1.828461863363456     0.167299492858557    -1.307285155365783
    H                0.159538136636544     0.667299492858557    -2.611285155365783
    H                0.989538136636544     0.652299492858557    -1.058285155365783
    H                0.532418136636544     2.224789492858557    -1.840402155365783
    C                0.845538136636544    -1.242700507141443     1.567714844634217
    C                2.097538136636544    -0.383700507141443     1.560714844634217
    C                0.870538136636544    -2.368700507141443     0.550714844634217
    H                0.734538136636544    -1.685700507141443     2.559714844634217
    H               -0.021461863363456    -0.609700507141443     1.380714844634217
    H                2.161538136636544     0.206299492858557     0.650714844634217
    H                2.962538136636544    -1.050700507141443     1.580714844634217
    H                0.979538136636544    -1.959700507141443    -0.456285155365783
    H                1.706538136636544    -3.036700507141443     0.767714844634217
    H                2.151698136636544     0.266919492858557     2.446014844634217
    H               -0.081511863363456    -2.912830507141443     0.637464844634217

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-071ASP-074LYS-1-dimer.npy', np.array(charges))