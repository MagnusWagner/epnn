import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C               -0.331965606665493     0.254471366017138    -0.391728323334546
    C                0.070034393334507     0.702471366017138    -1.791728323334546
    C               -1.299965606665493     1.199471366017138     0.307271676665454
    O               -2.412965606665493     0.764471366017138     0.593271676665454
    O               -0.955965606665493     2.356471366017138     0.670271676665454
    H               -0.788965606665493    -0.733528633982862    -0.479728323334546
    H                0.560034393334507     0.129471366017138     0.216271676665454
    H               -0.823965606665493     0.661471366017138    -2.414728323334546
    H                0.765034393334507    -0.043528633982862    -2.180728323334546
    H                0.525103393334507     1.695611366017138    -1.920521323334546
    C                2.622034393334507    -1.855528633982862     0.383271676665454
    C                2.190034393334507    -3.302528633982862     0.224271676665454
    H                2.194034393334507    -1.428528633982862     1.288271676665454
    H                3.709034393334507    -1.809528633982862     0.465271676665454
    H                2.307034393334507    -1.272528633982862    -0.482728323334546
    H                2.578034393334507    -3.871528633982862     1.054271676665454
    H                1.096528393334507    -3.419608633982862     0.201143676665454
    H                2.646235393334507    -3.699348633982862    -0.694647323334546

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-055GLU-121LEU-1-dimer.npy', np.array(charges))