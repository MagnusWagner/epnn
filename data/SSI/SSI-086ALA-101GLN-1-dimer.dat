import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.566987948266965    -1.385750154073548    -1.066673187577139
    C               -1.151987948266965    -2.635750154073548    -1.860673187577139
    H               -1.583987948266965    -1.599750154073548     0.003326812422861
    H               -0.852987948266965    -0.589750154073548    -1.270673187577139
    H               -2.557987948266965    -1.057750154073548    -1.384673187577139
    H               -1.108987948266965    -2.363750154073548    -2.917673187577139
    H               -1.898547948266965    -3.432643154073548    -1.727983187577139
    H               -0.147927948266965    -2.968987154073548    -1.559313187577139
    C                0.351012051733035     0.368249845926452     2.006326812422861
    C                0.757012051733035     1.039249845926452     0.700326812422861
    O                1.915012051733035     1.012249845926452     0.305326812422861
    N               -0.193987948266965     1.642249845926452     0.014326812422861
    H                0.567012051733035    -0.694750154073548     1.908326812422861
    H               -0.724987948266965     0.463249845926452     2.160326812422861
    H                0.058012051733035     2.061249845926452    -0.867673187577139
    H               -1.145987948266965     1.669249845926452     0.349326812422861
    H                0.880412051733035     0.754954845926452     2.889612812422861

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-086ALA-101GLN-1-dimer.npy', np.array(charges))