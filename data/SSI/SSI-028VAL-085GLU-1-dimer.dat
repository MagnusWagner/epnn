import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C               -2.051401356663137    -1.040321242455974     0.489982835621819
    C               -1.696401356663137    -2.498321242455974     0.572982835621819
    H               -3.131401356663136    -0.920321242455974     0.413982835621819
    H               -1.630401356663137    -0.527321242455974     1.326982835621819
    H               -1.632401356663137    -0.651321242455974    -0.436017164378181
    H               -1.846401356663137    -2.925321242455974    -0.420017164378181
    H               -0.640261356663137    -2.628373242455974     0.851665835621819
    H               -2.375171356663136    -3.027139242455974     1.258272835621819
    C                0.910598643336863     1.261678757544026    -1.656017164378181
    C                0.952598643336863     0.869678757544026    -0.191017164378181
    O               -0.098401356663137     0.955678757544026     0.489982835621819
    O                2.048598643336863     0.516678757544026     0.291982835621819
    H                1.052598643336863     0.369678757544026    -2.270017164378181
    H                1.729598643336863     1.954678757544026    -1.864017164378181
    H               -0.037531356663137     1.744358757544026    -1.935427164378181

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-028VAL-085GLU-1-dimer.npy', np.array(charges))