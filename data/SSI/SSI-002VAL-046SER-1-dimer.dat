import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.451644179154158    -0.883642042923169     1.282118594183879
    C                2.167644179154158    -2.202642042923169     1.065118594183879
    H                0.376644179154158    -1.037642042923169     1.246118594183879
    H                1.690644179154158    -0.494642042923169     2.271118594183879
    H                1.769644179154158    -0.156642042923169     0.537118594183879
    H                1.768644179154158    -2.917642042923169     1.785118594183879
    H                1.999057179154158    -2.585729042923169     0.047856594183879
    H                3.241515179154158    -2.072833042923169     1.264994594183879
    C               -0.641355820845842     0.882357957076831    -0.836881405816121
    C               -1.331355820845842     1.990357957076831    -1.536881405816121
    O               -1.495355820845842     0.160357957076831    -0.005881405816121
    H               -0.680355820845842     0.560357957076831    -1.857881405816121
    H                0.322644179154158     1.179357957076831    -0.423881405816121
    H               -0.690355820845842     2.377357957076831    -2.327881405816121
    H               -1.922355820845842     0.697357957076831     0.698118594183879
    H               -1.490026820845842     2.806597957076831    -0.816759405816121
    H               -2.258823820845842     1.642022957076831    -2.014862305816121

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-002VAL-046SER-1-dimer.npy', np.array(charges))