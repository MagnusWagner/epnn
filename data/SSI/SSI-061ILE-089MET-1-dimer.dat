import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                2.066413681065838    -0.470210863945930     2.350627038988410
    C                3.555413681065838    -0.481210863945930     2.683627038988410
    H                1.606413681065838    -1.426210863945930     2.597627038988410
    H                1.565413681065838     0.303789136054070     2.927627038988410
    H                1.926413681065838    -0.254210863945930     1.291627038988410
    H                3.714413681065838    -0.824210863945930     3.707627038988410
    H                3.886413681065838     0.545789136054070     2.582627038988410
    H                4.135093681065838    -1.085340863945930     1.970177038988410
    C               -0.457586318934162    -0.578210863945930    -0.366372961011590
    C               -2.723586318934162     0.792789136054070    -1.048372961011590
    S               -1.128586318934162     0.351789136054070    -1.740372961011590
    H               -1.122586318934162    -1.400210863945930    -0.115372961011590
    H                0.517413681065838    -0.980210863945930    -0.642372961011590
    H               -0.351586318934162     0.073789136054070     0.500627038988410
    H               -2.571586318934162     1.241789136054070    -0.066372961011590
    H               -3.335586318934162    -0.102210863945930    -0.938372961011590
    H               -3.227606318934162     1.520819136054070    -1.701012961011590

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-061ILE-089MET-1-dimer.npy', np.array(charges))