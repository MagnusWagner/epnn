import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.407642983312847    -0.782374507006927     0.926732884745189
    C                0.086357016687153    -0.053374507006927     2.172732884745189
    C               -1.760642983312847    -1.285374507006927     1.284732884745189
    H                0.249357016687153    -1.622374507006927     0.700732884745189
    H               -0.464642983312847    -0.106374507006927     0.075732884745189
    H                1.160357016687153    -0.178374507006927     2.299732884745189
    H               -0.172642983312847     0.997625492993073     2.085732884745189
    H               -2.111642983312846    -2.091374507006926     0.662732884745189
    H               -2.462642983312847    -0.468374507006927     1.191732884745189
    H               -0.481382983312847    -0.514284507006927     2.994462884745189
    H               -1.656722983312847    -1.565374507006926     2.343412884745189
    C                1.122357016687153     0.292625492993073    -2.212267115254811
    C                0.943357016687153     1.779625492993073    -2.121267115254811
    H                1.462357016687153    -0.090374507006927    -1.253267115254811
    H                0.174357016687153    -0.181374507006927    -2.456267115254811
    H                1.855357016687153     0.044625492993073    -2.981267115254811
    H                0.178357016687153     1.996625492993073    -1.377267115254811
    H                1.892887016687153     2.229325492993073    -1.795448115254811
    H                0.569717016687153     2.131995492993073    -3.094009115254811

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-065PRO-101LEU-1-dimer.npy', np.array(charges))