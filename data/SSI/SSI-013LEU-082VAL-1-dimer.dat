import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.882271192592177     1.600931692847322    -0.725658283891405
    C               -0.375271192592177     2.471931692847322    -1.873658283891404
    H               -1.812271192592177     2.010931692847322    -0.328658283891405
    H               -1.051271192592177     0.588931692847322    -1.095658283891404
    H               -0.140271192592177     1.523931692847322     0.067341716108595
    H                0.567728807407823     2.061931692847322    -2.211658283891405
    H               -0.213661192592177     3.513748692847322    -1.559814383891404
    H               -1.073881192592177     2.441682692847322    -2.722793283891404
    C                0.315728807407823    -1.391068307152678     1.032341716108595
    C                0.943728807407823    -2.676068307152678     1.571341716108595
    H                1.060728807407823    -0.803068307152678     0.493341716108595
    H               -0.494271192592177    -1.645068307152678     0.346341716108595
    H               -0.110271192592177    -0.795068307152678     1.840341716108596
    H                0.195728807407823    -3.193068307152678     2.160341716108595
    H                1.804598807407823    -2.433277307152678     2.211621716108596
    H                1.244308807407823    -3.339795307152678     0.747256716108595

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-013LEU-082VAL-1-dimer.npy', np.array(charges))