import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.371917984845848     0.106810464615133     2.074531288636293
    C                0.220082015154152    -1.197189535384867     1.548531288636293
    H               -0.476917984845848     0.069810464615133     3.159531288636293
    H                0.300082015154152     0.921810464615133     1.816531288636293
    H               -1.326917984845848     0.295810464615133     1.600531288636293
    H                1.288082015154152    -1.191189535384867     1.708531288636293
    H                0.054082015154152    -1.262189535384867     0.474531288636293
    H               -0.183681984845848    -2.090518535384867     2.047468288636292
    C                0.665082015154152     0.838810464615133    -1.408468711363707
    C               -0.517917984845848     0.253810464615133    -2.216468711363707
    H                1.257082015154152     1.502810464615133    -2.040468711363707
    H                0.278082015154152     1.403810464615133    -0.562468711363707
    H                1.301082015154152     0.035810464615133    -1.037468711363707
    H               -1.110917984845848    -0.340189535384867    -1.522468711363707
    H               -0.141735984845848    -0.408449535384867    -3.010129711363707
    H               -1.182692184845848     1.035980464615133    -2.611796711363708

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-113ILE-232ALA-1-dimer.npy', np.array(charges))