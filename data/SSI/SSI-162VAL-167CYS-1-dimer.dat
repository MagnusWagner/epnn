import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.869366800121781     2.424360618517364    -0.011023641550827
    C                2.146366800121781     3.233360618517364     0.295976358449173
    H                1.024366800121781     1.379360618517364     0.254976358449173
    H                0.042366800121781     2.820360618517365     0.577976358449173
    H                0.599366800121781     2.501360618517364    -1.065023641550827
    H                2.008366800121781     4.244360618517363    -0.090023641550827
    H                3.010436800121781     2.777345618517365    -0.209433641550827
    H                2.337556800121781     3.317049618517364     1.375996358449173
    C               -1.176633199878219    -0.666639381482636    -0.267023641550827
    C               -2.061633199878218    -1.423639381482636    -1.242023641550827
    S                0.071366800121781    -1.699639381482636     0.544976358449173
    H               -0.678633199878219     0.142360618517364    -0.805023641550827
    H               -1.805633199878219    -0.228639381482636     0.506976358449173
    H               -2.540633199878219    -2.248639381482636    -0.711023641550827
    H                0.731366800121781    -0.714639381482636     1.169976358449173
    H               -1.491233199878219    -1.793870381482636    -2.106653641550827
    H               -2.852063199878219    -0.754263381482636    -1.612373641550827

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-162VAL-167CYS-1-dimer.npy', np.array(charges))