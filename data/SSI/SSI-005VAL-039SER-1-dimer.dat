import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.725298480235813    -2.022861575949037    -0.073368699215022
    C                0.277701519764187    -3.088861575949037    -0.511368699215022
    H               -0.669298480235813    -1.221861575949037    -0.796368699215022
    H               -1.756298480235813    -2.366861575949037    -0.139368699215022
    H               -0.499298480235813    -1.640861575949037     0.918631300784978
    H               -0.016298480235813    -3.422861575949038    -1.507368699215022
    H                0.258413519764187    -3.950396575949037     0.172291300784978
    H                1.288391519764187    -2.659389575949037    -0.575078699215022
    C                0.358701519764187     1.225138424050963     0.494631300784978
    C                0.353701519764187     2.670138424050962     0.982631300784978
    O               -0.267298480235813     1.120138424050963    -0.770368699215022
    H                1.380701519764187     0.848138424050963     0.434631300784978
    H               -0.196298480235813     0.617138424050963     1.209631300784978
    H               -0.683298480235813     3.009138424050962     0.983631300784978
    H                0.336701519764187     1.486138424050963    -1.439368699215022
    H                0.941511519764187     3.315068424050962     0.312891300784978
    H                0.704291519764187     2.693218424050963     2.025011300784978

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-005VAL-039SER-1-dimer.npy', np.array(charges))