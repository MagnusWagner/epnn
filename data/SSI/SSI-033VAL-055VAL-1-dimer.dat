import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.414074845842235     0.061846416012283    -1.646902530766170
    C                0.759074845842235     0.388846416012283    -3.100902530766170
    H                0.028074845842235     0.949846416012283    -1.143902530766170
    H               -0.347925154157765    -0.717153583987717    -1.621902530766170
    H                1.291074845842235    -0.309153583987717    -1.116902530766170
    H                1.230074845842235    -0.488153583987717    -3.547902530766170
    H                1.461537845842235     1.234966416012283    -3.126041530766170
    H               -0.142028154157765     0.631996416012283    -3.683043530766170
    C               -0.668925154157765    -0.325153583987717     1.616097469233830
    C               -0.498925154157765    -0.119153583987717     3.131097469233830
    H                0.312074845842235    -0.332153583987717     1.142097469233830
    H               -1.159925154157765    -1.280153583987717     1.429097469233830
    H               -1.284925154157765     0.461846416012283     1.181097469233830
    H               -1.495925154157765    -0.062153583987717     3.569097469233830
    H                0.035736845842235     0.818466416012283     3.343253469233830
    H                0.009055845842235    -0.984233583987717     3.582316469233830

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-033VAL-055VAL-1-dimer.npy', np.array(charges))