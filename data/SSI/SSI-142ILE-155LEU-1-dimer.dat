import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.406754192709350     0.569090792035454    -0.254306996393000
    C               -2.559754192709351     1.575090792035454    -0.269306996393000
    H               -0.617754192709350     0.887090792035454    -0.940306996393000
    H               -0.982754192709350     0.495090792035454     0.746693003607000
    H               -1.749754192709350    -0.429909207964546    -0.529306996393000
    H               -3.390754192709350     1.156090792035455     0.297693003607000
    H               -2.896114192709351     1.766070792035455    -1.299056996393000
    H               -2.237234192709350     2.513990792035455     0.204443003607000
    C                1.334245807290650    -1.466909207964545     0.272693003607000
    C                2.632245807290650    -0.672909207964546     0.241693003607000
    H                1.541245807290650    -2.517909207964546     0.457693003607000
    H                0.701245807290650    -1.098909207964545     1.080693003607000
    H                0.810245807290650    -1.365909207964545    -0.680306996393000
    H                3.089245807290650    -0.788909207964546     1.221693003607000
    H                3.305935807290650    -1.064940207964546    -0.534486996393000
    H                2.426645807290650     0.396200792035454     0.084433003607000

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-142ILE-155LEU-1-dimer.npy', np.array(charges))