import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.379680613767429     0.194327765657985    -1.793702653052865
    C                2.475680613767429    -0.306672234342015    -0.842702653052865
    H                1.798680613767429     0.902327765657985    -2.510702653052865
    H                0.952680613767429    -0.646672234342015    -2.340702653052865
    H                0.577680613767429     0.676327765657985    -1.239702653052865
    H                2.003680613767429    -0.954672234342015    -0.103702653052865
    H                2.962960613767430     0.535458465657985    -0.329502653052865
    H                3.207720613767429    -0.916344234342015    -1.392632653052865
    C               -1.575319386232571    -0.016672234342015     0.647297346947135
    C               -2.276319386232570     0.127327765657985     1.990297346947135
    H               -1.999319386232571    -0.851672234342015     0.091297346947135
    H               -1.706319386232571     0.895327765657985     0.066297346947135
    H               -0.509319386232571    -0.188672234342015     0.797297346947135
    H               -3.352319386232570     0.203327765657985     1.844297346947135
    H               -1.930319386232571     1.064327765657984     2.423297346947135
    H               -2.050129386232570    -0.698954234342015     2.680297346947135

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-069VAL-086ILE-1-dimer.npy', np.array(charges))