import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.160602735744834    -1.642024088668808    -0.160787444469739
    C                0.596602735744834    -2.777024088668808     0.732212555530261
    H                0.423602735744834    -1.838024088668808    -1.199787444469739
    H               -0.917397264255166    -1.500024088668808    -0.084787444469739
    H                0.682602735744834    -0.763024088668808     0.194212555530261
    H                0.285602735744834    -3.725024088668808     0.293212555530261
    H                0.072602735744834    -2.657024088668808     1.681212555530261
    H                1.680682735744834    -2.781304088668809     0.918606555530261
    C                0.160602735744834     1.690975911331192    -0.202787444469739
    C               -0.912397264255166     2.725975911331191    -0.378787444469739
    H                1.125602735744834     2.138975911331192    -0.434787444469739
    H                0.168602735744834     1.332975911331192     0.824212555530261
    H               -0.032397264255166     0.882975911331192    -0.903787444469739
    H               -0.567397264255166     3.664975911331192     0.045212555530261
    H               -1.764397264255166     2.402975911331192     0.212212555530261
    H               -1.222137264255166     2.866505911331192    -1.424880444469739

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-030ILE-055ILE-1-dimer.npy', np.array(charges))