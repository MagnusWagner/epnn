import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.566103359196775     1.918200007861751     1.011130584112215
    C               -1.534103359196775     1.111200007861751     1.877130584112215
    N                0.825896640803225     1.392200007861751     1.091130584112216
    H               -0.911103359196775     1.890200007861751    -0.028869415887785
    H               -0.585103359196775     2.965200007861751     1.337130584112215
    H               -1.157103359196775     1.100200007861751     2.900130584112215
    H               -1.595103359196775     0.079200007861751     1.520130584112215
    H                0.876896640803225     0.408200007861751     0.837130584112215
    H                1.429896640803225     1.882200007861751     0.439130584112215
    H                1.231896640803225     1.512200007861751     2.011130584112216
    H               -2.538303359196775     1.559430007861751     1.902989584112215
    C               -0.813103359196775    -1.398799992138249    -1.933869415887785
    C                0.348896640803225    -1.142799992138249    -0.979869415887785
    O                0.398896640803225    -1.707799992138249     0.139130584112215
    O                1.215896640803225    -0.323799992138249    -1.353869415887784
    H               -0.452103359196775    -1.474799992138249    -2.961869415887785
    H               -1.472103359196775    -0.535799992138249    -1.857869415887784
    H               -1.396973359196775    -2.295129992138248    -1.677570415887785

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-056LYS-160ASP-1-dimer.npy', np.array(charges))