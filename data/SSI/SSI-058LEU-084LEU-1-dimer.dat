import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.449980042703492     0.102570583176385    -1.905449176211284
    C                1.976980042703492     0.010570583176385    -1.884449176211284
    H                0.100980042703492     0.371570583176385    -2.904449176211283
    H                0.025980042703492    -0.868429416823615    -1.641449176211284
    H                0.093980042703492     0.839570583176385    -1.190449176211284
    H                2.297980042703492    -0.258429416823615    -0.883449176211284
    H                2.414670042703492     0.974070583176385    -2.184599176211284
    H                2.323650042703492    -0.779348416823615    -2.566979176211284
    C               -0.629019957296508     0.201570583176385     1.473550823788716
    C               -1.798019957296508    -0.310429416823615     2.313550823788716
    H               -0.917019957296508     1.101570583176385     0.930550823788716
    H                0.207980042703492     0.441570583176385     2.127550823788717
    H               -0.311019957296508    -0.574429416823615     0.776550823788716
    H               -2.149019957296508     0.500570583176385     2.946550823788717
    H               -2.615189957296508    -0.659412416823615     1.665130823788716
    H               -1.472019957296508    -1.139863416823615     2.958340823788717

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-058LEU-084LEU-1-dimer.npy', np.array(charges))