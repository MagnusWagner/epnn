import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.861009567528708    -1.240026788305570     1.103926481927069
    C                1.499009567528708    -0.174026788305570     1.976926481927069
    H                1.582009567528708    -1.632026788305570     0.387926481927069
    H                0.551009567528708    -2.058026788305570     1.747926481927069
    H               -0.007990432471292    -0.843026788305570     0.585926481927069
    H                2.211009567528708    -0.638026788305570     2.647926481927070
    H                2.017289567528708     0.571403211694430     1.355856481927070
    H                0.736279567528708     0.335663211694430     2.583937481927069
    C               -0.903990432471292     0.080973211694430    -1.875073518072931
    C               -1.458990432471292     1.336973211694430    -1.210073518072931
    H                0.146009567528708    -0.050026788305570    -1.615073518072931
    H               -1.463990432471292    -0.793026788305570    -1.543073518072930
    H               -0.988990432471292     0.164973211694430    -2.959073518072930
    H               -1.428990432471293     1.190973211694430    -0.134073518072931
    H               -0.821670432471292     2.192953211694430    -1.476763518072931
    H               -2.496710432471293     1.511843211694430    -1.530313518072931

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-030LEU-034LEU-1-dimer.npy', np.array(charges))