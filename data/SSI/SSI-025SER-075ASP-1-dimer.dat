import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                0.598830140435862    -3.179842445925627    -0.395661769144789
    O                1.387830140435862    -2.069842445925627     0.008338230855211
    H                2.307830140435862    -2.389842445925627     0.044338230855211
    H               -0.443169859564138    -2.984842445925628    -0.138661769144789
    H                0.922830140435862    -4.075842445925627     0.136338230855211
    H                0.661480140435862    -3.353382445925627    -1.480078769144789
    C               -0.756169859564138     0.347157554074373     0.721338230855211
    C               -2.224169859564138     0.723157554074373     0.806338230855211
    C                0.038830140435862     1.301157554074373    -0.139661769144789
    O               -0.492169859564138     1.735157554074373    -1.184661769144789
    O                1.196830140435862     1.618157554074373     0.241338230855211
    H               -0.337169859564138     0.303157554074373     1.728338230855211
    H               -0.700169859564138    -0.643842445925627     0.278338230855211
    H               -2.629169859564138     0.760157554074373    -0.203661769144789
    H               -2.341699859564138     1.701847554074373     1.294552230855211
    H               -2.756219859564138    -0.061932445925627     1.363616230855211

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-025SER-075ASP-1-dimer.npy', np.array(charges))