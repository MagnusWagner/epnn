import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.363639608354934    -0.165839740282878    -1.250826626424149
    C               -2.364639608354934    -0.869839740282878    -2.152826626424149
    H               -1.857639608354934     0.659160259717122    -0.737826626424149
    H               -0.978639608354934    -0.868839740282878    -0.511826626424149
    H               -0.539639608354934     0.219160259717122    -1.849826626424149
    H               -3.174639608354934    -1.207839740282877    -1.506826626424149
    H               -2.771868408354934    -0.180789740282877    -2.907396626424149
    H               -1.894099508354934    -1.746889740282877    -2.621206626424149
    C                1.182360391645066     0.387160259717123     1.338173373575851
    C                2.544360391645066     0.654160259717122     2.059173373575851
    H                0.658360391645066     1.328160259717122     1.173173373575851
    H                1.353360391645066    -0.100839740282878     0.378173373575851
    H                0.554360391645066    -0.265839740282877     1.950173373575851
    H                3.053360391645066    -0.297839740282877     2.223173373575851
    H                2.374631391645066     1.141610259717122     3.030553373575851
    H                3.241009391645066     1.253620259717122     1.454753373575851

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-024VAL-049ILE-1-dimer.npy', np.array(charges))