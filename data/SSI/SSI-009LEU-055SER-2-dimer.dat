import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                2.169389331457595     1.405649500188469     0.139902326939458
    C                2.940389331457595     0.663649500188469    -0.955097673060542
    H                2.859389331457595     2.006649500188469     0.731902326939458
    H                1.437389331457595     2.067649500188469    -0.321097673060542
    H                1.660389331457595     0.696649500188469     0.791902326939458
    H                3.454389331457595     1.405649500188469    -1.564097673060541
    H                3.686971331457595    -0.000218499811531    -0.494777673060542
    H                2.249483331457595     0.098428500188469    -1.597887673060542
    C               -1.144610668542405    -0.516350499811531     0.121902326939458
    C               -2.105610668542405     0.357649500188469     0.936902326939458
    O               -1.769610668542405    -1.752350499811531    -0.182097673060542
    H               -0.881610668542405    -0.000350499811531    -0.803097673060542
    H               -0.238610668542405    -0.697350499811531     0.700902326939458
    H               -2.335610668542406    -0.171350499811531     1.861902326939459
    H               -1.284610668542405    -2.175350499811531    -0.903097673060542
    H               -3.040277668542405     0.522368500188469     0.380782326939458
    H               -1.623716668542405     1.309136500188469     1.206072326939458

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-009LEU-055SER-2-dimer.npy', np.array(charges))