import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.845498412706170    -1.561743696362020     1.371799870228252
    C               -1.963498412706169    -2.364743696362020     2.022799870228252
    H               -1.097498412706169    -0.498743696362020     1.368799870228252
    H                0.079501587293831    -1.706743696362020     1.931799870228252
    H               -0.671498412706170    -1.900743696362020     0.349799870228252
    H               -1.694498412706170    -3.415743696362020     1.958799870228252
    H               -2.904238412706170    -2.208793696362020     1.474449870228252
    H               -2.025088412706169    -2.104203696362020     3.089719870228253
    C                0.835501587293831     0.734256303637980    -1.120200129771748
    C                0.497501587293831     1.667256303637980    -2.283200129771748
    O                1.411501587293831     1.392256303637980    -0.022200129771748
    H               -0.073498412706169     0.226256303637980    -0.796200129771748
    H                1.529501587293831    -0.023743696362020    -1.476200129771748
    H                0.050501587293831     1.093256303637980    -3.083200129771748
    H                0.793501587293830     2.050256303637980     0.327799870228252
    H                1.417781587293831     2.110746303637979    -2.691120129771748
    H               -0.231618412706170     2.439696303637980    -1.997330129771748

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-104VAL-112SER-1-dimer.npy', np.array(charges))