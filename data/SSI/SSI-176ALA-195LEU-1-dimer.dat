import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.231127237470218     1.139502454288660    -0.482142376258153
    C                2.052127237470219     2.243502454288660    -1.105142376258153
    H                1.877127237470218     0.323502454288660    -0.151142376258153
    H                0.671127237470218     1.526502454288660     0.370857623741847
    H                0.526127237470218     0.747502454288660    -1.218142376258153
    H                1.381127237470218     3.011502454288660    -1.486142376258153
    H                2.660627237470218     1.825672454287661    -1.920702376258153
    H                2.719357237470219     2.685672454288660    -0.350632376258153
    C               -0.913872762529782    -1.646497545711340     1.051857623741847
    C               -2.369872762529782    -1.734497545711339     0.531857623741847
    H               -0.220872762529782    -2.015497545712340     0.292857623741847
    H               -0.660872762529782    -0.610497545711340     1.274857623741847
    H               -0.807872762529782    -2.240497545712340     1.960857623741847
    H               -3.031872762529781    -1.413497545712340     1.329857623741847
    H               -2.582322762529782    -2.783697545712340     0.278797623741847
    H               -2.525832762529781    -1.080597545712340    -0.338822376258153

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-176ALA-195LEU-1-dimer.npy', np.array(charges))