import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.919031041175866     1.860520009651434     1.586849881749381
    C               -0.378968958824134     1.990520009651434     0.812849881749381
    O               -0.762968958824134     3.079520009651434     0.388849881749381
    N               -1.068968958824134     0.880520009651434     0.608849881749381
    H               -1.966968958824134     0.954520009651434     0.154849881749381
    H               -0.722968958824134    -0.033479990348566     0.887849881749381
    H                1.733031041175866     1.959520009651434     0.870849881749381
    H                0.984031041175866     0.870520009651434     2.040849881749381
    H                0.997501041175866     2.619990009651434     2.378709881749381
    C                1.728031041175866    -2.311479990348566    -0.693150118250619
    C                0.268031041175866    -1.921479990348566    -0.799150118250619
    O               -0.410968958824134    -1.731479990348566     0.208849881749381
    N               -0.227968958824134    -1.782479990348566    -2.022150118250619
    H                2.352031041175866    -1.427479990348566    -0.749150118250619
    H                1.967031041175867    -2.959479990348566    -1.533150118250619
    H               -1.214968958824134    -1.593479990348566    -2.103150118250619
    H                0.369031041175866    -1.874479990348566    -2.850150118250619
    H                1.956411041175866    -2.830919990348566     0.249199881749381

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-142GLN-154GLN-1-dimer.npy', np.array(charges))