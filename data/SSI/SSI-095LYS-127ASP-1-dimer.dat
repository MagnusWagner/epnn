import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C               -1.834225626110535     1.218200925346390    -0.546936643542695
    C               -1.148225626110535     0.689200925346390    -1.804936643542695
    C               -2.757225626110535     0.155200925346390     0.040063356457305
    H               -1.079225626110536     1.493200925346389     0.190063356457305
    H               -2.422225626110535     2.102200925346390    -0.797936643542695
    H               -1.901225626110536     0.395200925346390    -2.528936643542695
    H               -0.599225626110536    -0.211799074653610    -1.537936643542695
    H               -3.472225626110535    -0.158799074653610    -0.723936643542695
    H               -2.166225626110535    -0.709799074653610     0.343063356457305
    H               -0.457215626110536     1.401760925346389    -2.279020643542695
    H               -3.308235626110536     0.543940925346390     0.909128356457305
    C                1.785774373889464     0.194200925346390     1.789063356457305
    C                1.421774373889465    -0.545799074653610     0.508063356457305
    O                2.027774373889465    -0.277799074653610    -0.545936643542695
    O                0.492774373889464    -1.384799074653610     0.562063356457305
    H                1.814774373889465    -0.498799074653610     2.632063356457305
    H                0.996774373889465     0.921200925346390     1.990063356457305
    H                2.740934373889464     0.735690925346390     1.722273356457305

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-095LYS-127ASP-1-dimer.npy', np.array(charges))