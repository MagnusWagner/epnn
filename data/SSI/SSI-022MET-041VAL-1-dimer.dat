import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.421581815251468     0.048649285229837     0.236769938536322
    C                2.102581815251467     0.851649285229837     2.323769938536322
    S                0.364581815251468     0.480649285229837     1.979769938536322
    H               -0.575418184748532    -0.238350714770163    -0.099230061463678
    H                1.108581815251467    -0.780350714770163     0.073769938536322
    H                0.764581815251468     0.904649285229837    -0.342230061463678
    H                2.148581815251468     1.439649285229837     3.241769938536322
    H                2.496581815251468     1.459649285229837     1.508769938536322
    H                2.723881815251468    -0.046746714770163     2.453659938536322
    C               -1.121418184748532    -1.343350714770163    -3.021230061463678
    C               -2.252418184748532    -0.576350714770163    -3.694230061463678
    H               -1.455418184748533    -1.776350714770163    -2.080230061463678
    H               -0.272418184748532    -0.684350714770163    -2.835230061463678
    H               -0.808418184748532    -2.161350714770163    -3.669230061463678
    H               -3.078418184748532    -1.265350714770163    -3.875230061463678
    H               -2.597501184748532     0.240082285229837    -3.042805061463678
    H               -1.903641184748532    -0.201360714770163    -4.667748061463678

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-022MET-041VAL-1-dimer.npy', np.array(charges))