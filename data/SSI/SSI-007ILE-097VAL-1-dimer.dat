import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.385464012188026    -0.457319931050756    -1.698880947634553
    C                0.021464012188025    -1.145319931050756    -1.896880947634553
    H                1.359464012188025     0.559680068949244    -2.088880947634553
    H                1.627464012188025    -0.419319931050756    -0.638880947634553
    H                2.166464012188026    -1.024319931050756    -2.205880947634554
    H               -0.765535987811975    -0.487319931050756    -1.526880947634553
    H                0.023464012188025    -2.047319931050756    -1.284880947634553
    H               -0.164305987811975    -1.425029931050756    -2.944380947634553
    C               -0.081535987811975     1.050680068949243     1.396119052365447
    C               -1.330535987811975     0.558680068949244     2.187119052365447
    H                0.475464012188025     1.789680068949244     1.971119052365446
    H                0.571464012188025     0.198680068949244     1.217119052365447
    H               -0.387535987811975     1.484680068949244     0.443119052365447
    H               -0.962535987811975     0.103680068949244     3.107119052365447
    H               -1.986215987811975     1.400164068949244     2.455419052365447
    H               -1.896405987811975    -0.213271931050756     1.645009052365446

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-007ILE-097VAL-1-dimer.npy', np.array(charges))