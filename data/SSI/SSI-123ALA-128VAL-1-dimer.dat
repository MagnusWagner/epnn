import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.308720961997129    -0.724253035274582     1.546423639504160
    C                1.029720961997129    -1.461253035274582     2.659423639504160
    H               -0.736279038002871    -0.580253035274582     1.823423639504160
    H                0.733720961997129     0.267746964725418     1.395423639504160
    H                0.339720961997129    -1.302253035274582     0.623423639504160
    H                2.050720961997129    -1.691253035274582     2.382423639504160
    H                0.512890961997129    -2.410799035274582     2.862523639504159
    H                1.077790961997129    -0.794101835274582     3.532693639504159
    C               -0.517279038002871     0.825746964725418    -1.405576360495840
    C               -0.812279038002871     1.355746964725419    -2.801576360495841
    H               -0.566279038002871     1.630746964725418    -0.672576360495840
    H               -1.264279038002871     0.079746964725418    -1.133576360495840
    H                0.466720961997129     0.365746964725418    -1.373576360495840
    H               -1.775279038002871     1.841746964725418    -2.763576360495840
    H               -0.067159038002871     2.098687964725418    -3.122256360495840
    H               -0.878069038002871     0.542009064725418    -3.538806360495840

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-123ALA-128VAL-1-dimer.npy', np.array(charges))