import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.415469856623305    -1.565414580793529     2.030707917758448
    C                2.826469856623305    -2.128414580793530     1.893707917758448
    H                0.989469856623305    -1.858414580793529     2.991707917758448
    H                1.460469856623305    -0.478414580793529     2.031707917758448
    H                0.778469856623305    -1.911414580793529     1.214707917758448
    H                3.146469856623305    -2.048414580793529     0.857707917758448
    H                2.848829856623305    -3.172974580793530     2.237807917758448
    H                3.537289856623305    -1.553534580793529     2.505467917758448
    C                0.419469856623305     0.690585419206471    -0.663292082241552
    C               -1.813530143376695     1.414585419206471    -2.107292082241552
    S               -1.371530143376696     0.748585419206471    -0.503292082241552
    H                0.867469856623305     1.658585419206471    -0.872292082241552
    H                0.834469856623305     0.355585419206471     0.277707917758448
    H                0.696469856623305    -0.031414580793529    -1.427292082241552
    H               -2.840530143376696     1.445585419206471    -2.328292082241552
    H               -1.578530143376695     0.572585419206471    -2.761292082241552
    H               -1.139370143376695     2.190125419206471    -2.499770082241552

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-076LEU-086MET-1-dimer.npy', np.array(charges))