import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.434961364247436     1.385727202075181     0.663551473814343
    C               -0.593038635752564     1.818727202075181    -1.910448526185657
    S               -1.050038635752564     1.077727202075180    -0.329448526185657
    H                0.656961364247436     2.453727202075181     0.672551473814343
    H                0.258961364247436     1.050727202075181     1.685551473814343
    H                1.280961364247436     0.835727202075181     0.260551473814343
    H                0.145961364247436     2.599727202075181    -1.741448526185657
    H               -1.480038635752564     2.289727202075181    -2.332448526185657
    H               -0.207018635752564     1.105627202075181    -2.653737826185657
    C                0.661961364247436    -2.296272797924819     1.310551473814343
    C                1.648961364247436    -3.252272797924819     0.657551473814343
    H               -0.113038635752564    -2.847272797924819     1.842551473814343
    H                1.189961364247436    -1.663272797924820     2.022551473814343
    H                0.202961364247436    -1.661272797924819     0.553551473814343
    H                1.956961364247436    -3.992272797924819     1.398551473814343
    H                2.531961364247437    -2.680272797924819     0.384551473814343
    H                1.253091364247436    -3.769842797924819    -0.228682526185657

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-174MET-177ILE-1-dimer.npy', np.array(charges))