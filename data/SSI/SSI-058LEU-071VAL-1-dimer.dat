import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.388491904963774     0.378980137582217    -0.941170111882006
    C               -1.452491904963774    -0.258019862417783    -2.349170111882007
    H               -1.232491904963774    -0.395019862417783    -0.187170111882006
    H               -0.563491904963774     1.085980137582217    -0.896170111882006
    H               -2.307491904963774     0.922980137582217    -0.722170111882006
    H               -1.750491904963774     0.512980137582217    -3.050170111882006
    H               -2.177171904963774    -1.084787862417783    -2.385116111882007
    H               -0.469791904963774    -0.634817862417783    -2.669052111882007
    C                1.451508095036226    -0.778019862417783     1.391829888117994
    C                1.393508095036226     0.654980137582217     1.901829888117994
    H                2.336508095036226    -1.282019862417783     1.783829888117994
    H                0.563508095036226    -1.319019862417783     1.723829888117994
    H                1.465508095036226    -0.803019862417783     0.301829888117994
    H                0.562508095036226     1.150980137582217     1.402829888117993
    H                2.323898095036226     1.195505137582217     1.673337888117994
    H                1.200988095036226     0.675019137582217     2.984665888117993

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-058LEU-071VAL-1-dimer.npy', np.array(charges))