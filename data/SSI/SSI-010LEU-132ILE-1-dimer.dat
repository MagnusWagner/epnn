import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.225785844557767    -0.462765957685818    -0.792188174073888
    C                2.372785844557767    -0.814765957685818    -1.745188174073888
    H                1.406785844557767     0.480234042314182    -0.279188174073888
    H                0.302785844557767    -0.357765957685818    -1.364188174073888
    H                1.090785844557767    -1.258765957685818    -0.057188174073888
    H                2.496785844557767     0.021234042314182    -2.432188174073888
    H                3.313565844557767    -0.973355957685818    -1.197658174073888
    H                2.118035844557767    -1.691595957685818    -2.358605174073888
    C               -1.721214155442233    -0.062765957685818     1.574811825926112
    C               -1.881214155442233     1.337234042314182     0.965811825926112
    H               -2.201214155442233    -0.812765957685818     0.947811825926112
    H               -0.660214155442233    -0.304765957685818     1.648811825926112
    H               -2.156214155442233    -0.086765957685818     2.573811825926112
    H               -1.524214155442233     1.330234042314182    -0.065188174073888
    H               -1.223214155442233     1.987234042314182     1.539811825926112
    H               -2.917754155442233     1.703326042314182     1.005291825926112

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-010LEU-132ILE-1-dimer.npy', np.array(charges))