import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.864596105049701     1.013624987772917    -1.453861733065070
    C               -2.229596105049701     1.016624987772917    -0.772861733065070
    H               -0.100596105049701     1.447624987772917    -0.809861733065070
    H               -0.583596105049701    -0.008375012227083    -1.704861733065070
    H               -0.916596105049701     1.583624987772917    -2.381861733065070
    H               -2.152596105049701     0.456624987772917     0.155138266934930
    H               -2.517276105049701     2.058633987772917    -0.569242733065070
    H               -2.983236105049701     0.519939987772917    -1.401613733065070
    C                0.904403894950299    -0.657375012227083     0.906138266934930
    C                2.192403894950299    -1.368375012227083     1.318138266934930
    H                0.641403894950299    -0.953375012227083    -0.107861733065070
    H                0.091403894950299    -0.950375012227083     1.564138266934930
    H                1.022403894950299     0.423624987772917     0.978138266934930
    H                2.534403894950299    -0.934375012227083     2.257138266934930
    H                2.985653894950299    -1.269839012227083     0.562461266934930
    H                1.947483894950299    -2.427315012227083     1.487424266934930

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-071VAL-119VAL-1-dimer.npy', np.array(charges))