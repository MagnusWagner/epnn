import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.338225220853708    -1.335434106911788     0.133119143864088
    C                2.753225220853709    -1.490434106911788    -0.426880856135912
    H                0.959225220853709    -0.338434106911788    -0.095880856135912
    H                0.667225220853709    -2.072434106911788    -0.301880856135912
    H                1.325225220853709    -1.487434106911788     1.212119143864088
    H                3.142225220853708    -2.446434106911789    -0.070880856135912
    H                3.414375220853709    -0.698764106911788    -0.044597556135912
    H                2.766828220853708    -1.511194106911788    -1.526600756135912
    C               -1.819774779146291     0.823565893088212     0.570119143864088
    C               -2.274774779146291     2.008565893088212    -0.276880856135912
    H               -2.676774779146291     0.407565893088212     1.099119143864088
    H               -1.398774779146291     0.054565893088212    -0.076880856135912
    H               -1.061774779146291     1.129565893088212     1.277119143864088
    H               -1.393774779146291     2.470565893088212    -0.722880856135912
    H               -2.785900779146291     2.747655893088211     0.357545943864088
    H               -2.921203779146291     1.670195893088212    -1.100068456135912

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-063ILE-077LEU-1-dimer.npy', np.array(charges))