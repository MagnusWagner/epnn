import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.089163928721244    -1.109623249352126     0.749900213517459
    C                1.915163928721244    -1.972623249352126     1.693900213517459
    H                0.099163928721244    -0.923623249352126     1.166900213517459
    H                1.595163928721244    -0.154623249352126     0.606900213517459
    H                0.993163928721244    -1.604623249352126    -0.216099786482541
    H                1.995163928721244    -1.448623249352126     2.645900213517459
    H                2.916163928721244    -2.062623249352126     1.269900213517459
    H                1.505813928721244    -2.982023249352125     1.847320213517459
    C               -1.280836071278756     0.907376750647874    -0.859099786482541
    C               -1.730836071278756     2.168376750647874    -1.585099786482541
    H               -1.371836071278756     0.069376750647874    -1.538099786482541
    H               -0.246836071278756     1.012376750647874    -0.530099786482541
    H               -1.908836071278756     0.735376750647874     0.016900213517459
    H               -1.459836071278756     3.023376750647874    -0.964099786482541
    H               -2.817736071278756     2.137366750647874    -1.751499786482541
    H               -1.212106071278756     2.275576750647874    -2.549169786482541

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-118ILE-165ALA-1-dimer.npy', np.array(charges))