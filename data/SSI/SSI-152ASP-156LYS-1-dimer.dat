import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                1.761283570564643    -2.479296821854912     0.268071607449745
    C                1.182283570564643    -1.100296821854912     0.587071607449746
    O                0.177283570564643    -0.998296821854912     1.329071607449746
    O                1.780283570564643    -0.111296821854912     0.106071607449745
    H                2.617283570564643    -2.656296821854912     0.920071607449746
    H                2.133283570564643    -2.486296821854912    -0.753928392550255
    H                1.041633570564643    -3.301963821854912     0.391829607449745
    C               -1.331716429435357     1.551703178145088    -0.285928392550254
    C               -2.425716429435357     0.534703178145088    -0.622928392550255
    C               -1.154716429435357     2.621703178145088    -1.360928392550254
    H               -1.590716429435357     2.038703178145088     0.656071607449746
    H               -0.386716429435357     1.042703178145088    -0.153928392550255
    H               -3.344716429435358     1.089703178145088    -0.779928392550255
    H               -0.792716429435357     2.157703178145088    -2.278928392550255
    H               -2.114716429435357     3.085703178145088    -1.566928392550254
    H               -2.582956429435357    -0.160779821854912     0.214674607449745
    H               -2.168576429435357    -0.035190821854912    -1.527969852550255
    H               -0.439526429435357     3.399023178145088    -1.053900392550255

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-152ASP-156LYS-1-dimer.npy', np.array(charges))