import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.875735663807171    -1.751733077757002     0.184863035444088
    C               -2.021735663807171    -1.660733077757002     1.185863035444089
    H               -0.012735663807171    -1.199733077757002     0.550863035444088
    H               -0.601735663807171    -2.795733077757002     0.033863035444088
    H               -1.181735663807171    -1.336733077757001    -0.773136964555912
    H               -2.901735663807171    -2.141733077757002     0.760863035444089
    H               -2.226109663807171    -0.606593077757002     1.424653035444089
    H               -1.775081663807171    -2.211733077757002     2.105403035444089
    C                0.719264336192829     1.595266922242998    -0.483136964555912
    C                2.177264336192829     1.823266922242998    -0.887136964555912
    H                0.119264336192829     2.490266922242998    -0.634136964555912
    H                0.310264336192829     0.779266922242998    -1.078136964555911
    H                0.661264336192829     1.320266922242998     0.565863035444088
    H                2.236264336192828     1.919266922242998    -1.971136964555911
    H                2.576873336192829     2.733766922242998    -0.416706964555912
    H                2.806427336192829     0.977176922242998    -0.573636964555912

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-009LEU-033LEU-2-dimer.npy', np.array(charges))