import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.156386436976623     1.595428396675683     0.433546966496114
    C                0.827386436976623     2.950428396675683     0.221546966496114
    H                0.787386436976623     0.937428396675683     1.032546966496114
    H               -0.789613563023377     1.730428396675683     0.958546966496114
    H               -0.041613563023377     1.135428396675683    -0.533453033503886
    H                1.045386436976623     3.377428396675683     1.200546966496114
    H                1.758726436976623     2.828948396675683    -0.351033033503886
    H                0.137016436976623     3.619988396675682    -0.312383033503886
    C               -0.013613563023377    -1.867571603324317    -0.758453033503886
    C               -0.961613563023377    -2.681571603324317     0.100546966496114
    H                0.307386436976623    -2.428571603324317    -1.634453033503886
    H               -0.571613563023377    -0.988571603324317    -1.064453033503886
    H                0.852386436976623    -1.559571603324317    -0.172453033503886
    H               -1.381613563023377    -2.016571603324318     0.855546966496114
    H               -0.433393563023377    -3.517681603324317     0.582116966496114
    H               -1.772193563023377    -3.079551603324317    -0.527593033503886

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-016VAL-033THR-1-dimer.npy', np.array(charges))