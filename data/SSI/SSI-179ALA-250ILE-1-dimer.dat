import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.132535775069328    -1.043751349818381     1.182695601149768
    C               -0.164535775069328    -2.181751349818382     2.223695601149767
    H               -1.106535775069328    -0.581751349818381     1.138695601149767
    H                0.597464224930672    -0.286751349818381     1.461695601149767
    H                0.105464224930672    -1.451751349818381     0.201695601149767
    H                0.788464224930672    -2.702751349818381     2.114695601149768
    H               -0.998585775069328    -2.865931349818381     2.008625601149767
    H               -0.186025775069328    -1.792141349818381     3.252155601149767
    C                0.015464224930672     0.913248650181619    -2.035304398850233
    C                0.280464224930672     2.315248650181619    -1.369304398850232
    H                0.876464224930672     0.259248650181619    -1.916304398850232
    H               -0.841535775069328     0.447248650181619    -1.549304398850233
    H               -0.194535775069328     1.027248650181619    -3.097304398850233
    H                0.686464224930672     2.175248650181619    -0.366304398850233
    H               -0.676535775069328     2.815248650181619    -1.286304398850233
    H                0.963044224930672     2.921178650181619    -1.983264398850233

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-179ALA-250ILE-1-dimer.npy', np.array(charges))