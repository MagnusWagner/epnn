import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.574008201407549    -0.108209590433250     1.924161005317297
    C               -0.361008201407549     1.407790409566750     2.038161005317297
    H               -1.150008201407549    -0.374209590433250     1.042161005317297
    H                0.386991798592451    -0.615209590433250     1.857161005317297
    H               -1.078008201407550    -0.495209590433250     2.809161005317297
    H                0.120991798592451     1.756790409566750     1.125161005317297
    H                0.328991798592451     1.596790409566750     2.862161005317297
    H               -1.273448201407549     1.997890409566750     2.209152005317297
    C                0.846991798592451    -0.695209590433250    -1.316838994682703
    C                0.081991798592451    -0.601209590433250    -2.648838994682703
    H                1.232991798592451     0.284790409566750    -1.030838994682703
    H                0.160991798592451    -1.048209590433250    -0.552838994682703
    H                1.662991798592450    -1.417209590433250    -1.364838994682703
    H               -0.723008201407549     0.125790409566750    -2.543838994682703
    H                0.755281798592451    -0.274479590433250    -3.455021994682703
    H               -0.352928201407549    -1.575169590433250    -2.917619994682703

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-052ILE-100VAL-1-dimer.npy', np.array(charges))