import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.090216807248792     1.061090418475821     2.894777497789896
    O                0.076783192751208     0.462090418475821     2.341777497789896
    H                0.705783192751208     0.297090418475821     3.059777497789896
    H               -1.314216807248792     0.580090418475821     3.846777497789896
    H               -0.921396807248792     2.135960418475821     3.056477497789897
    H               -1.942476807248792     0.884310418475821     2.222177497789896
    C                0.057783192751208    -0.120909581524179    -2.827222502210103
    C                0.283783192751208    -0.467909581524179    -1.382222502210104
    O                0.628783192751208    -1.598909581524179    -1.063222502210103
    N                0.083783192751208     0.497090418475821    -0.499222502210104
    H                0.197783192751208     0.311090418475821     0.491777497789896
    H               -0.120216807248792     1.436090418475821    -0.822222502210103
    H               -0.699216807248792     0.654090418475821    -2.893222502210103
    H               -0.331216807248792    -1.002909581524179    -3.335222502210104
    H                0.977263192751208     0.216330418475821    -3.328022502210104

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-042THR-052ASN-1-dimer.npy', np.array(charges))