import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.301012639465102    -0.123638846230910     1.102362515548129
    C               -1.424012639465102     0.699361153769090     2.372362515548129
    H               -1.647012639465102    -1.140638846230910     1.285362515548129
    H               -1.899012639465102     0.321361153769090     0.306362515548129
    H               -0.258012639465102    -0.164638846230910     0.811362515548129
    H               -1.325012639465102     1.750361153769090     2.103362515548129
    H               -0.612352639465102     0.430961153769090     3.064579515548129
    H               -2.408942639465102     0.539291153769090     2.835267515548129
    C                0.632987360534898    -0.452638846230910    -1.855637484451871
    C                2.093987360534898    -0.129638846230910    -1.618637484451871
    H                0.430987360534898    -1.502638846230910    -1.638637484451871
    H                0.024987360534898     0.189361153769090    -1.228637484451871
    H                0.322987360534898    -0.219638846230910    -2.869637484451871
    H                2.227987360534898     0.951361153769090    -1.659637484451871
    H                2.715507360534898    -0.602078846230910    -2.393560484451871
    H                2.404677360534898    -0.475008846230910    -0.621545484451871

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-017LEU-066LEU-1-dimer.npy', np.array(charges))