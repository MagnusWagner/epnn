import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C               -0.103175019796738    -2.335644783901562    -1.704515676484587
    C                0.406824980203262    -0.947644783901561    -1.326515676484587
    O               -0.477175019796738    -0.093644783901562    -1.050515676484587
    O                1.634824980203262    -0.697644783901561    -1.321515676484587
    H               -0.886175019796738    -2.251644783901562    -2.461515676484587
    H               -0.562175019796738    -2.775644783901562    -0.816515676484587
    H                0.673824980203262    -3.029604783901561    -2.057635676484587
    C               -0.130175019796738     0.992355216098438     2.048484323515413
    C               -1.563175019796738     1.334355216098438     2.400484323515413
    O                0.259824980203262     1.611355216098439     0.864484323515413
    H                0.545824980203262     1.295355216098438     2.845484323515413
    H               -0.036175019796738    -0.087644783901562     1.923484323515413
    H               -1.825175019796738     0.827355216098439     3.328484323515414
    H                0.054824980203262     0.985355216098438     0.128484323515413
    H               -2.250595019796738     0.990265216098439     1.613684323515413
    H               -1.663615019796738     2.420995216098439     2.538774323515413

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-221GLU-263SER-1-dimer.npy', np.array(charges))