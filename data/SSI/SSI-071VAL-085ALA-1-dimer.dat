import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.013090227105222     1.916115681895189    -0.459243520710464
    C               -1.093090227105222     1.252115681895189    -1.840243520710464
    H               -0.351090227105222     2.780115681895189    -0.487243520710464
    H               -2.003090227105222     2.253115681895189    -0.155243520710464
    H               -0.645090227105222     1.214115681895189     0.283756479289536
    H               -1.364090227105222     2.023115681895189    -2.562243520710465
    H               -0.123060227105222     0.820205681895189    -2.127473520710464
    H               -1.876580227105222     0.480175681895189    -1.856113520710464
    C                0.661909772894778    -1.018884318104812     1.407756479289536
    C                1.443909772894778    -2.155884318104811     0.893756479289536
    H                0.419909772894778    -1.170884318104811     2.458756479289536
    H                1.244909772894778    -0.101884318104811     1.309756479289536
    H               -0.262090227105222    -0.910884318104811     0.840756479289536
    H                1.950909772894778    -1.845884318104811    -0.020243520710464
    H                0.799169772894778    -3.018064318104812     0.668016479289536
    H                2.214489772894778    -2.445404318104812     1.623396479289536

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-071VAL-085ALA-1-dimer.npy', np.array(charges))