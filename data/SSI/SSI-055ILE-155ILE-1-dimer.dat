import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.478946057303587    -0.375440950349568    -1.466511060601296
    C                0.758946057303587     0.206559049650432    -2.850511060601296
    H                1.074946057303587     0.155559049650432    -0.723511060601297
    H               -0.584053942696413    -0.265440950349568    -1.257511060601296
    H                0.741946057303587    -1.432440950349568    -1.443511060601297
    H                1.727946057303587    -0.115440950349568    -3.204511060601297
    H                0.812946057303587     1.289559049650432    -2.730511060601297
    H               -0.013585942696413    -0.009690950349568    -3.603121060601297
    C               -0.685053942696413    -0.340440950349568     1.535488939398703
    C               -0.544053942696413     0.503559049650432     2.778488939398704
    H               -1.463053942696413    -1.073440950349568     1.721488939398703
    H               -0.996053942696413     0.316559049650432     0.727488939398703
    H                0.206946057303587    -0.896440950349568     1.268488939398703
    H               -0.800053942696413    -0.110440950349568     3.644488939398704
    H               -1.281053942696413     1.302559049650432     2.712488939398703
    H                0.468533057303587     0.907729049650432     2.924478939398703

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-055ILE-155ILE-1-dimer.npy', np.array(charges))