import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.534781598662755    -1.686183084358767     0.977219146924462
    C               -0.450218401337245    -2.192183084358766     2.020219146924462
    H                0.458781598662755    -2.282183084358766     0.071219146924462
    H                0.298781598662755    -0.661183084358766     0.718219146924462
    H                1.552781598662755    -1.730183084358767     1.365219146924462
    H               -0.367218401337245    -1.598183084358767     2.921219146924462
    H               -0.177646401337245    -3.228963084358766     2.266762146924462
    H               -1.484585401337245    -2.122113084358766     1.652556146924462
    C                0.182781598662755     1.346816915641233    -1.073780853075538
    C               -0.272218401337245     2.531816915641234    -1.920780853075538
    H               -0.674218401337245     0.930816915641233    -0.544780853075538
    H                0.603781598662755     0.577816915641233    -1.720780853075538
    H                0.940781598662755     1.652816915641233    -0.366780853075538
    H                0.608781598662755     2.993816915641234    -2.366780853075538
    H               -0.783344401337245     3.270906915641234    -1.286354053075538
    H               -0.918647401337245     2.193446915641234    -2.743968453075538

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-013LEU-077LEU-1-dimer.npy', np.array(charges))