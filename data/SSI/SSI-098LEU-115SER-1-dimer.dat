import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                2.247573310920940     0.823551265866565     0.149789458383719
    C                3.223573310920940     0.257551265866565    -0.882210541616281
    H                1.567573310920940     1.530551265866566    -0.327210541616281
    H                1.669573310920940     0.010551265866565     0.590789458383719
    H                2.797573310920940     1.330551265866565     0.944789458383719
    H                3.862573310920939    -0.461448734133435    -0.371210541616281
    H                3.844923310920940     1.074361265866565    -1.278130541616281
    H                2.707843310920940    -0.266828734133434    -1.700160541616281
    C               -1.499426689079060     0.128551265866565     0.079789458383719
    C               -3.012426689079060    -0.096448734133435    -0.128210541616281
    O               -0.918426689079060    -1.041448734133434     0.663789458383719
    H               -1.017426689079060     0.337551265866565    -0.876210541616281
    H               -1.346426689079060     0.983551265866565     0.739789458383719
    H               -3.426426689079061     0.834551265866565    -0.484210541616281
    H               -0.850426689079060    -0.893448734133434     1.621789458383719
    H               -3.504299689079060    -0.356808734133435     0.820619458383719
    H               -3.151095689079060    -0.849328734133434    -0.918110541616281

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-098LEU-115SER-1-dimer.npy', np.array(charges))