import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                0.699853125608351    -0.911502026055056     1.504840903671948
    C                1.373853125608351    -2.110502026055055     2.092840903671948
    C               -0.268146874391649    -0.442502026055056     2.615840903671948
    H                0.165853125608351    -1.221502026055056     0.606840903671948
    H                1.418853125608351    -0.131502026055056     1.259840903671948
    H                1.788853125608351    -2.767502026055056     1.333840903671948
    H                2.170853125608351    -1.782502026055055     2.761840903671948
    H                0.180853125608351     0.366497973944944     3.193840903671949
    H                0.586073125608351    -2.600712026055056     2.683680903671948
    H               -0.400336874391649    -1.336092026055055     3.243550903671948
    H               -1.242286874391649    -0.145052026055056     2.200420903671948
    C               -1.688146874391649     1.561497973944945    -1.360159096328052
    C               -0.368146874391649     0.812497973944944    -1.569159096328052
    O                0.694853125608351     1.493497973944945    -1.385159096328052
    O               -0.421146874391649    -0.399502026055056    -1.923159096328052
    H               -1.551146874391649     2.292497973944944    -0.561159096328052
    H               -2.468146874391649     0.863497973944945    -1.048159096328052
    H               -2.007886874391649     2.084377973944945    -2.273589096328052

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-044PRO-053ASP-1-dimer.npy', np.array(charges))