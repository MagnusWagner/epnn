import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -2.088747145108737     0.517419900025131     2.104299448756894
    O               -1.460747145108737     0.444419900025131     0.843299448756894
    H               -1.920747145108737     0.987419900025131     0.182299448756894
    H               -1.600747145108737    -0.181580099974869     2.782299448756894
    H               -3.135747145108736     0.228419900025131     1.990299448756894
    H               -2.027497145108736     1.531289900025131     2.526566448756895
    C                1.210252854891263     0.152419900025131    -0.824700551243106
    C                1.188252854891263    -0.108580099974869    -2.326700551243106
    C                1.482252854891263    -1.097580099974869     0.018299448756894
    H                2.017252854891264     0.867419900025131    -0.663700551243106
    H                0.302252854891263     0.654419900025131    -0.556700551243106
    H                2.149252854891263    -0.535580099974869    -2.628700551243106
    H                0.691252854891263    -1.833580099974869    -0.127700551243106
    H                2.436252854891264    -1.537580099974869    -0.278700551243106
    H                1.010042854891263     0.831359900025131    -2.869610551243106
    H                0.406652854891263    -0.840970099974869    -2.577102551243105
    H                1.517722854891263    -0.838430099974869     1.086748448756895

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-019SER-023ARG-1-dimer.npy', np.array(charges))