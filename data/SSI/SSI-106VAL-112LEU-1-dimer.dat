import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.630946235100379     1.590153903101687     0.403870272294457
    C               -0.073946235100379     2.734153903101687    -0.454129727705543
    H               -0.889946235100379     1.956153903101687     1.397870272294457
    H               -1.526946235100379     1.184153903101687    -0.067129727705543
    H                0.096053764899621     0.786153903101687     0.496870272294457
    H                0.250053764899621     2.316153903101688    -1.409129727705543
    H                0.785653764899621     3.209003903101687     0.041461272294457
    H               -0.848506235100379     3.489243903101687    -0.653898727705543
    C               -0.337946235100379    -2.245846096898313     0.337870272294457
    C                1.048053764899621    -2.078846096898312    -0.284129727705543
    H               -0.273946235100379    -2.480846096898313     1.396870272294457
    H               -0.898946235100379    -1.316846096898313     0.241870272294457
    H               -0.896946235100379    -3.026846096898313    -0.180129727705543
    H                1.636053764899621    -1.400846096898313     0.332870272294457
    H                1.533143764899621    -3.064161096898313    -0.346117727705543
    H                0.972183764899621    -1.646741096898312    -1.292855727705543

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-106VAL-112LEU-1-dimer.npy', np.array(charges))