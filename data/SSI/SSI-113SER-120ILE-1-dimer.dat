import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.536884179395470    -1.148386139061641     0.254720573184039
    C               -0.296884179395470    -2.114386139061641    -0.901279426815961
    O               -1.367884179395469    -1.731386139061641     1.244720573184039
    H                0.418115820604530    -0.874386139061641     0.706720573184039
    H               -1.014884179395469    -0.245386139061641    -0.122279426815961
    H               -1.244884179395469    -2.299386139061641    -1.407279426815962
    H               -0.790884179395470    -2.263386139061641     1.818720573184039
    H                0.105258820604530    -3.068626139061641    -0.530186426815961
    H                0.419075820604530    -1.680926139061641    -1.615083426815962
    C                0.849115820604530     1.873613860938359    -0.378279426815961
    C                1.418115820604530     3.273613860938359    -0.346279426815961
    H                0.277115820604530     1.672613860938359     0.525720573184039
    H                0.175115820604530     1.781613860938359    -1.229279426815961
    H                1.653115820604530     1.143613860938359    -0.478279426815961
    H                0.604115820604530     3.985613860938359    -0.194279426815961
    H                1.851115820604530     3.464613860938359    -1.327279426815962
    H                2.188935820604530     3.424493860938359     0.423829573184039

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-113SER-120ILE-1-dimer.npy', np.array(charges))