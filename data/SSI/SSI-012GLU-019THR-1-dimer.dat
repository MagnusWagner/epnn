import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C               -1.537019338438866     0.078382987253034    -0.206745540259571
    C               -1.556019338438865    -1.449617012746966    -0.219745540259571
    C               -0.705019338438866     0.629382987253034     0.932254459740429
    O               -1.261019338438866     1.374382987253034     1.768254459740429
    O                0.507980661561134     0.323382987253034     0.982254459740429
    H               -1.126019338438866     0.462382987253034    -1.137745540259571
    H               -2.565019338438866     0.441382987253034    -0.122745540259571
    H               -2.245019338438866    -1.790617012746966     0.551254459740429
    H               -0.567019338438866    -1.841617012746966     0.013254459740429
    H               -1.863969338438866    -1.858540012746966    -1.193370540259571
    C                2.762980661561134    -0.631617012746966    -1.481745540259571
    O                1.399980661561134    -0.238617012746966    -1.582745540259571
    H                1.105980661561135    -0.044617012746966    -0.667745540259571
    H                3.215980661561135    -0.119617012746966    -0.632745540259571
    H                2.805385661561134    -1.719781012746966    -1.326498540259571
    H                3.296749661561134    -0.333081012746966    -2.396057540259572

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-012GLU-019THR-1-dimer.npy', np.array(charges))