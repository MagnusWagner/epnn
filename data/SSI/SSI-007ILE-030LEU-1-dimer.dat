import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.102597896656154    -0.975953528477619     0.834402662059720
    C               -1.192597896656154    -2.502953528477619     0.894402662059720
    H               -0.070597896656154    -0.677953528477619     0.924402662059720
    H               -1.497597896656154    -0.603953528477619    -0.108597337940280
    H               -1.697597896656154    -0.498953528477619     1.612402662059720
    H               -2.240597896656154    -2.782953528477619     0.808402662059720
    H               -0.789707896656154    -2.868053528477619     1.850638662059720
    H               -0.635357896656154    -2.958353528477619     0.062483662059720
    C                0.620402103343846     2.090046471522380    -0.443597337940280
    C                1.678402103343846     1.383046471522381    -1.285597337940280
    H               -0.096597896656154     2.599046471522381    -1.089597337940280
    H                0.086402103343846     1.378046471522381     0.175402662059720
    H                1.095402103343846     2.824046471522381     0.208402662059720
    H                2.390402103343846     0.919046471522381    -0.614597337940280
    H                2.196682103343846     2.128476471522381    -1.906667337940280
    H                1.216202103343846     0.610786471522381    -1.918040337940280

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-007ILE-030LEU-1-dimer.npy', np.array(charges))