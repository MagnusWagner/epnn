import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.458199642453521    -1.783936094958110     1.358967685469476
    C                1.727199642453521    -2.040936094958110     0.523967685469476
    H                0.671199642453521    -1.932936094958110     2.418967685469476
    H                0.094199642453521    -0.769936094958110     1.205967685469476
    H               -0.345800357546479    -2.452936094958110     1.056967685469476
    H                1.490199642453522    -1.848936094958110    -0.524032314530524
    H                2.059919642453521    -3.084076094958110     0.629637685469476
    H                2.541469642453522    -1.363216094958110     0.820067685469476
    C               -0.795800357546478     1.301063905041890    -0.596032314530524
    C               -1.393800357546479     2.521063905041889    -1.286032314530524
    H                0.058199642453521     0.938063905041890    -1.167032314530524
    H               -0.465800357546479     1.573063905041890     0.406967685469476
    H               -1.538800357546479     0.505063905041890    -0.527032314530524
    H               -0.617800357546479     3.284063905041890    -1.338032314530524
    H               -1.681110357546479     2.257453905041889    -2.314602314530524
    H               -2.215850357546478     2.927003905041889    -0.678212314530524

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-017ILE-028LEU-1-dimer.npy', np.array(charges))