import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                0.526468532770815    -3.030010887375768    -1.627722966614029
    C                0.249468532770815    -1.899010887375769    -0.656722966614029
    O               -0.892531467229185    -1.596010887375768    -0.338722966614029
    N                1.283468532770815    -1.275010887375768    -0.160722966614029
    H                1.094468532770815    -0.520010887375768     0.494277033385971
    H                2.217468532770816    -1.558010887375769    -0.396722966614029
    H                0.511468532770815    -3.958010887375769    -1.055722966614029
    H                1.525468532770815    -2.930010887375769    -2.053722966614029
    H               -0.220947467229185    -3.106190887375769    -2.431194966614029
    C                0.402468532770815     2.432989112624231    -0.426722966614029
    C               -0.362531467229185     1.888989112624232     0.747277033385971
    O                0.252468532770815     1.155989112624232     1.583277033385971
    O               -1.538531467229185     2.284989112624232     0.842277033385971
    H                1.351468532770815     1.908989112624232    -0.386722966614029
    H                0.606468532770815     3.490989112624232    -0.251722966614029
    H               -0.057424467229185     2.334697112624232    -1.421125966614029

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-004GLN-056GLU-1-dimer.npy', np.array(charges))