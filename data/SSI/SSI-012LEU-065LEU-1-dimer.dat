import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.132736186576280     1.738314179121587     0.368416349936189
    C                1.115263813423720     1.950314179121587    -0.490583650063811
    H               -0.677736186576280     2.678314179121588     0.467416349936189
    H               -0.789736186576280     1.008314179121587    -0.102583650063811
    H                0.144263813423720     1.388314179121587     1.362416349936189
    H                1.638263813423720     1.001314179121587    -0.574583650063811
    H                1.780333813423720     2.700484179121587    -0.037904650063811
    H                0.828773813423720     2.248374179121587    -1.509936650063811
    C                0.236263813423720    -1.647685820878413     0.112416349936189
    C               -1.220736186576280    -2.041685820878413     0.010416349936189
    H                0.851263813423720    -2.522685820878412     0.332416349936189
    H                0.545263813423720    -1.206685820878413    -0.832583650063811
    H                0.384263813423720    -0.914685820878413     0.904416349936189
    H               -1.787736186576280    -1.223685820878412    -0.426583650063811
    H               -1.569506186576280    -2.217875820878413     1.038676349936189
    H               -1.324556186576280    -2.930645820878413    -0.629088650063811

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-012LEU-065LEU-1-dimer.npy', np.array(charges))