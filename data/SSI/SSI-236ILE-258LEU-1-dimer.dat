import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.611955594163769    -0.570063340579717    -0.147342871151232
    C               -2.817955594163770    -1.554063340579717    -0.470342871151232
    H               -1.323955594163769    -0.651063340579717     0.900657128848768
    H               -0.755955594163769    -0.846063340579717    -0.762342871151232
    H               -1.899955594163769     0.456936659420283    -0.370342871151232
    H               -2.535955594163770    -2.562063340579717    -0.172342871151232
    H               -2.939955594163769    -1.544063340579717    -1.551342871151232
    H               -3.754415594163769    -1.264083340579717     0.028619128848768
    C                1.665044405836231     0.865936659420283     0.803657128848768
    C                2.758044405836231     1.258936659420283    -0.184342871151232
    H                1.128044405836231    -0.005063340579717     0.435657128848768
    H                2.111044405836231     0.623936659420283     1.768657128848768
    H                0.970044405836231     1.694936659420283     0.934657128848768
    H                3.339044405836231     2.059936659420283     0.263657128848768
    H                2.314544405836231     1.620486659420283    -1.123805871151232
    H                3.428704405836231     0.407276659420283    -0.371117871151232

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-236ILE-258LEU-1-dimer.npy', np.array(charges))