import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C               -0.369774649749111    -2.076180268599498     0.805809216105392
    C               -1.845774649749111    -1.892180268599498     1.168809216105392
    O               -0.148774649749111    -1.781180268599498    -0.562190783894608
    H                0.244225350250889    -1.407180268599498     1.411809216105392
    H               -0.075774649749111    -3.107180268599497     1.007809216105392
    H               -2.431774649749111    -2.633180268599498     0.625809216105392
    H                0.257225350250889    -0.876180268599498    -0.615190783894608
    H               -2.185057649749111    -0.884911268599498     0.885439216105392
    H               -1.977961649749111    -2.058504268599497     2.248097216105392
    C                1.140225350250889     2.787819731400503    -0.526190783894608
    C                0.558225350250889     1.404819731400502    -0.344190783894608
    O                1.034225350250889     0.453819731400502    -0.998190783894608
    O               -0.352774649749111     1.258819731400502     0.489809216105392
    H                1.325225350250889     2.980819731400502    -1.586190783894608
    H                2.092225350250889     2.846819731400502     0.005809216105392
    H                0.454716150250889     3.556838731400502    -0.140590783894608

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-074SER-111GLU-1-dimer.npy', np.array(charges))