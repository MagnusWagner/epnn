import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.422296982798891    -0.990625862235635     1.238255969950055
    C               -1.292296982798891    -2.138625862235635     1.692255969950055
    H               -0.932296982798891    -0.399625862235635     0.477255969950055
    H               -0.232296982798891    -0.331625862235635     2.088255969950056
    H                0.538703017201109    -1.348625862235635     0.864255969950055
    H               -2.245296982798892    -1.708625862235635     1.985255969950056
    H               -1.471506982798891    -2.831797562235634     0.857151969950055
    H               -0.880026982798891    -2.616207562235635     2.593339969950056
    C                0.987703017201109     1.838374137764365    -0.746744030049945
    C                0.735703017201109     1.277374137764365    -2.189744030049945
    H                2.052703017201108     1.816374137764365    -0.507744030049945
    H                0.636703017201109     2.869374137764365    -0.690744030049945
    H                0.444703017201108     1.256374137764365    -0.009744030049945
    H               -0.325296982798891     1.382374137764365    -2.413744030049945
    H                0.999953017201109     0.211167137764365    -2.247836030049945
    H                1.309033017201108     1.861628137764365    -2.924547030049944

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-007VAL-040THR-1-dimer.npy', np.array(charges))