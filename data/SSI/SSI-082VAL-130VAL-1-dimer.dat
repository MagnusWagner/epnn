import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.605989585778033    -0.008198656783384     1.555038246128725
    C                0.789989585778033    -0.045198656783384     3.070038246128725
    H               -0.445010414221967     0.004801343216616     1.282038246128725
    H                1.077989585778033     0.886801343216616     1.152038246128725
    H                1.060989585778033    -0.889198656783384     1.102038246128725
    H                0.271989585778033     0.812801343216616     3.491038246128725
    H                0.347829585778033    -0.973879656783384     3.459968246128724
    H                1.852429585778033     0.052894343216616     3.337628246128725
    C               -0.120010414221967     0.460801343216616    -2.060961753871275
    C               -1.270010414221966    -0.416198656783384    -2.560961753871275
    H                0.428989585778033     0.877801343216616    -2.899961753871275
    H               -0.535010414221967     1.287801343216616    -1.483961753871275
    H                0.556989585778033    -0.106198656783384    -1.420961753871275
    H               -1.931010414221966     0.199801343216616    -3.168961753871276
    H               -0.893150414221967    -1.250474656783384    -3.170845753871276
    H               -1.863970414221967    -0.798234656783384    -1.717598753871275

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-082VAL-130VAL-1-dimer.npy', np.array(charges))