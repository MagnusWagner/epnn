import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.989090232851521     0.279749943941189     0.407128067860700
    C                2.202090232851521     0.620749943941189     1.885128067860700
    H                2.282090232851521    -0.747250056058811     0.213128067860700
    H                0.945090232851521     0.423749943941189     0.149128067860700
    H                2.579090232851521     0.944749943941189    -0.225871932139300
    H                1.982090232851521     1.681749943941189     2.010128067860700
    H                3.249923232851521     0.444438943941189     2.169658067860700
    H                1.488713232851521     0.079443943941189     2.523938067860700
    C               -1.390909767148479    -0.316250056058811    -0.883871932139300
    C               -2.797909767148480    -0.586250056058811    -1.405871932139300
    H               -1.424909767148479     0.401749943941189    -0.065871932139300
    H               -0.960909767148479    -1.247250056058812    -0.514871932139300
    H               -0.763909767148479     0.077749943941189    -1.683871932139301
    H               -3.415909767148479    -0.950250056058811    -0.584871932139300
    H               -2.722909767148479    -1.378250056058812    -2.148871932139300
    H               -3.266559767148479     0.293183943941189    -1.871661932139300

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-106ILE-168ILE-1-dimer.npy', np.array(charges))