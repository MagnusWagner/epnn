import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.864616839551029    -0.926109992239190    -1.084419569468910
    C                1.549616839551029    -1.407109992239190    -2.357419569468910
    H                0.482616839551029    -1.777109992239190    -0.518419569468910
    H                1.570616839551029    -0.360109992239190    -0.474419569468910
    H                0.029616839551029    -0.278109992239190    -1.354419569468910
    H                1.872616839551029    -0.532109992239190    -2.924419569468910
    H                0.844186839551029    -1.990939992239190    -2.966929569468910
    H                2.444376839551029    -1.995919992239190    -2.107029569468911
    C               -0.839383160448971     0.894890007760810     1.109580430531090
    C               -1.575383160448971     1.428890007760810     2.337580430531090
    H               -0.795383160448971    -0.194109992239190     1.136580430531090
    H               -1.365383160448971     1.205890007760810     0.205580430531090
    H                0.174616839551029     1.297890007760810     1.080580430531090
    H               -1.631383160448971     2.516890007760810     2.254580430531090
    H               -1.014913160448971     1.177360007760810     3.250050430531090
    H               -2.605243160448971     1.042780007760810     2.354900430531090

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-061ALA-080ALA-1-dimer.npy', np.array(charges))