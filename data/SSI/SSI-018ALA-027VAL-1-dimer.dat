import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.451275385301527    -0.237112663144456     1.289435096859255
    C               -0.762275385301527    -0.854112663144456     2.510435096859255
    H               -0.953275385301527     0.688887336855544     0.998435096859255
    H               -1.432275385301528    -0.940112663144456     0.455435096859255
    H               -2.492275385301527    -0.016112663144456     1.530435096859255
    H               -1.293275385301527    -1.776112663144456     2.759435096859255
    H               -0.816995385301527    -0.175782663144456     3.374655096859255
    H                0.275174614698473    -1.130002663144456     2.270475096859255
    C                1.134724614698473     0.230887336855544    -1.201564903140745
    C                1.080724614698473     0.866887336855544    -2.598564903140745
    H                0.333724614698473    -0.482112663144456    -1.058564903140745
    H                2.091724614698473    -0.272112663144456    -1.061564903140745
    H                1.022724614698473     1.006887336855544    -0.444564903140745
    H                1.403724614698473     0.119887336855544    -3.320564903140745
    H                0.057314614698473     1.185457336855544    -2.845864903140745
    H                1.781104614698473     1.713247336855544    -2.654654903140746

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-018ALA-027VAL-1-dimer.npy', np.array(charges))