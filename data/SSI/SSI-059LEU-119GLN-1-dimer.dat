import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.681636674388599    -0.402912910603670     2.132848380776736
    C               -1.431636674388599     0.899087089396330     2.424848380776736
    H               -1.234636674388599    -1.024912910603670     1.431848380776735
    H                0.285363325611401    -0.164912910603670     1.693848380776735
    H               -0.499636674388599    -0.944912910603670     3.056848380776735
    H               -1.559636674388599     1.433087089396330     1.483848380776736
    H               -2.420628674388599     0.727807089396330     2.874908380776735
    H               -0.824683674388599     1.538947089396330     3.082258380776735
    C                0.468363325611401    -1.485912910603670    -1.547151619223264
    C                0.482363325611401    -0.063912910603670    -1.164151619223265
    O               -0.494636674388599     0.654087089396330    -1.321151619223265
    N                1.609363325611401     0.362087089396330    -0.628151619223265
    H                0.644363325611401    -2.102912910603670    -0.669151619223265
    H                1.303363325611401    -1.646912910603670    -2.231151619223264
    H                1.680363325611401     1.334087089396330    -0.367151619223265
    H                2.414363325611401    -0.250912910603670    -0.573151619223265
    H               -0.457164674388599    -1.764602910603670    -2.072251619223265

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-059LEU-119GLN-1-dimer.npy', np.array(charges))