import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.176389525215795     1.296608057378530    -0.763271872045122
    C                1.733389525215795     1.867608057378530    -2.080271872045122
    H                1.319389525215795     2.004608057378530     0.055728127954878
    H                0.111389525215795     1.086608057378530    -0.865271872045122
    H                1.660389525215795     0.351608057378530    -0.514271872045122
    H                1.685389525215795     1.119608057378530    -2.873271872045122
    H                2.772639525215794     2.187710057378530    -1.914478872045122
    H                1.154189525215795     2.761632057378530    -2.354590872045122
    C               -0.867610474784205    -1.334391942621470     0.988728127954878
    C               -2.038610474784206    -1.828391942621470     1.853728127954878
    H               -0.085610474784205    -2.094391942621470     0.950728127954878
    H               -1.224610474784205    -1.139391942621470    -0.021271872045122
    H               -0.461610474784205    -0.407391942621470     1.392728127954878
    H               -2.478610474784205    -2.692391942621470     1.356728127954879
    H               -1.680320474784205    -2.139631942621471     2.846078127954878
    H               -2.814990474784206    -1.055627942621470     1.954115127954879

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-128ILE-131LEU-1-dimer.npy', np.array(charges))