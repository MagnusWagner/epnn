import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.083768347296118    -1.870821018282038     0.470821111691793
    C                1.206231652703882    -2.200821018282038     1.212821111691793
    H               -0.707768347296118    -1.210821018282038     1.072821111691793
    H                0.165231652703882    -1.375821018282038    -0.467178888308207
    H               -0.643768347296118    -2.765821018282038     0.213821111691793
    H                1.798231652703882    -2.872821018282038     0.592821111691793
    H                0.991813652703882    -2.692762018282038     2.173039111691793
    H                1.798199652703882    -1.287993018282038     1.375053111691793
    C                0.031231652703882     1.639178981717962    -1.082178888308206
    C               -1.153768347296118     2.440178981717962    -0.594178888308207
    H                0.335231652703882     0.910178981717962    -0.334178888308207
    H               -0.232768347296118     1.105178981717962    -1.989178888308206
    H                0.870231652703882     2.298178981717962    -1.286178888308207
    H               -2.012768347296118     1.776178981717962    -0.660178888308207
    H               -1.008725347296118     2.715034981717962     0.461007111691793
    H               -1.352267347296118     3.309415981717962    -1.238402888308207

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-005LEU-077LEU-1-dimer.npy', np.array(charges))