import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.671370176479612    -1.639229732208970     0.361382308009413
    C                0.641370176479612    -3.061229732208969     0.902382308009413
    H               -0.345629823520388    -1.268229732208970     0.227382308009413
    H                1.200370176479612    -0.993229732208970     1.062382308009413
    H                1.192370176479612    -1.617229732208969    -0.595617691990587
    H                1.670370176479612    -3.396229732208969     1.014382308009413
    H                0.126304176479612    -3.712784732208970     0.181145308009413
    H                0.156876176479612    -3.092323732208969     1.889448308009413
    C               -0.652629823520388     1.961770267791030     0.027382308009413
    C               -0.666629823520388     2.741770267791031    -1.289617691990587
    H               -1.557629823520388     1.371770267791030     0.141382308009413
    H                0.202370176479612     1.284770267791030     0.041382308009413
    H               -0.569629823520388     2.650770267791031     0.868382308009413
    H               -0.747629823520388     2.022770267791030    -2.104617691990587
    H               -1.529057823520388     3.423610267791030    -1.325877691990587
    H                0.278540176479612     3.289650267791031    -1.417982691990587

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-024LEU-032VAL-1-dimer.npy', np.array(charges))