import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.774198521680565    -0.800070731708832    -0.273601279581046
    C               -2.132198521680565    -2.203070731708832    -0.762601279581046
    H               -0.975198521680565    -0.368070731708832    -0.875601279581046
    H               -2.649198521680565    -0.157070731708832    -0.361601279581046
    H               -1.476198521680565    -0.819070731708832     0.773398720418954
    H               -2.467198521680565    -2.126070731708832    -1.797601279581046
    H               -1.256758521680565    -2.867862731708832    -0.721899279581046
    H               -2.964058521680565    -2.615032731708832    -0.172435279581046
    C                1.321801478319435     1.484929268291168     0.090398720418954
    C                2.587801478319435     1.508929268291168     0.953398720418954
    H                0.439801478319435     1.280929268291168     0.696398720418954
    H                1.196801478319435     2.459929268291168    -0.379601279581046
    H                1.403801478319435     0.740929268291168    -0.700601279581046
    H                3.424801478319435     1.800929268291168     0.317398720418954
    H                2.802641478319435     0.519376268291168     1.383082320418954
    H                2.482591478319435     2.261615268291168     1.748631520418954

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-003VAL-081THR-1-dimer.npy', np.array(charges))