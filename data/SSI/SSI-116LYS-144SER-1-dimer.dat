import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    1 1
    --
    1 1
    C                1.286882318729430    -0.261417377942070     0.421838415634008
    C                2.266882318729430     0.243582622057930    -0.642161584365992
    N                1.364882318729430    -1.737417377942070     0.647838415634008
    H                1.497882318729430     0.266582622057930     1.356838415634008
    H                0.272882318729430     0.003582622057930     0.113838415634008
    H                3.290882318729430     0.043582622057930    -0.323161584365992
    H                2.139882318729430     1.322582622057930    -0.748161584365992
    H                2.313882318729430    -2.033417377942070     0.837838415634008
    H                0.793882318729430    -2.008417377942070     1.438838415634008
    H                1.017882318729430    -2.277417377942069    -0.144161584365992
    H                2.079612318729430    -0.242610377942070    -1.610951584365992
    C               -2.997117681270570     0.707582622057930    -0.481161584365992
    O               -1.713117681270570     1.076582622057930    -0.016161584365992
    H               -1.793117681270570     1.912582622057930     0.470838415634008
    H               -3.405117681270570     1.507582622057930    -1.098161584365992
    H               -3.666117681270570     0.574582622057930     0.371838415634008
    H               -2.946067681270570    -0.227787377942070    -1.057771584365992

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-116LYS-144SER-1-dimer.npy', np.array(charges))