import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.017233430549458     1.079556286993964     1.923602184957164
    C                0.085766569450542     0.919556286993964     3.435602184957163
    H               -1.043233430549458     1.294556286993964     1.628602184957164
    H                0.623766569450542     1.898556286993964     1.596602184957164
    H                0.331766569450542     0.165556286993964     1.448602184957164
    H                1.092766569450542     0.572556286993964     3.668602184957163
    H               -0.645583430549458     0.191776286993964     3.816992184957164
    H               -0.062833430549458     1.891636286993964     3.928532184957163
    C                0.241766569450542    -0.207443713006036    -1.646397815042836
    C               -1.176233430549458    -0.191443713006036    -2.259397815042837
    C                0.875766569450542    -1.614443713006036    -1.560397815042836
    H                0.888766569450542     0.396556286993964    -2.280397815042837
    H                0.206766569450542     0.244556286993964    -0.662397815042836
    H               -1.806233430549458    -0.891443713006036    -1.706397815042836
    H               -1.114233430549458    -0.538443713006036    -3.292397815042837
    H                0.291766569450542    -2.234443713006036    -0.877397815042836
    H                0.858766569450542    -2.072443713006036    -2.551397815042836
    H               -1.655173430549458     0.798516286993964    -2.235167815042837
    H                1.915846569450542    -1.548193713006036    -1.208477815042836

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-079VAL-087LYS-1-dimer.npy', np.array(charges))