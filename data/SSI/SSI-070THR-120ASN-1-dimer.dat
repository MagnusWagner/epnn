import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -2.127115162956045     1.925516317441468    -0.840574760747488
    O               -1.428115162956045     0.831516317441468    -1.400574760747488
    H               -0.830115162956045     1.182516317441468    -2.075574760747488
    H               -2.351115162956045     2.636516317441468    -1.633574760747488
    H               -3.076445162956045     1.604086317441468    -0.387293760747488
    H               -1.493185162956045     2.428716317441468    -0.095638760747488
    C                1.809884837043955    -0.252483682558532    -0.424574760747488
    C                0.866884837043955    -0.748483682558532     0.636425239252512
    O               -0.354115162956045    -0.641483682558532     0.530425239252512
    N                1.441884837043955    -1.331483682558532     1.679425239252512
    H                2.833884837043955    -0.394483682558532    -0.092574760747488
    H                1.644884837043955     0.818516317441468    -0.554574760747488
    H                0.854884837043955    -1.709483682558532     2.417425239252512
    H                2.452884837043955    -1.320483682558532     1.768425239252512
    H                1.670914837043955    -0.770201682558532    -1.385124760747488

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-070THR-120ASN-1-dimer.npy', np.array(charges))