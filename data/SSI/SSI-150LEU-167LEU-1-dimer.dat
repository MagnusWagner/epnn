import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.030050807485939    -1.267658873015858    -0.860514995533727
    C               -1.846050807485939    -1.690658873015857    -2.071514995533727
    H               -1.550050807485939    -1.537658873015857     0.057485004466273
    H               -0.059050807485939    -1.757658873015857    -0.883514995533727
    H               -0.873050807485939    -0.190658873015857    -0.884514995533727
    H               -1.263050807485939    -1.426658873015857    -2.952514995533726
    H               -2.812560807485939    -1.165428873015858    -2.070794995533727
    H               -2.012720807485939    -2.777958873015858    -2.070794995533727
    C                0.849949192514061     1.054341126984143     1.228485004466273
    C                2.022949192514061     1.902341126984143     1.708485004466273
    H               -0.047050807485939     1.274341126984143     1.806485004466273
    H                0.652949192514061     1.279341126984143     0.184485004466273
    H                1.086949192514061    -0.005658873015857     1.294485004466273
    H                2.940949192514061     1.546341126984142     1.242485004466273
    H                2.104829192514061     1.829801126984143     2.803035004466274
    H                1.869999192514061     2.951331126984142     1.414855004466273

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-150LEU-167LEU-1-dimer.npy', np.array(charges))