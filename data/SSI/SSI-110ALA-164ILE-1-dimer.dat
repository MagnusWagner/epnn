import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.263924780857223     0.920237315500625     2.034815115883392
    C                0.681924780857223     1.901237315500625     0.944815115883392
    H                1.054924780857223     0.849237315500625     2.780815115883392
    H               -0.651075219142777     1.275237315500625     2.511815115883392
    H                0.071924780857223    -0.063762684499375     1.614815115883392
    H               -0.075075219142777     1.880237315500625     0.161815115883392
    H                1.656024780857223     1.606217315500625     0.527565115883392
    H                0.722304780857223     2.920177315500625     1.357295115883392
    C               -0.196075219142777    -0.718762684499375    -1.349184884116608
    C               -0.739075219142777    -2.104762684499375    -1.626184884116608
    H                0.444924780857223    -0.425762684499375    -2.174184884116608
    H               -1.019075219142777    -0.006762684499375    -1.274184884116608
    H                0.378924780857223    -0.723762684499375    -0.428184884116608
    H               -1.015075219142777    -2.163762684499375    -2.681184884116608
    H               -1.659075219142777    -2.205762684499375    -1.060184884116608
    H               -0.037045219142777    -2.917112684499375    -1.386924884116608

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-110ALA-164ILE-1-dimer.npy', np.array(charges))