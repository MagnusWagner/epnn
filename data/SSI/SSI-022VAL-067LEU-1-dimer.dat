import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.425834804378442    -1.755501709689295    -0.752978913779147
    C               -1.861834804378442    -2.284501709689295    -0.698978913779147
    H               -0.379834804378442    -0.851501709689295    -1.362978913779147
    H               -0.077834804378442    -1.517501709689295     0.253021086220853
    H                0.245165195621558    -2.510501709689295    -1.160978913779147
    H               -1.829834804378442    -3.236501709689295    -0.171978913779147
    H               -2.282458804378442    -2.475171709689295    -1.697338913779147
    H               -2.512747804378442    -1.605961709689295    -0.128098913779147
    C                0.961165195621558     1.275498290310705     0.761021086220853
    C                1.328165195621558     2.776498290310705     0.687021086220853
    H                1.459165195621558     0.803498290310705     1.611021086220853
    H               -0.118834804378442     1.166498290310705     0.870021086220853
    H                1.270165195621558     0.773498290310705    -0.158978913779147
    H                0.801165195621558     3.209498290310705    -0.160978913779147
    H                2.416965195621558     2.835388290310705     0.541941086220853
    H                0.989145195621558     3.265958290310705     1.611951086220853

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-022VAL-067LEU-1-dimer.npy', np.array(charges))