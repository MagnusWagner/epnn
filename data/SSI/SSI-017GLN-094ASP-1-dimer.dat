import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                0.717790290911960    -2.335712392556282    -0.929067455961669
    C               -0.776209709088040    -2.097712392556282    -0.754067455961669
    O               -1.616209709088040    -2.939712392556283    -1.109067455961669
    N               -1.127209709088040    -0.955712392556282    -0.210067455961669
    H               -2.101209709088040    -0.775712392556282    -0.002067455961669
    H               -0.408209709088040    -0.244712392556282    -0.044067455961669
    H                0.935790290911960    -3.329712392556282    -0.540067455961669
    H                1.289790290911960    -1.613712392556282    -0.346067455961669
    H                1.014090290911960    -2.273292392556282    -1.986569455961669
    C                1.106790290911960     3.386287607443718     0.365932544038331
    C                0.707790290911960     1.993287607443718     0.770932544038331
    O                0.964790290911960     1.033287607443718     0.009932544038331
    O                0.042790290911960     1.848287607443718     1.822932544038331
    H                1.453790290911960     3.405287607443718    -0.667067455961669
    H                1.947790290911960     3.674287607443718     0.998932544038331
    H                0.279090290911960     4.093597607443717     0.522872544038331

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-017GLN-094ASP-1-dimer.npy', np.array(charges))