import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.617752231940177    -1.286881511644606    -2.183114884257184
    C               -0.242247768059823    -0.980881511644606    -0.975114884257183
    O               -1.076247768059823    -0.047881511644606    -0.949114884257183
    N               -0.014247768059823    -1.774881511644606     0.056885115742817
    H               -0.013247768059823    -1.223881511644606    -3.071114884257183
    H                1.018752231940177    -2.300881511644606    -2.134114884257183
    H               -0.582247768059823    -1.663881511644606     0.880885115742817
    H                0.650752231940177    -2.533881511644606    -0.011114884257183
    H                1.440922231940177    -0.564171511644606    -2.283574884257183
    C               -0.312247768059823     1.850118488355394     1.618885115742817
    C                1.000752231940176     2.227118488355394     2.305885115742816
    H               -0.430247768059823     2.386118488355394     0.675885115742817
    H               -0.319247768059823     0.783118488355394     1.401885115742817
    H               -1.149247768059823     2.077118488355394     2.281885115742816
    H                1.806752231940177     2.126118488355394     1.578885115742817
    H                0.981262231940176     3.256948488355394     2.691981115742816
    H                1.205622231940176     1.532918488355394     3.134207115742816

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-014GLN-093VAL-1-dimer.npy', np.array(charges))