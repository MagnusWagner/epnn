import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.009427083740186    -0.649758720835449    -2.160802844440594
    C                1.491427083740186    -0.837758720835449    -1.712802844440593
    H               -0.263572916259814    -1.399758720835449    -2.904802844440593
    H               -0.644572916259814    -0.760758720835449    -1.300802844440593
    H               -0.144572916259814     0.348241279164551    -2.572802844440594
    H                1.784427083740186    -0.035758720835449    -1.036802844440593
    H                2.119767083740186    -0.857868720835449    -2.615452844440594
    H                1.555867083740186    -1.808968720835449    -1.200352844440594
    C               -1.069572916259814     0.804241279164551     1.242197155559406
    C               -0.424572916259814     0.683241279164551     2.637197155559406
    H               -2.070572916259814     1.232241279164551     1.321197155559407
    H               -0.472572916259814     1.461241279164551     0.607197155559407
    H               -1.140572916259814    -0.178758720835449     0.782197155559407
    H               -0.443572916259814     1.661241279164551     3.117197155559406
    H               -0.984002916259814    -0.045238720835449     3.242467155559406
    H                0.624077083740186     0.384561279164551     2.491837155559407

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-045THR-066VAL-1-dimer.npy', np.array(charges))