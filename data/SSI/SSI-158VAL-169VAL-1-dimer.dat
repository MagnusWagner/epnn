import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.494557393146799     0.552528906709322    -0.408183055627271
    C               -2.711557393146799     1.440528906709322    -0.532183055627271
    H               -1.709557393146799    -0.291471093290678     0.245816944372729
    H               -1.218557393146799     0.171528906709322    -1.392183055627271
    H               -0.654557393146799     1.118528906709322    -0.012183055627271
    H               -2.508557393146799     2.190528906709322    -1.296183055627271
    H               -2.946317393146799     1.943178906709322     0.417676944372729
    H               -3.577917393146799     0.839368906709322    -0.845273055627271
    C                1.465442606853201    -0.687471093290678     0.193816944372729
    C                2.733442606853201    -1.313471093290678     0.756816944372729
    H                1.457442606853201     0.373528906709322     0.436816944372729
    H                1.451442606853201    -0.792471093290678    -0.891183055627271
    H                0.579442606853201    -1.159471093290678     0.607816944372729
    H                3.561442606853201    -0.737471093290678     0.345816944372729
    H                2.785032606853201    -1.213151093290678     1.851016944372729
    H                2.866742606853201    -2.348750093290678     0.409786944372729

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-158VAL-169VAL-1-dimer.npy', np.array(charges))