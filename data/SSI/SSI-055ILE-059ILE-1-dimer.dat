import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.016717190495743    -1.090274661282369     1.259174748784518
    C               -1.072282809504257    -1.669274661282369     2.164174748784518
    H                0.211717190495743    -0.050274661282369     1.513174748784518
    H                0.939717190495743    -1.659274661282369     1.369174748784518
    H               -0.278282809504257    -1.159274661282369     0.212174748784518
    H               -1.385282809504257    -2.631274661282370     1.752174748784518
    H               -1.938662809504257    -0.991674661282369     2.179965748784518
    H               -0.762542809504257    -1.809804661282369     3.210267748784518
    C                0.712717190495743     0.685725338717631    -2.001825251215482
    C                0.340717190495743     2.076725338717631    -1.427825251215482
    H                1.225717190495743     0.785725338717631    -2.956825251215482
    H                1.379717190495743     0.176725338717631    -1.304825251215482
    H               -0.189282809504257     0.086725338717631    -2.130825251215482
    H                1.252717190495743     2.667725338717631    -1.335825251215482
    H               -0.029282809504257     1.912725338717631    -0.417825251215482
    H               -0.400872809504257     2.637405338717631    -2.015781251215482

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-055ILE-059ILE-1-dimer.npy', np.array(charges))