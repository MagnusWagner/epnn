import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.305878704684461    -1.029193812416465     1.013601815285807
    C               -2.103878704684461    -1.650193812416465    -0.132398184714193
    H               -0.239878704684461    -1.159193812416464     0.836601815285807
    H               -1.534878704684461     0.035806187583535     1.086601815285807
    H               -1.557878704684461    -1.487193812416465     1.967601815285807
    H               -3.160878704684462    -1.588193812416465     0.116601815285807
    H               -1.827535704684461    -2.705582812416464    -0.273069184714193
    H               -1.936860704684461    -1.083627812416464    -1.060357184714193
    C                1.008121295315539     1.405806187583535    -0.740398184714193
    C                2.405121295315539     1.269806187583535    -0.146398184714193
    H                0.964121295315539     0.922806187583536    -1.718398184714193
    H                0.284121295315539     0.946806187583536    -0.074398184714193
    H                0.731121295315539     2.454806187583535    -0.849398184714193
    H                2.429121295315539     1.736806187583535     0.832601815285807
    H                3.148990295315539     1.763326187583536    -0.789123184714193
    H                2.658938295315539     0.208386187583535    -0.008673184714193

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-146VAL-161VAL-2-dimer.npy', np.array(charges))