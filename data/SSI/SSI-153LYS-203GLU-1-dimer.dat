import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                2.571826275392492    -0.876459227667864     1.545682530017297
    N                2.385826275392491    -0.083459227667864     0.302682530017297
    H                1.379826275392491     0.020540772332136     0.127682530017297
    H                2.767826275392491     0.847540772332136     0.401682530017297
    H                2.814826275392492    -0.523459227667864    -0.500317469982703
    H                2.006826275392491    -0.411459227667864     2.359682530017297
    H                3.628826275392492    -0.872459227667864     1.829682530017297
    H                2.244856275392491    -1.922196227667864     1.448102530017297
    C               -2.683173724607509     0.392540772332136     0.011682530017297
    C               -1.271173724607509     0.249540772332136    -0.519317469982703
    O               -0.358173724607509     0.178540772332136     0.326682530017297
    O               -1.055173724607509     0.169540772332136    -1.757317469982703
    H               -2.800173724607509     1.382540772332136     0.458682530017297
    H               -2.852173724607508    -0.362459227667864     0.783682530017297
    H               -3.447853724607509     0.267410772332136    -0.769097469982703

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-153LYS-203GLU-1-dimer.npy', np.array(charges))