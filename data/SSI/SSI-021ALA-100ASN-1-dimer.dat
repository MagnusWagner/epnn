import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.012770506112456    -0.086319409159406    -2.268179885717357
    C                0.050229493887544    -1.165319409159406    -2.194179885717357
    H               -1.671770506112456    -0.258319409159406    -3.123179885717357
    H               -1.608770506112456    -0.081319409159406    -1.355179885717357
    H               -0.532770506112456     0.885680590840594    -2.378179885717357
    H                0.679229493887544    -0.955319409159406    -1.334179885717357
    H                0.681619493887544    -1.135864409159406    -3.094443885717357
    H               -0.445370506112456    -2.129073409159406    -2.005618885717357
    C                0.723229493887544     1.649680590840594     0.878820114282643
    C                0.179229493887544     0.278680590840594     1.153820114282643
    O               -1.013770506112456     0.125680590840594     1.397820114282643
    N                1.036229493887544    -0.725319409159406     1.115820114282642
    H                0.482229493887544     1.897680590840594    -0.147179885717357
    H                1.812229493887544     1.628680590840594     0.953820114282643
    H                0.665229493887544    -1.653319409159406     1.262820114282643
    H                2.005229493887545    -0.575319409159406     0.879820114282643
    H                0.339839493887544     2.402075590840594     1.583741114282643

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-021ALA-100ASN-1-dimer.npy', np.array(charges))