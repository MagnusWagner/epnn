import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.035567418766355    -0.556801832912110     1.641772562522605
    C               -0.534567418766355    -1.653801832912110     2.566772562522605
    H                0.755432581233645     0.012198167087890     2.121772562522604
    H                0.374432581233644    -1.026801832912110     0.747772562522605
    H               -0.843567418766355     0.102198167087890     1.338772562522605
    H               -1.265567418766355    -2.263801832912110     2.034772562522605
    H               -0.995927418766355    -1.207512832912110     3.460067562522605
    H                0.301542581233645    -2.300179832912109     2.871926562522605
    C                0.048432581233645     1.004198167087890    -1.388227437477395
    C                0.521432581233645     1.208198167087890    -2.818227437477395
    H                0.886432581233645     0.685198167087890    -0.769227437477395
    H               -0.333567418766355     1.945198167087890    -1.002227437477395
    H               -0.745567418766355     0.257198167087890    -1.355227437477395
    H               -0.340567418766356     1.531198167087890    -3.400227437477395
    H                0.911852581233645     0.257989167087890    -3.211516437477395
    H                1.298282581233644     1.985773167087890    -2.861546437477395

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-140LEU-168LEU-1-dimer.npy', np.array(charges))