import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.974291644862418     0.932996326718549     0.433705863966138
    C                2.114291644862418     1.518996326718549     1.263705863966138
    H                1.345291644862418     0.110996326718549    -0.181294136033862
    H                0.194291644862418     0.556996326718549     1.097705863966138
    H                0.527291644862418     1.691996326718549    -0.206294136033862
    H                1.730291644862418     2.384996326718549     1.802705863966138
    H                2.939105644862418     1.845336326718549     0.613175863966138
    H                2.464477644862418     0.783096326718549     2.002505863966138
    C               -1.753708355137582    -0.646003673281451    -1.302294136033862
    C               -1.333708355137582    -1.812003673281451    -0.405294136033862
    H               -2.729708355137582    -0.839003673281451    -1.741294136033862
    H               -1.820708355137582     0.260996326718549    -0.700294136033862
    H               -1.019708355137582    -0.482003673281451    -2.091294136033862
    H               -2.011708355137582    -1.860003673281451     0.445705863966138
    H               -0.343708355137582    -1.597003673281451    -0.003294136033862
    H               -1.289098355137582    -2.784783673281451    -0.916864136033862

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-120VAL-154ILE-1-dimer.npy', np.array(charges))