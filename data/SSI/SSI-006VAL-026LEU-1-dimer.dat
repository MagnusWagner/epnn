import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.058377251367906     0.356321348420547    -1.352848237819201
    C                0.336377251367906     0.395321348420547    -2.848848237819201
    H                0.896377251367906    -0.090678651579453    -0.820848237819201
    H               -0.077622748632094     1.365321348420547    -0.978848237819201
    H               -0.845622748632094    -0.219678651579453    -1.167848237819201
    H                1.268377251367906     0.936321348420547    -3.008848237819201
    H                0.451153251367906    -0.628338651579453    -3.234783237819201
    H               -0.471495748632094     0.923574348420547    -3.376380237819201
    C               -0.945622748632094    -0.451678651579453     1.957151762180799
    C                0.549377251367906    -0.303678651579453     2.246151762180799
    H               -1.515622748632094    -0.002678651579453     2.760151762180799
    H               -1.203622748632094     0.069321348420547     1.039151762180799
    H               -1.210622748632094    -1.504678651579453     1.856151762180799
    H                1.091377251367906    -0.723678651579453     1.401151762180799
    H                0.828770251367906    -0.841634651579453     3.164051762180799
    H                0.806307251367906     0.761057348420547     2.347762762180799

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-006VAL-026LEU-1-dimer.npy', np.array(charges))