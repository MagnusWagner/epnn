import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.269772752748115    -2.062769895959458     0.704141880816360
    C                1.559772752748115    -2.017769895959457    -0.109858119183640
    H                0.040772752748115    -3.090769895959458     0.981141880816360
    H                0.384772752748115    -1.469769895959458     1.611141880816360
    H               -0.552227247251885    -1.654769895959457     0.117141880816360
    H                1.794772752748115    -0.979769895959458    -0.329858119183640
    H                1.425242752748115    -2.574009895959458    -1.049272119183640
    H                2.374712752748116    -2.454909895959458     0.485782880816360
    C               -0.991227247251885     1.286230104040542    -0.199858119183640
    C               -0.834227247251885     2.792230104040542    -0.399858119183640
    H               -0.092227247251885     0.873230104040542     0.253141880816360
    H               -1.825227247251885     1.097230104040542     0.477141880816360
    H               -1.186227247251885     0.793230104040542    -1.152858119183640
    H               -0.529227247251885     3.243230104040542     0.544141880816360
    H               -0.084264247251885     3.016140104040542    -1.172787119183640
    H               -1.799584247251885     3.225700104040542    -0.700175119183640

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-060ALA-081LEU-1-dimer.npy', np.array(charges))