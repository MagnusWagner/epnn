import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.541115657441022    -1.259266153189584    -1.392513858457993
    C               -0.755884342558978    -1.960266153189584    -0.987513858457993
    H                0.354115657441022    -0.197266153189584    -1.542513858457993
    H                1.283115657441023    -1.384266153189584    -0.604513858457993
    H                0.917115657441022    -1.695266153189584    -2.317513858457993
    H               -1.124884342558978    -1.526266153189584    -0.058513858457993
    H               -0.550884342558978    -3.018266153188584    -0.830513858457993
    H               -1.554692342558978    -1.874786153189584    -1.738913858457993
    C                0.070115657441022     2.015733846810416     0.523486141542007
    C                0.147115657441022     1.202733846810416     1.854486141542007
    H                0.165115657441022     3.083733846810416     0.735486141542007
    H                0.875115657441022     1.713733846810416    -0.146513858457993
    H               -0.883884342558978     1.836733846810416     0.025486141542007
    H                0.053115657441022     0.133733846810416     1.641486141542007
    H               -0.670926342558978     1.515833846810416     2.519906141542007
    H                1.108255657441022     1.425023846810416     2.341106141542007

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-048ILE-279ILE-1-dimer.npy', np.array(charges))