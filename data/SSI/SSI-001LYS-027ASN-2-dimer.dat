import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    1 1
    --
    1 1
    C                0.201113230697401     0.774329075655542     1.978973032960670
    N                0.300113230697401    -0.513670924344458     1.415973032960669
    H                0.624113230697401    -1.142670924344458     2.154973032960669
    H                1.014113230697401    -0.721670924344458     0.726973032960670
    H               -0.603886769302599    -0.971670924344458     1.261973032960670
    H                0.326113230697401     0.333329075655542     2.982973032960670
    H                1.098113230697401     1.208329075655542     2.416973032960669
    H               -0.758198769302599     1.176079075655542     2.337183032960669
    C                1.081113230697401     0.714329075655542    -0.550026967039331
    C               -0.186886769302599    -0.069670924344458    -0.880026967039330
    O               -1.100886769302599    -0.385670924344458    -0.124026967039330
    N               -0.351886769302599    -0.378670924344458    -2.106026967039330
    H                1.458113230697401     1.097329075655542    -1.503026967039330
    H                1.931113230697401     0.086329075655542    -0.258026967039330
    H               -1.197886769302599    -0.877670924344458    -2.350026967039331
    H                0.345113230697401    -0.177670924344458    -2.810026967039331
    H                0.912389230697401     1.613709075655543     0.060423032960670

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-001LYS-027ASN-2-dimer.npy', np.array(charges))