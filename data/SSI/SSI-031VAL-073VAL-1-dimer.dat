import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.277820230520740    -0.675770077565520     0.780025119373218
    C                2.578820230520740    -1.353770077565519     1.206025119373219
    H                1.209820230520740    -0.627770077565520    -0.305974880626782
    H                0.416820230520740    -1.225770077565520     1.151025119373218
    H                1.226820230520740     0.336229922434480     1.183025119373218
    H                2.703820230520740    -1.209770077565520     2.272025119373219
    H                3.441360230520740    -0.897850077565520     0.697935119373219
    H                2.529892230520740    -2.433786077565520     1.003115119373218
    C               -1.767179769479260     0.286229922434480    -1.162974880626781
    C               -2.091179769479260     1.742229922434480    -0.829974880626782
    H               -0.786179769479260     0.208229922434480    -1.631974880626782
    H               -1.744179769479260    -0.292770077565520    -0.240974880626781
    H               -2.519179769479260    -0.123770077565520    -1.837974880626781
    H               -1.339179769479260     2.108229922434480    -0.137974880626782
    H               -2.046995769479260     2.367929922434481    -1.733604880626781
    H               -3.072349769479260     1.803729922434480    -0.336494880626782

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-031VAL-073VAL-1-dimer.npy', np.array(charges))