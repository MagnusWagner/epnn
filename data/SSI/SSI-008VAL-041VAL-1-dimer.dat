import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.985937444308431    -0.529563140265788    -0.175861531815021
    C               -2.421937444308432    -0.217563140265788    -1.612861531815021
    H               -1.229937444308431    -1.312563140265788    -0.172861531815021
    H               -1.559937444308431     0.370436859734212     0.268138468184979
    H               -2.837937444308432    -0.835563140265788     0.433138468184979
    H               -3.039937444308431     0.678436859734212    -1.572861531815021
    H               -3.026927444308432    -1.028693140265788    -2.044193531815021
    H               -1.555157444308431     0.032856859734212    -2.242136531815021
    C                1.669062555691569    -0.168563140265788     0.980138468184979
    C                2.745062555691569     0.904436859734212     0.806138468184979
    H                1.739062555691569    -0.650563140265788     1.952138468184979
    H                0.688062555691569     0.296436859734212     0.897138468184979
    H                1.767062555691569    -0.927563140265788     0.206138468184979
    H                2.531062555691569     1.727436859734212     1.489138468184978
    H                3.738962555691569     0.494886859734212     1.039451468184979
    H                2.711201555691569     1.288436859734212    -0.224103531815021

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-008VAL-041VAL-1-dimer.npy', np.array(charges))