import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.082195204395969     0.351038139289342    -1.411112021042456
    C               -1.549195204395969     1.756038139289342    -1.041112021042456
    H               -1.720195204395969    -0.069961860710658    -2.189112021042456
    H               -0.055195204395969     0.395038139289342    -1.781112021042456
    H               -1.115195204395969    -0.290961860710658    -0.531112021042456
    H               -0.868195204395969     2.139038139289342    -0.284112021042456
    H               -2.563075204395969     1.727278139289341    -0.615422021042456
    H               -1.505085204395969     2.421278139289341    -1.916042021042456
    C                1.818804795604031    -0.794961860710658     0.713887978957544
    C                0.808804795604031    -1.316961860710659     1.734887978957544
    H                1.432804795604031    -0.884961860710658    -0.300112021042456
    H                2.021804795604031     0.259038139289341     0.907887978957544
    H                2.752804795604031    -1.354961860710659     0.790887978957544
    H               -0.103195204395969    -0.733961860710658     1.630887978957544
    H                0.576434795604031    -2.379851860710659     1.572797978957544
    H                1.191304795604031    -1.169291860710659     2.755617978957544

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-085LEU-138LEU-1-dimer.npy', np.array(charges))