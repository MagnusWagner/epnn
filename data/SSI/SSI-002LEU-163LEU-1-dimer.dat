import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.373654733492169    -1.629633434528668    -0.631446243251768
    C                0.101654733492169    -3.073633434528668    -1.042446243251768
    H                1.329654733492169    -1.547633434528668    -0.115446243251768
    H                0.393654733492169    -0.998633434528668    -1.520446243251768
    H               -0.427345266507831    -1.264633434528668     0.010553756748232
    H               -0.895345266507831    -3.152633434528669    -1.461446243251768
    H                0.181894733492169    -3.738503434528669    -0.169806243251768
    H                0.822154733492169    -3.389533434528669    -1.811266243251768
    C               -0.358345266507831     1.663366565471332     0.535553756748232
    C               -0.114345266507831     3.037366565471332     1.146553756748232
    H               -0.940345266507831     1.045366565471332     1.214553756748232
    H               -0.899345266507831     1.773366565471332    -0.402446243251768
    H                0.566654733492169     1.159366565471331     0.287553756748232
    H                0.687654733492169     3.526366565471332     0.593553756748232
    H                0.168404733492169     2.958626565471332     2.206673756748232
    H               -1.018875266507831     3.658646565471332     1.070153756748232

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-002LEU-163LEU-1-dimer.npy', np.array(charges))