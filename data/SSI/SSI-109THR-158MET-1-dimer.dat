import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.771563656885132    -1.675019817645532     1.062482225972584
    C                1.604563656885132    -2.750019817645532     1.731482225972584
    H                0.487563656885132    -1.974019817645532     0.053482225972584
    H               -0.128436343114868    -1.495019817645532     1.652482225972584
    H                1.352563656885132    -0.756019817645532     1.022482225972584
    H                1.843563656885132    -2.416019817645532     2.740482225972584
    H                2.540473656885132    -2.922009817645532     1.179682225972584
    H                1.030463656885132    -3.686019817645532     1.797072225972584
    C                0.877563656885132     1.308980182354468    -1.017517774027416
    C               -1.487436343114868     1.424980182354468     0.463482225972584
    S               -0.849436343114868     0.771980182354468    -1.086517774027416
    H                1.289563656885132     1.125980182354468    -0.028517774027416
    H                1.465563656885132     0.768980182354468    -1.758517774027416
    H                0.935563656885132     2.377980182354468    -1.227517774027416
    H               -0.891436343114868     1.048980182354468     1.296482225972584
    H               -2.504436343114868     1.047980182354468     0.576482225972584
    H               -1.504126343114868     2.524430182354468     0.493962225972584

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-109THR-158MET-1-dimer.npy', np.array(charges))