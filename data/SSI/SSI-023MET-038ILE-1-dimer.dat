import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.315276431673703    -0.939400137515990    -1.453588571384159
    C               -1.522723568326297    -1.776400137515990     0.435411428615841
    S                0.235276431673703    -1.440400137515990     0.255411428615841
    H               -0.427723568326297    -0.168400137515990    -1.657588571384159
    H                1.310276431673703    -0.555400137515990    -1.678588571384159
    H                0.107276431673703    -1.795400137515990    -2.094588571384159
    H               -1.640723568326297    -2.511400137515990     1.232411428615841
    H               -1.885723568326297    -2.222400137515990    -0.491588571384159
    H               -2.126313568326297    -0.893560137515990     0.692841428615841
    C                0.023276431673703     2.660599862484010    -0.366588571384159
    C                0.757276431673703     3.118599862484010     0.904411428615841
    H                0.118276431673703     1.584599862484010    -0.477588571384159
    H               -1.032723568326297     2.922599862484010    -0.316588571384159
    H                0.436276431673703     3.162599862484010    -1.241588571384159
    H                0.733276431673703     4.208599862484010     0.951411428615841
    H                1.802836431673703     2.777319862484010     0.922631428615841
    H                0.224076431673703     2.710479862484010     1.775691428615841

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-023MET-038ILE-1-dimer.npy', np.array(charges))