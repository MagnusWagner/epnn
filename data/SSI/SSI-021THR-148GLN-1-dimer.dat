import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.976904322167096    -1.531411289477814     2.016470053550258
    O               -1.395904322167096    -0.778411289477814     0.964470053550258
    H               -1.981904322167096    -0.033411289477814     0.781470053550258
    H               -2.965904322167096    -1.877411289477814     1.711470053550258
    H               -1.348337322167096    -2.405377289477814     2.242500053550258
    H               -2.080378322167096    -0.890306289477814     2.904320053550258
    C                0.729095677832904     0.572588710522186    -1.112529946449741
    C                2.021095677832904    -0.211411289477814    -0.882529946449742
    C                0.934095677832904     2.072588710522186    -1.235529946449742
    H                0.204095677832904     0.190588710522186    -1.989529946449741
    H                0.099095677832904     0.447588710522186    -0.254529946449742
    H                2.756095677832904     0.127588710522186    -1.614529946449741
    H               -0.036904322167096     2.565588710522186    -1.179529946449742
    H                1.532095677832904     2.436588710522186    -0.398529946449742
    H                1.833736677832904    -1.290239289477814    -0.987541946449742
    H                2.415332677832904    -0.017559289477814     0.125933053550258
    H                1.397477677832904     2.356128710522186    -2.192024946449742

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-021THR-148GLN-1-dimer.npy', np.array(charges))