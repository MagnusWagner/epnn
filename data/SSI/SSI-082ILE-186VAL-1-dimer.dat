import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.599964973403996     0.912543154237785    -1.797054092164980
    C                0.808964973403996    -0.555456845762216    -2.164054092164980
    H                0.150964973403996     0.976543154237784    -0.806054092164980
    H                1.570964973403996     1.406543154237785    -1.759054092164980
    H               -0.033035026596004     1.461543154237785    -2.478054092164980
    H                1.389964973403996    -0.985456845762215    -1.347054092164980
    H                1.401964973403996    -0.685456845762216    -3.041054092164980
    H               -0.127615026596004    -1.124016845762215    -2.261814092164979
    C               -0.111035026596004    -0.549456845762216     1.682945907835020
    C               -1.307035026596004     0.193543154237785     2.269945907835020
    H                0.209964973403996    -1.355456845762216     2.337945907835020
    H               -0.398035026596004    -0.988456845762215     0.728945907835020
    H                0.711964973403996     0.144543154237785     1.515945907835020
    H               -1.656035026596004     0.887543154237785     1.528945907835020
    H               -1.003375026596004     0.765043154237784     3.159425907835021
    H               -2.108865026596004    -0.516876845762215     2.519705907835020

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-082ILE-186VAL-1-dimer.npy', np.array(charges))