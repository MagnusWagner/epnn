import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.465064637212437     0.651049982620685    -1.367091468147190
    C               -1.012064637212437     0.953049982620685    -2.729091468147190
    H               -0.200064637212437     1.564049982620685    -0.831091468147190
    H               -1.225064637212437     0.116049982620685    -0.796091468147190
    H                0.416935362787563     0.012049982620685    -1.439091468147190
    H               -1.376064637212437     0.034049982620685    -3.185091468147190
    H               -0.192174637212437     1.386810082620684    -3.320382468147190
    H               -1.826934637212436     1.686352182620684    -2.638205468147190
    C                0.535935362787563    -0.088950017379315     1.899908531852810
    C                0.945935362787563    -1.522950017379315     2.195908531852810
    H                0.656935362787563     0.513049982620685     2.797908531852810
    H                1.161935362787563     0.310049982620685     1.106908531852810
    H               -0.500064637212436    -0.038950017379315     1.554908531852810
    H                0.961935362787563    -2.102950017379315     1.274908531852810
    H                0.116755362787563    -1.864037017379315     2.833182531852810
    H                1.949415362787563    -1.523651017379315     2.646493531852810

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-043THR-059LEU-1-dimer.npy', np.array(charges))