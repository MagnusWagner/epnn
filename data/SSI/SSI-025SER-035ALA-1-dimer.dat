import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.666988896199682     0.281985386743051    -0.602289304188210
    C               -2.171988896199682    -1.122014613256949    -0.262289304188210
    O               -1.167988896199682     0.936985386743052     0.550710695811790
    H               -0.880988896199682     0.207985386743051    -1.355289304188210
    H               -2.489988896199682     0.869985386743052    -1.014289304188210
    H               -1.317988896199682    -1.724014613256948     0.040710695811790
    H               -0.944988896199682     1.847985386743051     0.309710695811790
    H               -2.681878896199682    -1.562714613256948    -1.131659304188210
    H               -2.894588896199682    -1.058954613256949     0.564680695811790
    C                1.932011103800318     0.277985386743051     0.370710695811790
    C                3.137011103800318    -0.508014613256949    -0.091289304188210
    H                2.245011103800318     1.179985386743051     0.899710695811790
    H                1.339011103800318     0.566985386743052    -0.498289304188210
    H                1.317011103800318    -0.337014613256949     1.029710695811790
    H                2.790011103800318    -1.419014613256949    -0.576289304188210
    H                3.722471103800318    -0.779974613256949     0.799370695811790
    H                3.687811103800318     0.079125386743052    -0.840889304188210

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-025SER-035ALA-1-dimer.npy', np.array(charges))