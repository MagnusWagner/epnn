import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.188874562287623     0.757342018711675    -1.434835195854002
    C                1.512874562287623     1.521342018711675    -1.678835195854002
    H               -0.132125437712377     0.236342018711674    -2.336835195854001
    H                0.365874562287623     0.044342018711674    -0.643835195854001
    H               -0.602125437712377     1.436342018711674    -1.109835195854002
    H                1.720874562287623     2.136342018711674    -0.806835195854001
    H                1.440094562287623     2.147842018711675    -2.580055195854001
    H                2.347924562287623     0.818782018711674    -1.817055195854001
    C               -0.729125437712377    -1.636657981288326     0.958164804145999
    C               -0.976125437712377    -0.642657981288325     2.155164804145998
    H               -0.990125437712377    -2.648657981288326     1.272164804145999
    H               -1.353125437712377    -1.360657981288325     0.106164804145999
    H                0.312874562287623    -1.657657981288325     0.643164804145999
    H               -0.950125437712377     0.372342018711674     1.754164804145999
    H               -0.161570437712377    -0.740037981288325     2.887984804145998
    H               -1.956750437712377    -0.777797981288325     2.634864804145999

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-027VAL-088ILE-1-dimer.npy', np.array(charges))