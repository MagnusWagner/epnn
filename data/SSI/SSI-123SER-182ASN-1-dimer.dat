import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -2.471862616981795    -1.367861283889662    -1.819738190058116
    O               -1.533862616981795    -0.540861283889662    -1.183738190058116
    H               -1.210862616981795     0.072138716110338    -1.862738190058116
    H               -1.952862616981795    -2.124861283889662    -2.408738190058116
    H               -3.082862616981795    -0.763861283889662    -2.491738190058116
    H               -3.138122616981795    -1.857841283889662    -1.094478190058116
    C               -0.015862616981795     1.017138716110338     0.654261809941884
    C               -0.463862616981795     0.808138716110338     2.091261809941884
    C                1.267137383018205     0.301138716110338     0.318261809941884
    O                2.300137383018205     0.570138716110338     0.925261809941884
    N                1.229137383018205    -0.599861283889662    -0.642738190058116
    H               -0.790862616981795     1.151138716110338    -0.062738190058116
    H                0.314137383018205     2.057138716110338     0.658261809941884
    H                0.273137383018205     1.283138716110338     2.731261809941884
    H                2.077137383018205    -1.092861283889662    -0.874738190058116
    H                0.326137383018205    -0.908861283889662    -0.973738190058116
    H               -0.550982616981795    -0.255491283889662     2.357921809941884
    H               -1.446932616981795     1.278268716110338     2.241441809941884

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-123SER-182ASN-1-dimer.npy', np.array(charges))