import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                1.962961598974991    -0.867444642346250    -0.107069507993505
    C                0.922961598974991    -1.127444642346250    -1.164069507993505
    O               -0.220038401025009    -0.721444642346250    -0.956069507993505
    O                1.237961598974991    -1.729444642346250    -2.196069507993506
    H                1.516961598974991    -0.899444642346250     0.889930492006495
    H                2.344961598974991     0.146555357653750    -0.250069507993505
    H                2.816609598974991    -1.558804642346250    -0.164561507993505
    C               -1.160038401025009     1.773555357653750     0.993930492006495
    C               -0.819038401025009     2.098555357653750     2.446930492006495
    O               -1.770038401025009     0.498555357653750     0.890930492006495
    H               -1.831038401025009     2.536555357653750     0.595930492006495
    H               -0.242038401025009     1.775555357653750     0.407930492006495
    H               -0.372038401025009     3.088555357653750     2.453930492006495
    H               -1.261038401025009     0.011555357653750     0.203930492006495
    H               -0.102776401025009     1.370923357653750     2.856220492006495
    H               -1.730653401025009     2.161751357653750     3.059270492006495

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-073GLU-119SER-1-dimer.npy', np.array(charges))