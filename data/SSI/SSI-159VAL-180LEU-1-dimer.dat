import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -2.074499651350884    -0.641373193035982     1.533601707174788
    C               -1.129499651350883     0.110626806964019     2.444601707174789
    H               -3.106499651350884    -0.517373193035982     1.867601707174788
    H               -1.992499651350883    -0.259373193035981     0.514601707174788
    H               -1.826499651350884    -1.701373193035982     1.512601707174788
    H               -0.104499651350884    -0.099373193035981     2.144601707174789
    H               -1.276319651350884    -0.182293193035981     3.494667707174788
    H               -1.314189651350884     1.188586806964019     2.326744707174789
    C                0.704500348649117     0.216626806964019    -0.958398292825212
    C                0.481500348649117    -0.591373193035981    -2.244398292825212
    C                2.065500348649116     0.918626806964019    -0.839398292825212
    H               -0.087499651350884     0.961626806964019    -0.869398292825212
    H                0.614500348649116    -0.465373193035981    -0.111398292825212
    H                1.344500348649117    -1.233373193035981    -2.421398292825212
    H                2.199500348649116     1.571626806964019    -1.695398292825212
    H                0.355330348649117     0.084046806964019    -3.103404092825212
    H               -0.379979651350884    -1.266233193035981    -2.133005992825212
    H                2.097010348649116     1.546766806964018     0.063065707174788
    H                2.911550348649116     0.215726806964019    -0.827946292825212

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-159VAL-180LEU-1-dimer.npy', np.array(charges))