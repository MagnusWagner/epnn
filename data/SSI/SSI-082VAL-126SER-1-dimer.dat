import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.308182433465610     2.046860806974774    -0.340134676060237
    C               -2.781182433465610     1.910860806974775    -0.711134676060237
    H               -0.752182433465610     1.186860806974775    -0.692134676060237
    H               -0.903182433465610     2.941860806974775    -0.809134676060237
    H               -1.179182433465610     2.158860806974774     0.736865323939763
    H               -3.299182433465610     2.768860806974775    -0.290134676060237
    H               -3.223342433465610     0.982179806974774    -0.321204676060237
    H               -2.913762433465610     1.937521806974774    -1.802794676060236
    C                1.187817566534390    -0.745139193025226     0.374865323939763
    C                0.990817566534390    -1.606139193025226    -0.874134676060237
    O                1.730817566534390    -1.495139193025226     1.449865323939763
    H                1.846817566534390     0.094860806974774     0.148865323939763
    H                0.222817566534390    -0.352139193025226     0.690865323939763
    H                0.325817566534390    -2.428139193025225    -0.605134676060237
    H                2.681817566534390    -1.630139193025226     1.295865323939763
    H                1.955107566534390    -2.017150193025226    -1.207614676060237
    H                0.519857566534390    -1.042138193025226    -1.692724676060237

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-082VAL-126SER-1-dimer.npy', np.array(charges))