import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C               -0.481068964373503     0.268514026463841    -3.148353618268086
    C               -0.367068964373503    -0.908485973536159    -2.201353618268086
    O                0.145931035626497    -0.797485973536159    -1.091353618268086
    N               -0.854068964373503    -2.057485973536159    -2.637353618268086
    H               -1.046068964373503    -0.026485973536159    -4.034353618268086
    H                0.517931035626497     0.558514026463841    -3.476353618268087
    H               -0.689068964373504    -2.874485973536159    -2.068353618268086
    H               -1.215068964373504    -2.132485973536159    -3.577353618268087
    H               -0.985258964373503     1.135424026463841    -2.696399618268087
    C               -0.315068964373503     1.421514026463841     3.403646381731914
    C                0.428931035626497     0.856514026463841     2.210646381731914
    O                0.483931035626497    -0.386485973536159     2.068646381731914
    O                0.975931035626497     1.669514026463841     1.431646381731914
    H               -0.825068964373503     2.345514026463841     3.120646381731914
    H                0.413931035626497     1.661514026463841     4.180646381731914
    H               -1.046798964373503     0.709964026463841     3.813849381731913

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-063GLN-067ASP-1-dimer.npy', np.array(charges))