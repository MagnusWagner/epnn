import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.135091093927855    -1.403224971998849    -1.445639168294079
    C               -0.402091093927855    -2.486224971998850    -2.277639168294079
    H               -0.962091093927855    -1.572224971998849    -0.381639168294079
    H               -0.744091093927855    -0.419224971998850    -1.710639168294079
    H               -2.206091093927855    -1.424224971998849    -1.641639168294079
    H               -0.646091093927855    -2.316224971998850    -3.326639168294079
    H               -0.746822093927855    -3.490564971998850    -1.990479168294079
    H                0.691835906072145    -2.424854971998850    -2.179879168294079
    C                0.044908906072145     1.275775028001151     0.919360831705921
    C                0.281908906072145     2.332775028001150     1.937360831705921
    C                1.206908906072145     0.360775028001150     0.929360831705921
    H               -0.033091093927855     1.743775028001151    -0.063639168294079
    H               -0.873091093927855     0.732775028001150     1.132360831705921
    H               -0.183091093927855     3.267775028001150     1.647360831705921
    H               -0.100091093927855     2.005775028001151     2.906360831705921
    H                1.344908906072145    -0.143224971998850    -0.028639168294079
    H                1.094908906072145    -0.366224971998850     1.735360831705921
    H                1.378866906072145     2.400445028001150     1.983220831705921
    H                2.025173906072145     1.055165028001150     1.170730831705921

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-012VAL-114PRO-1-dimer.npy', np.array(charges))