import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.793952211264793    -1.726535492838241     0.264355832135395
    C               -0.588952211264793    -3.067535492838242    -0.415644167864606
    H               -0.776952211264793    -1.825535492838241     1.346355832135395
    H                0.011047788735207    -1.057535492838241    -0.032644167864605
    H               -1.749952211264793    -1.293535492838241    -0.035644167864605
    H                0.418047788735207    -3.414535492838242    -0.182644167864605
    H               -1.320302211264794    -3.795315492838242    -0.034254167864606
    H               -0.663302211264793    -2.952045492838242    -1.507034167864606
    C                0.696047788735207     1.633464507161759     0.120355832135394
    C                0.690047788735207     3.158464507161758     0.028355832135395
    H                1.400047788735207     1.281464507161759     0.871355832135394
    H               -0.301952211264793     1.297464507161759     0.400355832135394
    H                0.954047788735207     1.203464507161759    -0.847644167864606
    H                0.441047788735207     3.569464507161758     1.007355832135394
    H               -0.105952211264793     3.445464507161758    -0.651644167864606
    H                1.656177788735207     3.566684507161758    -0.303234167864606

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-079VAL-094ILE-1-dimer.npy', np.array(charges))