import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C               -0.708540119583934     1.967188268792824    -0.943112660949212
    C               -0.050540119583934     2.301188268792825     0.379887339050788
    C               -2.121540119583935     1.467188268792825    -0.802112660949212
    H               -0.707540119583934     2.854188268792825    -1.580112660949212
    H               -0.122540119583934     1.190188268792824    -1.439112660949212
    H               -0.276540119583934     1.512188268792824     1.096887339050788
    H               -0.459540119583934     3.231188268792824     0.769887339050788
    H               -2.103540119583934     0.562188268792824    -0.182112660949212
    H               -2.713540119583934     2.218188268792824    -0.268112660949212
    H                1.043699880416066     2.380328268792824     0.300031339050788
    H               -2.582042119583934     1.249708268792824    -1.777120660949213
    C                1.790459880416066    -1.676811731207176     1.287887339050787
    C                0.655459880416066    -1.409811731207176     0.282887339050788
    O               -0.519540119583934    -1.295811731207176     0.686887339050788
    O                0.948459880416066    -1.318811731207175    -0.934112660949212
    H                2.555459880416066    -0.908811731207176     1.162887339050788
    H                2.249459880416066    -2.637811731207175     1.049887339050787
    H                1.485300880416066    -1.696061731207176     2.344536339050788

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-049LYS-158ASP-1-dimer.npy', np.array(charges))