import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.053310056817181     2.381659183784967     0.284391799991506
    C               -0.703689943182819     1.158659183784966     0.724391799991506
    O               -1.685689943182819     0.836659183784967     0.049391799991506
    N               -0.246689943182819     0.471659183784967     1.769391799991506
    H                0.945310056817181     2.504659183784967     0.901391799991506
    H               -0.581689943182819     3.257659183784967     0.408391799991506
    H               -0.749689943182819    -0.354340816215033     2.062391799991506
    H                0.560310056817181     0.793659183784967     2.283391799991506
    H                0.350460056817181     2.270679183784967    -0.768878200008494
    C                1.044310056817181    -1.650340816215033    -1.248608200008494
    C                1.467310056817181    -3.075340816215033    -1.589608200008494
    H                1.333310056817181    -0.976340816215033    -2.054608200008494
    H               -0.038689943182819    -1.610340816215034    -1.122608200008494
    H                1.500310056817181    -1.323340816215034    -0.312608200008494
    H                1.301310056817181    -3.699340816215034    -0.710608200008494
    H                2.533910056817181    -3.097501816215033    -1.857688200008494
    H                0.864400056817181    -3.483319816215033    -2.414258200008494

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-177GLN-190VAL-1-dimer.npy', np.array(charges))