import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                1.891615613942464     1.987652010599016     0.100705465708867
    C                3.397615613942464     1.832652010599016     0.397705465708867
    H                1.306615613942464     1.569652010599015     0.918705465708867
    H                1.646615613942464     3.045652010599015     0.010705465708867
    H                1.632615613942464     1.479652010599016    -0.827294534291133
    H                3.662615613942464     2.357652010599016     1.314705465708866
    H                3.636915613942464     0.761842010599015     0.475815465708867
    H                3.954525613942464     2.249807010599015    -0.454254534291133
    C               -0.680384386057536    -0.536347989400985    -1.051294534291133
    C               -1.647384386057536    -1.381347989400985    -1.868294534291133
    C               -0.952384386057536    -0.644347989400985     0.410705465708867
    O               -2.043384386057536    -0.214347989400985     0.818705465708867
    O               -0.078384386057536    -1.134347989400985     1.154705465708866
    H                0.346615613942464    -0.844347989400985    -1.260294534291133
    H               -0.784384386057536     0.504652010599015    -1.340294534291133
    H               -2.654384386057536    -0.982347989400985    -1.744294534291134
    H               -1.628744386057536    -2.433212689400985    -1.546994534291133
    H               -1.366744386057536    -1.286103389400985    -2.927614534291134

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-168LEU-172ASP-1-dimer.npy', np.array(charges))