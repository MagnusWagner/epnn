import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -2 1
    --
    -2 1
    C               -1.731903123446093    -0.855243855207852    -0.871390900790874
    C               -0.910903123446093    -0.694243855207852    -2.138390900790874
    C               -1.946903123446093     0.472756144792148    -0.132390900790874
    O               -3.107903123446093     0.901756144792148    -0.054390900790874
    O               -0.983903123446093     1.079756144792148     0.399609099209126
    H               -2.698903123446093    -1.288243855207852    -1.128390900790874
    H               -1.254903123446093    -1.577243855207852    -0.209390900790874
    H                0.074096876553907    -0.322243855207852    -1.894390900790874
    H               -1.373943123446093     0.044369144792148    -2.809240900790874
    H               -0.781303123446093    -1.686123855207852    -2.595960900790875
    C                2.421096876553907    -0.860243855207852     1.879609099209126
    C                2.147096876553907    -0.194243855207852     0.613609099209126
    O                1.054096876553907    -0.506243855207852     0.123609099209126
    O                2.966096876553908     0.629756144792148     0.153609099209126
    H                3.465096876553908    -0.798243855207852     2.110609099209126
    H                2.235096876553908    -1.929243855207852     1.733609099209126
    H                1.727486876553907    -0.475230855207852     2.641629099209126

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-060ASP-165ASP-1-dimer.npy', np.array(charges))