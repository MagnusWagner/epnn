import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.068844285574560     1.949607029343462     1.875177394755098
    O                0.815844285574560     0.743607029343461     1.794177394755099
    H                1.554844285574560     0.865607029343461     1.138177394755098
    H               -0.995155714425439     1.713607029343462     1.819177394755098
    H                0.278494285574561     2.450467029343462     2.831827394755099
    H                0.327884285574560     2.605497029343462     1.030957394755099
    C               -0.408155714425440    -0.876392970656539    -0.756822605244902
    C               -1.511155714425440    -0.468392970656539    -1.738822605244902
    C                0.886844285574560    -1.561392970656538    -1.422822605244902
    H               -0.073155714425440     0.026607029343461    -0.272822605244901
    H               -0.831155714425440    -1.544392970656538    -0.002822605244902
    H               -2.077155714425440    -1.363392970656539    -1.998822605244902
    H               -1.029155714425440    -0.100392970656539    -2.645822605244901
    H                1.338844285574560    -2.169392970656538    -0.631822605244902
    H                0.533844285574561    -2.270392970656538    -2.177822605244902
    H               -2.192715714425440     0.318837029343461    -1.384214605244902
    H                1.690234285574560    -0.944502970656539    -1.851777605244902

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-189THR-199LYS-1-dimer.npy', np.array(charges))