import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.748951409605808    -1.300950927593643    -1.111293194721824
    C                1.633951409605808    -2.242950927593642    -1.918293194721824
    H                0.254951409605808    -0.591950927593643    -1.776293194721824
    H               -0.008048590394192    -1.880950927593643    -0.585293194721824
    H                1.325951409605808    -0.757950927593643    -0.367293194721824
    H                2.165951409605808    -2.895950927593642    -1.225293194721824
    H                2.361941409605808    -1.680641927593643    -2.521484494721824
    H                1.017371409605808    -2.881270927593643    -2.568201994721824
    C               -0.881048590394192     1.521049072406357     0.863706805278176
    C               -1.498048590394192     2.035049072406357     2.161706805278176
    H               -0.121048590394192     2.209049072406357     0.497706805278176
    H               -0.412048590394192     0.554049072406357     1.049706805278176
    H               -1.639048590394192     1.379049072406357     0.093706805278176
    H               -2.236048590394192     1.302049072406357     2.487706805278176
    H               -2.020638590394192     2.991713072406358     2.014418805278176
    H               -0.734598590394192     2.107588072406357     2.950297805278176

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-006LEU-126VAL-1-dimer.npy', np.array(charges))