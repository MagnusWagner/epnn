import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.067227014427705     1.595584169943592     2.259504561743332
    C               -0.347227014427705     1.035584169943592     1.061504561743332
    O               -1.020227014427705     0.521584169943592     0.156504561743332
    O                0.885772985572295     1.063584169943592     1.017504561743332
    H               -1.485227014427705     0.771584169943592     2.842504561743332
    H               -1.900227014427705     2.206584169943592     1.909504561743332
    H               -0.430197014427705     2.208804169943592     2.913844561743332
    C                0.125772985572295    -1.620415830056408    -1.803495438256668
    C                0.654772985572295    -2.350415830056408    -0.591495438256668
    N                0.670772985572295    -0.241415830056408    -1.895495438256668
    H                0.390772985572295    -2.190415830056408    -2.701495438256668
    H               -0.967227014427705    -1.575415830056408    -1.737495438256668
    H                0.465772985572295    -1.749415830056408     0.299504561743332
    H                1.734772985572295    -2.481415830056408    -0.691495438256668
    H                1.682772985572295    -0.229415830056408    -1.881495438256668
    H                0.352772985572295     0.229584169943592    -2.733495438256668
    H                0.329772985572295     0.293584169943592    -1.091495438256668
    H                0.188002985572295    -3.336375830056408    -0.450025438256668

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-014GLU-036LYS-1-dimer.npy', np.array(charges))