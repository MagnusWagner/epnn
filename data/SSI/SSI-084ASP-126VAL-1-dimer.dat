import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                1.173461771050637     0.477747989419087    -0.941460415489180
    C                1.933461771050637     0.660747989419087     0.370539584510820
    C               -0.147538228949363     1.247747989419087    -0.961460415489180
    O               -0.909538228949363     1.208747989419087     0.034539584510820
    O               -0.421538228949363     1.915747989419087    -1.980460415489180
    H                1.802461771050637     0.798747989419087    -1.774460415489180
    H                0.961461771050637    -0.584252010580913    -1.068460415489180
    H                1.279461771050637     0.359747989419087     1.189539584510820
    H                2.243551771050637     1.705237989419087     0.521805584510820
    H                2.832661771050637     0.027167989419087     0.374893584510820
    C               -0.535538228949363    -2.241252010580913     1.111539584510820
    C               -1.030538228949363    -3.145252010580913     2.235539584510820
    H                0.393461771050637    -1.768252010580913     1.420539584510820
    H               -0.327538228949363    -2.840252010580913     0.226539584510820
    H               -1.258538228949364    -1.461252010580913     0.869539584510820
    H               -0.238538228949363    -3.851252010580913     2.485539584510820
    H               -1.911818228949364    -3.713476010580913     1.903182584510820
    H               -1.241368228949363    -2.536602010580913     3.127219584510820

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-084ASP-126VAL-1-dimer.npy', np.array(charges))