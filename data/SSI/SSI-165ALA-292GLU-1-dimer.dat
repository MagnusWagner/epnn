import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                0.853438334186587    -2.581359981899703     1.180463569740910
    C                0.983438334186587    -3.750359981899703     0.227463569740910
    H                0.814438334186587    -2.931359981899703     2.212463569740910
    H                1.713438334186587    -1.919359981899704     1.067463569740910
    H               -0.059561665813413    -2.025359981899704     0.959463569740910
    H                1.014438334186587    -3.372359981899704    -0.796536430259090
    H                0.122508334186587    -4.424489981899704     0.347225569740910
    H                1.905208334186587    -4.320339981899703     0.415797569740910
    C                0.446438334186587     0.680640018100296    -0.606536430259090
    C                1.407438334186587     1.787640018100296    -1.013536430259090
    C               -0.887561665813413     1.195640018100296    -0.089536430259090
    O               -1.118561665813413     2.448640018100297    -0.093536430259090
    O               -1.716561665813413     0.351640018100296     0.349463569740910
    H                0.273438334186587     0.045640018100296    -1.478536430259090
    H                0.908438334186587     0.047640018100296     0.146463569740910
    H                1.319438334186587     2.635640018100296    -0.336536430259090
    H                1.147438334186587     2.120640018100297    -2.019536430259091
    H                2.459118334186587     1.466270018100296    -0.987403430259090

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-165ALA-292GLU-1-dimer.npy', np.array(charges))