import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.847986292947604     1.699119743779050     0.478456563531129
    C                0.674986292947603     2.343119743779049    -0.895543436468871
    H                1.487986292947604     2.324119743779050     1.103456563531129
    H               -0.125013707052397     1.603119743779049     0.959456563531129
    H                1.305986292947604     0.716119743779049     0.395456563531129
    H                0.010986292947603     1.718119743779049    -1.494543436468871
    H                1.652286292947603     2.434559743779049    -1.392053436468871
    H                0.206746292947603     3.332259743779049    -0.784433436468871
    C               -0.404013707052396    -1.377880256220950     0.017456563531129
    C               -1.115013707052396    -2.663880256220951     0.399456563531129
    H                0.671986292947603    -1.491880256220950     0.161456563531129
    H               -0.599013707052397    -1.146880256220951    -1.030543436468871
    H               -0.781013707052396    -0.556880256220950     0.620456563531129
    H               -2.191013707052397    -2.508880256220951     0.330456563531129
    H               -0.849113707052397    -2.957020256220951     1.425796563531129
    H               -0.837783707052396    -3.472460256220951    -0.292893436468871

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-096VAL-105LEU-1-dimer.npy', np.array(charges))