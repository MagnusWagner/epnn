import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.766664583251963    -0.931005366667969    -1.216542033464828
    C                0.593664583251963    -0.287005366667968    -2.590542033464828
    H                1.406664583251963    -0.306005366667968    -0.591542033464828
    H               -0.206335416748037    -1.027005366667968    -0.735542033464828
    H                1.224664583251963    -1.914005366667968    -1.299542033464828
    H               -0.070335416748037    -0.912005366667969    -3.189542033464829
    H                1.570964583251963    -0.195565366667969    -3.087052033464829
    H                0.125424583251963     0.702134633332032    -2.479432033464828
    C               -0.398335416748037     1.244994633332031     1.588457966535171
    C               -0.963335416748037    -0.027005366667969     2.216457966535172
    H               -0.486335416748037     2.078994633332031     2.286457966535172
    H                0.654664583251963     1.097994633332032     1.345457966535172
    H               -0.926335416748037     1.483994633332032     0.665457966535172
    H               -0.991335416748037    -0.819005366667968     1.467457966535171
    H               -1.977995416748037     0.152014633332031     2.601697966535172
    H               -0.307735416748037    -0.341285366667968     3.041937966535171

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-096VAL-108THR-1-dimer.npy', np.array(charges))