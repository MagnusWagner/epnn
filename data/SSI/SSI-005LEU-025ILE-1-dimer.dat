import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.766195871628310    -0.002299680966683    -1.806842697228499
    C               -1.722195871628309    -1.142299680966683    -2.155842697228500
    H                0.149804128371690    -0.402299680966683    -1.373842697228499
    H               -0.516195871628309     0.547700319033317    -2.712842697228500
    H               -1.231195871628310     0.685700319033317    -1.101842697228499
    H               -2.639195871628309    -0.715299680966683    -2.558842697228500
    H               -1.957383271628309    -1.758229680966683    -1.275323697228499
    H               -1.287633371628309    -1.782589680966683    -2.937621697228499
    C                0.991804128371690    -0.017299680966683     1.572157302771501
    C                1.488804128371690     1.159700319033317     2.400157302771500
    H               -0.032195871628310     0.148700319033317     1.242157302771501
    H                1.622804128371691    -0.119299680966683     0.690157302771501
    H                1.048804128371690    -0.941299680966683     2.143157302771500
    H                1.456804128371690     2.060700319033317     1.787157302771501
    H                2.537804128371691     0.980700319033317     2.643157302771500
    H                0.940456128371690     1.321696319033317     3.339876302771501

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-005LEU-025ILE-1-dimer.npy', np.array(charges))