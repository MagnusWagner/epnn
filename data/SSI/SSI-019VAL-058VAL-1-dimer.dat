import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.112125445863766    -1.143420286779733    -0.571937044681483
    C               -2.339125445863766    -2.030420286779733    -0.563937044681483
    H               -1.176125445863766    -0.476420286779733     0.286062955318517
    H               -0.213125445863766    -1.754420286779733    -0.487937044681483
    H               -1.042125445863766    -0.567420286779733    -1.494937044681483
    H               -2.355125445863766    -2.604420286779733    -1.489937044681483
    H               -3.244215445863766    -1.408171286779733    -0.503789044681483
    H               -2.298505445863765    -2.735893686779733     0.279067955318517
    C                1.052874554136234     1.628579713220267     0.919062955318517
    C                2.397874554136234     1.549579713220267     0.222062955318517
    H                0.539874554136234     2.562579713220267     0.686062955318517
    H                0.439874554136234     0.805579713220267     0.583062955318517
    H                1.196874554136234     1.544579713220267     1.988062955318517
    H                2.221874554136234     1.605579713220267    -0.851937044681483
    H                3.042694554136234     2.388712713220267     0.522163955318517
    H                2.894004554136234     0.588290713220267     0.421520955318517

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-019VAL-058VAL-1-dimer.npy', np.array(charges))