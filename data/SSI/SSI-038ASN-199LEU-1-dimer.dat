import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.133527678713904     2.219180767408031     1.479034752795971
    C               -0.095527678713904     1.298180767408032     0.905034752795970
    O               -0.420527678713904     0.341180767408032     0.204034752795970
    N                1.164472321286096     1.628180767408032     1.121034752795971
    H               -1.323527678713904     3.011180767408032     0.756034752795970
    H               -0.743527678713903     2.655180767408031     2.397034752795971
    H                1.901472321286096     1.039180767408032     0.761034752795970
    H                1.386472321286096     2.460180767408032     1.645034752795971
    H               -2.056127678713904     1.699680767408032     1.777224752795971
    C               -0.460527678713904    -2.345819232591968    -1.613965247204029
    C                0.861472321286096    -3.072819232591968    -2.044965247204029
    H               -0.582527678713904    -1.410819232591968    -2.163965247204030
    H               -1.321527678713903    -2.980819232591968    -1.811965247204030
    H               -0.427527678713904    -2.119819232591968    -0.557965247204029
    H                0.814472321286096    -3.310819232591968    -3.111965247204030
    H                1.739182321286096    -2.437579232591968    -1.854965247204029
    H                0.967832321286097    -4.004669232591969    -1.470215247204030

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-038ASN-199LEU-1-dimer.npy', np.array(charges))