import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.415778700193992     0.511446623702789    -0.898342773399358
    C               -2.222778700193992    -0.330553376297211    -1.937342773399358
    H               -0.648778700193992     1.105446623702789    -1.393342773399358
    H               -2.098778700193992     1.181446623702789    -0.379342773399358
    H               -0.967778700193992    -0.165553376297211    -0.172342773399358
    H               -2.658778700193992     0.383446623702789    -2.634342773399358
    H               -3.035778700193992    -0.816553376297211    -1.396342773399358
    H               -1.644709700193992    -1.092783376297211    -2.480332773399358
    C                1.457221299806008     0.565446623702789     1.365657226600643
    C                2.192221299806008    -0.750553376297211     1.470657226600642
    H                2.160221299806008     1.387446623702789     1.484657226600642
    H                0.986221299806008     0.660446623702789     0.392657226600642
    H                0.694221299806008     0.620446623702789     2.143657226600642
    H                1.454221299806008    -1.551553376297211     1.475657226600642
    H                2.811677699806008    -0.797653376297211     2.378432226600642
    H                2.818432099806008    -0.864413376297211     0.573497226600642

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-021ILE-077LEU-1-dimer.npy', np.array(charges))