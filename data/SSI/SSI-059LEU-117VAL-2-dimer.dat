import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.591399354863542     1.007833870489787    -1.703054910126744
    C               -0.158600645136458     2.309833870489787    -1.411054910126744
    H                0.038399354863542     0.385833870489787    -2.404054910126744
    H                1.558399354863542     1.245833870489787    -2.142054910126743
    H                0.773399354863542     0.465833870489787    -0.779054910126744
    H               -0.286600645136458     2.843833870489787    -2.352054910126743
    H               -1.147592645136458     2.138553870489787    -0.960994910126744
    H                0.448352354863542     2.949693870489787    -0.753644910126744
    C               -0.550600645136458    -1.034166129510213     1.272945089873256
    C                0.110399354863542    -2.289166129510213     1.845945089873257
    H               -1.592600645136458    -0.985166129510213     1.595945089873257
    H               -0.028600645136458    -0.147166129510213     1.635945089873256
    H               -0.523600645136458    -1.045166129510213     0.184945089873257
    H                1.156399354863542    -2.297166129510213     1.579945089873256
    H               -0.342042645136458    -3.184656129510213     1.394945089873256
    H                0.034229354863542    -2.302816129510213     2.943215089873257

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-059LEU-117VAL-2-dimer.npy', np.array(charges))