import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.070406234716146    -1.166036895842284    -1.388556825811476
    C               -0.676406234716146    -0.455036895842284    -2.682556825811477
    H               -1.830406234716146    -1.925036895842284    -1.567556825811476
    H               -0.193406234716146    -1.644036895842284    -0.956556825811476
    H               -1.458406234716146    -0.441036895842284    -0.674556825811476
    H                0.103593765283854     0.272963104157716    -2.458556825811477
    H               -1.540376234716146     0.072393104157716    -3.113107825811476
    H               -0.288686234716146    -1.191016895842284    -3.402282825811477
    C                0.486593765283854     0.192963104157716     1.793443174188524
    C                1.254593765283854     1.427963104157716     2.269443174188523
    H                0.510593765283854     0.137963104157716     0.705443174188524
    H                0.953593765283854    -0.702036895842284     2.205443174188523
    H               -0.542406234716146     0.223963104157716     2.150443174188523
    H                1.121593765283854     1.507963104157716     3.343443174188523
    H                0.900973765283854     2.359893104157716     1.804196374188523
    H                2.330313765283854     1.329783104157716     2.061609974188523

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-026THR-031LEU-1-dimer.npy', np.array(charges))