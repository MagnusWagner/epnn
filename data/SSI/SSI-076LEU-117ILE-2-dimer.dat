import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.854865141887182     0.835529957993839    -1.547180702899855
    C                1.579865141887183    -0.248470042006161    -2.317180702899856
    H                1.035865141887182     0.721529957993839    -0.481180702899856
    H                1.242865141887182     1.808529957993839    -1.853180702899855
    H               -0.213134858112818     0.831529957993839    -1.753180702899856
    H                1.464865141887183    -0.050470042006161    -3.381180702899856
    H                1.176795141887182    -1.244322042006161    -2.080925702899856
    H                2.657065141887182    -0.188505042006161    -2.102607702899855
    C               -0.999134858112818    -0.348470042006161     1.204819297100145
    C               -1.449134858112818    -0.242470042006161     2.659819297100144
    H               -1.351134858112818     0.504529957993839     0.627819297100144
    H                0.089865141887182    -0.370470042006161     1.184819297100145
    H               -1.373134858112818    -1.273470042006161     0.763819297100144
    H               -1.190134858112817     0.729529957993839     3.069819297100144
    H               -0.857134858112818    -0.986470042006161     3.191819297100144
    H               -2.521434858112818    -0.435742042006161     2.810859297100144

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-076LEU-117ILE-2-dimer.npy', np.array(charges))