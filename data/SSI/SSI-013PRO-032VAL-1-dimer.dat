import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.543694786227496    -0.767490527371627     0.903101330495426
    C               -1.273694786227496    -1.578490527371627    -0.169898669504574
    C               -0.898694786227496    -1.466490527371627     2.200101330495427
    H               -0.838694786227496     0.279509472628373     0.891101330495426
    H                0.533305213772504    -0.852490527371627     0.744101330495426
    H               -2.323694786227496    -1.294490527371627    -0.192898669504574
    H               -0.821694786227496    -1.440490527371627    -1.151898669504574
    H               -0.073694786227496    -1.339490527371627     2.904101330495426
    H               -1.169014786227496    -2.614340527371628     0.185141330495426
    H               -0.982234786227496    -2.517900527371627     1.887761330495426
    H               -1.813124786227496    -1.064230527371627     2.660551330495426
    C                1.331305213772504     1.299509472628373    -0.959898669504574
    C                1.343305213772504     2.472509472628373    -1.918898669504574
    H                2.325305213772504     1.142509472628373    -0.532898669504574
    H                0.641305213772504     1.519509472628373    -0.147898669504574
    H                1.002305213772504     0.391509472628373    -1.467898669504574
    H                0.379305213772504     2.530509472628372    -2.419898669504573
    H                2.140385213772504     2.344479472628373    -2.666068669504574
    H                1.494065213772504     3.397069472628373    -1.342298669504574

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-013PRO-032VAL-1-dimer.npy', np.array(charges))