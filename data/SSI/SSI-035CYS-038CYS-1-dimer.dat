import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.164815620398435     0.902546779744594     1.654310720684144
    C               -0.293184379601565     2.341546779744594     1.929310720684144
    S                1.584815620398434     0.730546779744594     0.536310720684144
    H                0.439815620398435     0.448546779744594     2.610310720684144
    H               -0.673184379601566     0.328546779744594     1.267310720684144
    H                0.530815620398435     2.838546779744594     2.442310720684144
    H                2.087815620398434    -0.397453220255406     1.078310720684144
    H               -1.168344379601566     2.304706779744594     2.594700720684144
    H               -0.528794379601566     2.871836779744593     0.994810720684144
    C               -1.597184379601565    -0.751453220255406    -1.138689279315856
    C               -1.258184379601565    -0.149453220255406    -2.498689279315856
    S               -0.261184379601565    -1.802453220255406    -0.521689279315856
    H               -1.830184379601565     0.043546779744594    -0.430689279315856
    H               -2.492184379601566    -1.368453220255406    -1.248689279315856
    H               -0.985184379601565    -0.958453220255406    -3.180689279315856
    H                0.729815620398435    -0.909453220255406    -0.624689279315856
    H               -0.422394379601565     0.560926779744594    -2.416089279315856
    H               -2.151794379601566     0.342206779744594    -2.910679279315856

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-035CYS-038CYS-1-dimer.npy', np.array(charges))