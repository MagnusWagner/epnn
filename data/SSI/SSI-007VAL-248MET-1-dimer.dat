import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.723388811968475     1.502059176753904    -2.079806593865725
    C                0.970388811968475     2.933059176753903    -1.603806593865725
    H                1.548388811968475     0.837059176753903    -1.834806593865725
    H               -0.189611188031525     1.122059176753903    -1.620806593865725
    H                0.595388811968475     1.466059176753904    -3.156806593865725
    H                0.810388811968475     2.950059176753903    -0.527806593865725
    H                2.003402811968475     3.244899176753903    -1.817436593865725
    H                0.251503811968475     3.620219176753903    -2.073926593865725
    C                0.999388811968475    -0.557940823246097     0.782193406134275
    C               -1.187611188031525    -1.906940823246096     1.880193406134275
    S               -0.729611188031525    -0.909940823246097     0.444193406134275
    H                1.589388811968475    -1.466940823246097     0.670193406134275
    H                1.379388811968475     0.208059176753903     0.118193406134275
    H                1.066388811968475    -0.189940823246097     1.799193406134275
    H               -0.377611188031525    -2.605940823246096     2.082193406134275
    H               -2.090611188031525    -2.467940823246097     1.643193406134275
    H               -1.366732188031525    -1.310112823246097     2.786673406134275

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-007VAL-248MET-1-dimer.npy', np.array(charges))