import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    1 1
    --
    1 1
    C                1.725602778098021     0.675194313057221    -1.998340196388826
    O                1.162602778098021    -0.168805686942779    -1.015340196388826
    H                0.787602778098021    -0.897805686942779    -1.559340196388826
    H                0.929602778098021     1.105194313057221    -2.609340196388826
    H                2.367602778098021     0.079194313057221    -2.647340196388826
    H                2.327692778098021     1.480134313057221    -1.551630196388826
    C               -0.542397221901979    -0.004805686942779     1.397659803611174
    C               -1.586397221901979     1.045194313057221     1.023659803611174
    N               -0.839397221901979    -1.338805686942779     0.797659803611174
    H                0.441602778098021     0.342194313057221     1.069659803611174
    H               -0.510397221901979    -0.095805686942779     2.488659803611174
    H               -1.391397221901979     1.973194313057221     1.549659803611174
    H               -2.566397221901979     0.700194313057221     1.361659803611174
    H               -1.009397221901979    -1.301805686942779    -0.211340196388826
    H               -0.072397221901979    -1.982805686942779     0.952659803611174
    H               -1.664397221901979    -1.751805686942779     1.215659803611174
    H               -1.627457221901979     1.203674313057221    -0.064090196388826

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-102SER-165LYS-1-dimer.npy', np.array(charges))