import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.531167479328594     0.720610120191530    -0.922378836914131
    C               -2.695167479328594     0.771610120191530     0.057621163085869
    H               -1.847167479328594     1.074610120191530    -1.905378836914131
    H               -0.718167479328594     1.355610120191530    -0.567378836914131
    H               -1.140167479328594    -0.292389879808470    -1.006378836914131
    H               -2.325167479328594     0.417610120191530     1.009621163085869
    H               -3.463087479328594     0.072978120191530    -0.305978836914131
    H               -3.091217479328594     1.789405120191530     0.188931163085869
    C                1.603832520671406    -1.076389879808470    -0.045378836914131
    C                2.619832520671406    -0.414389879808470     0.902621163085869
    H                1.790832520671406    -2.144389879808470    -0.139378836914131
    H                0.604832520671406    -0.956389879808470     0.376621163085869
    H                1.626832520671406    -0.608389879808470    -1.030378836914130
    H                2.472832520671406    -0.825389879808470     1.900621163085869
    H                3.668152520671406    -0.571850879808470     0.608981163085869
    H                2.453282520671406     0.671435120191530     0.959581163085869

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-012ILE-046VAL-1-dimer.npy', np.array(charges))