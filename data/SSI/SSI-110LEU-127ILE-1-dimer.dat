import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.731661196478927     0.547396811910616    -1.829334767248570
    C               -1.986661196478927    -0.337603188089384    -2.025334767248570
    H               -0.651661196478927     0.872396811910616    -0.793334767248570
    H                0.160338803521073    -0.019603188089384    -2.096334767248570
    H               -0.795661196478927     1.423396811910616    -2.476334767248570
    H               -1.813661196478927    -1.295603188089384    -1.537334767248570
    H               -2.872071196478927     0.142051811910616    -1.582631767248570
    H               -2.148161196478927    -0.532245188089384    -3.095864767248570
    C                1.011338803521073    -0.408603188089384     1.329665232751430
    C                1.696338803521073     0.199396811910616     2.529665232751430
    H                0.004338803521073    -0.010603188089384     1.222665232751430
    H                1.580338803521073    -0.168603188089384     0.431665232751430
    H                0.965338803521073    -1.493603188089384     1.424665232751430
    H                1.828338803521073     1.267396811910616     2.353665232751430
    H                2.693338803521073    -0.234603188089384     2.607665232751430
    H                1.175928803521073     0.042629811910616     3.486012532751430

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-110LEU-127ILE-1-dimer.npy', np.array(charges))