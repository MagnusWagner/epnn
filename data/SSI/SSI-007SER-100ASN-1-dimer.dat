import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.041185955872277     2.151359590869744     2.398946939482233
    O                0.228814044127723     1.812359590869744     1.053946939482233
    H                0.487814044127723     2.623359590869744     0.592946939482233
    H               -0.624185955872277     1.354359590869744     2.861946939482233
    H               -0.625185955872277     3.072359590869744     2.438946939482233
    H                0.901144044127723     2.285769590869744     2.950256939482233
    C                0.597814044127723    -0.105640409130256    -1.759053060517767
    C               -0.111185955872277    -1.148640409130256    -0.932053060517767
    O               -0.553185955872277    -2.167640409130255    -1.454053060517767
    N               -0.149185955872277    -0.951640409130256     0.369946939482233
    H               -0.731185955872277    -1.562640409130256     0.931946939482233
    H                0.189814044127723    -0.069640409130256     0.748946939482233
    H                1.665814044127723    -0.156640409130256    -1.546053060517767
    H                0.230814044127723     0.874359590869744    -1.454053060517767
    H                0.422214044127723    -0.241660409130256    -2.836394060517767

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-007SER-100ASN-1-dimer.npy', np.array(charges))