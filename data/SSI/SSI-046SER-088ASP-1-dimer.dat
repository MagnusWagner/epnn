import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                1.802313630809211     0.462627451431312    -0.667419928835342
    C                2.632313630809211    -0.504372548568688    -1.528419928835342
    O                1.870313630809211     1.794627451431312    -1.135419928835341
    H                0.763313630809211     0.135627451431312    -0.673419928835342
    H                2.171313630809211     0.421627451431312     0.358580071164658
    H                2.507313630809211    -1.501372548568688    -1.102419928835342
    H                1.490313630809211     2.367627451431312    -0.457419928835342
    H                3.703193630809211    -0.253322548568688    -1.514930928835342
    H                2.251933630809211    -0.539472548568688    -2.559961928835341
    C               -2.273686369190790     0.663627451431312     1.402580071164659
    C               -1.592686369190789    -0.560372548568688     0.833580071164658
    O               -0.940686369190789    -1.326372548568688     1.591580071164658
    O               -1.706686369190789    -0.739372548568688    -0.400419928835342
    H               -3.319686369190789     0.686627451431312     1.087580071164658
    H               -1.776686369190789     1.547627451431312     0.996580071164658
    H               -2.224626369190789     0.705477451431312     2.500688071164659

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-046SER-088ASP-1-dimer.npy', np.array(charges))