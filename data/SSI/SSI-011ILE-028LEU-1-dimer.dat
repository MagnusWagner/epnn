import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.727559475135726     1.329933023021716    -1.121705459060950
    C                0.008559475135726     2.430933023021716    -1.902705459060950
    H                1.407559475135726     0.781933023021716    -1.775705459060950
    H                1.295559475135726     1.755933023021716    -0.294705459060950
    H                0.005559475135726     0.642933023021716    -0.688705459060950
    H               -0.719440524864274     2.892933023021716    -1.235705459060950
    H               -0.520300524864274     1.995323023021716    -2.763255459060950
    H                0.698009475135726     3.205853023021716    -2.268975459060950
    C               -0.678440524864274    -1.542066976978284     0.913294540939049
    C               -0.055440524864274    -2.217066976978284     2.116294540939050
    H               -0.928440524864274    -0.508066976978284     1.155294540939050
    H                0.035559475135726    -1.546066976978284     0.088294540939050
    H               -1.573440524864274    -2.077066976978284     0.596294540939050
    H                0.923559475135726    -1.786066976978284     2.319294540939050
    H               -0.706850524864274    -2.110606976978284     2.996254540939050
    H                0.056019475135726    -3.267656976978284     1.809964540939050

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-011ILE-028LEU-1-dimer.npy', np.array(charges))