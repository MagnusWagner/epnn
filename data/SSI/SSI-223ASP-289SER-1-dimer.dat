import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                0.324757100944585     3.005250596067950    -0.563663315185392
    C                0.225757100944585     1.502250596067950    -0.325663315185392
    O                0.143757100944585     0.734250596067950    -1.306663315185392
    O                0.265757100944585     1.080250596067950     0.847336684814608
    H                1.371757100944585     3.256250596067950    -0.417663315185392
    H               -0.275242899055415     3.555250596067951     0.162336684814608
    H                0.025187100944585     3.292604596067950    -1.582333315185392
    C               -0.844242899055415    -1.999749403932050     0.623336684814608
    C                0.336757100944585    -2.517749403932049     1.440336684814608
    O               -0.429242899055415    -1.653749403932050    -0.676663315185392
    H               -1.605242899055414    -2.778749403932049     0.571336684814608
    H               -1.275242899055415    -1.123749403932050     1.109336684814608
    H               -0.024242899055415    -2.739749403932049     2.446336684814608
    H               -0.240242899055415    -0.683749403932050    -0.746663315185392
    H                1.124782100944586    -1.753079403932050     1.505879884814608
    H                0.699265100944585    -3.457236403932050     0.997672684814608

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-223ASP-289SER-1-dimer.npy', np.array(charges))