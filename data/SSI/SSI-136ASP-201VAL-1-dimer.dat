import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C               -1.192634941964535    -0.907511900586168     0.378439118874588
    C               -0.122634941964534    -2.016511900586168     0.368439118874588
    C               -0.795634941964534     0.264488099413832     1.243439118874589
    O                0.216365058035466     0.901488099413832     0.918439118874589
    O               -1.448634941964535     0.525488099413832     2.284439118874589
    H               -1.365634941964534    -0.548511900586168    -0.637560881125412
    H               -2.112634941964535    -1.324511900586168     0.762439118874588
    H                0.864365058035466    -1.561511900586168     0.283439118874588
    H               -0.275980941964534    -2.694225900586168    -0.484310881125412
    H               -0.166055941964534    -2.549872900586168     1.329499118874589
    C                1.250365058035465    -0.077511900586168    -2.457560881125412
    C                1.958365058035465     1.265488099413832    -2.625560881125411
    H                0.920365058035466    -0.188511900586168    -1.430560881125412
    H                0.369365058035466    -0.118511900586168    -3.099560881125412
    H                1.921365058035465    -0.896511900586168    -2.717560881125411
    H                1.269365058035466     2.063488099413832    -2.350560881125412
    H                2.843665058035465     1.306566099413832    -1.973980881125412
    H                2.217216058035465     1.386575099413832    -3.687790881125412

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-136ASP-201VAL-1-dimer.npy', np.array(charges))