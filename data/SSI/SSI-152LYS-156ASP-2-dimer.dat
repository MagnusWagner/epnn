import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.625252274215443    -0.048890336962197     2.928463630746295
    N               -0.911252274215443    -1.025890336962197     1.819463630746295
    H               -0.459252274215443    -0.722890336962197     0.954463630746295
    H               -0.564252274215443    -1.949890336962197     2.043463630746295
    H               -1.902252274215443    -1.102890336962197     1.632463630746295
    H                0.439747725784557    -0.093890336962197     3.175463630746295
    H               -1.175252274215443    -0.351890336962197     3.826463630746295
    H               -0.868523274215443     1.003149663037803     2.718624630746295
    C                0.799747725784557     1.002109663037803    -2.490536369253705
    C                0.409747725784557     0.270109663037803    -1.193536369253705
    O               -0.730252274215443    -0.253890336962197    -1.154536369253705
    O                1.207747725784557     0.217109663037803    -0.241536369253705
    H               -0.039252274215443     1.608109663037803    -2.838536369253704
    H                1.002747725784557     0.246109663037803    -3.251536369253705
    H                1.692864725784557     1.635929663037803    -2.387539369253705

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-152LYS-156ASP-2-dimer.npy', np.array(charges))