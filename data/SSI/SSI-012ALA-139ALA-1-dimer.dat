import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.569220156060813    -1.389802825732726    -0.390204950657589
    C                2.248220156060813    -1.781802825732726     0.924795049342411
    H                2.047220156060813    -1.882802825732726    -1.230204950657589
    H                0.511220156060814    -1.646802825732726    -0.376204950657589
    H                1.653220156060814    -0.309802825732726    -0.509204950657589
    H                1.632220156060813    -1.443802825732726     1.758795049342411
    H                3.241510156060813    -1.311860825732726     0.975146049342411
    H                2.398540156060813    -2.870000825732726     0.981614049342411
    C               -1.422779843939187     0.992197174267274    -0.288204950657589
    C               -2.397779843939187     2.174197174267274    -0.245204950657589
    H               -1.693779843939186     0.312197174267274    -1.098204950657589
    H               -0.406779843939187     1.357197174267274    -0.448204950657589
    H               -1.458779843939187     0.452197174267274     0.658795049342411
    H               -2.101779843939187     2.840197174267274     0.565795049342411
    H               -3.431259843939187     1.824467174267274    -0.105160950657589
    H               -2.354409843939187     2.740867174267274    -1.187011950657589

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-012ALA-139ALA-1-dimer.npy', np.array(charges))