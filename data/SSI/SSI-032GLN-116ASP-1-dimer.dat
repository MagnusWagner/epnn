import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C               -0.317028443076530     2.179622669685934     1.508474304139834
    C                1.093971556923470     1.658622669685933     1.634474304139834
    O                1.951971556923470     2.294622669685933     2.242474304139835
    N                1.350971556923470     0.491622669685933     1.077474304139834
    H                2.287971556923470     0.128622669685933     1.148474304139834
    H                0.675971556923470     0.046622669685933     0.455474304139834
    H               -0.918028443076530     1.453622669685933     0.968474304139834
    H               -0.327028443076530     3.096622669685933     0.930474304139834
    H               -0.769991443076530     2.356332669685933     2.495184304139834
    C               -2.256028443076530    -1.877377330314066    -0.922525695860166
    C               -0.949028443076530    -1.619377330314067    -1.635525695860166
    O               -0.129028443076530    -0.786377330314067    -1.171525695860166
    O               -0.753028443076530    -2.273377330314067    -2.686525695860166
    H               -2.404028443076530    -2.952377330314067    -0.796525695860166
    H               -3.063028443076530    -1.499377330314066    -1.554525695860166
    H               -2.321897443076530    -1.383717330314067     0.058274304139834

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-032GLN-116ASP-1-dimer.npy', np.array(charges))