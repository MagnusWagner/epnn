import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.769237978182732     0.966579616443653    -1.320572690087539
    C                1.157237978182732    -0.207420383556347    -2.204572690087539
    H                1.037237978182732     1.908579616443653    -1.799572690087539
    H               -0.305762021817267     0.967579616442653    -1.153572690087539
    H                1.271237978182733     0.890579616443653    -0.354572690087539
    H                0.760237978182732    -0.028420383557347    -3.201572690087539
    H                2.249837978182732    -0.318340383556347    -2.267233690087539
    H                0.705617978182732    -1.136020383557347    -1.825446690087539
    C               -0.371762021817267    -0.872420383557347     1.772427309912461
    C               -1.553762021817268     0.109579616443653     1.756427309912461
    H               -0.349762021817268    -1.448420383556347     0.858427309912461
    H                0.567237978182732    -0.328420383556347     1.869427309912461
    H               -0.476762021817268    -1.570420383556347     2.599427309912461
    H               -1.419762021817267     0.762579616443653     0.900427309912461
    H               -2.528442021817267    -0.393160383557347     1.671205309912461
    H               -1.522252021817267     0.737719616443653     2.658891309912461

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-004LEU-180LEU-2-dimer.npy', np.array(charges))