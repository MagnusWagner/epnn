import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.840645272334784    -1.523139525215795    -0.019492036738342
    C                0.769645272334784    -3.040139525215795    -0.045492036738342
    H                1.590645272334784    -1.163139525215795    -0.728492036738342
    H               -0.132354727665216    -1.128139525215795    -0.309492036738342
    H                1.077645272334784    -1.153139525215795     0.977507963261658
    H                0.072645272334784    -3.379139525215795     0.721507963261658
    H                1.764125272334784    -3.467169525215795     0.151100263261658
    H                0.399805272334784    -3.372489525215794    -1.026694036738342
    C               -0.751354727665216     1.553860474784205    -0.185492036738342
    C               -0.851354727665216     3.005860474784205     0.256507963261658
    H               -0.508354727665216     0.926860474784205     0.671507963261658
    H               -1.706354727665216     1.231860474784205    -0.602492036738342
    H                0.016645272334784     1.447860474784205    -0.947492036738342
    H               -1.208354727665216     3.582860474784205    -0.596492036738342
    H                0.130855272334784     3.404440474784205     0.550458263261658
    H               -1.587214727665216     3.111700474784206     1.067251563261658

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-030VAL-033VAL-1-dimer.npy', np.array(charges))