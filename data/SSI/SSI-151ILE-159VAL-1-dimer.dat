import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.664120107927293     1.086876619822384     0.938792156138929
    C               -0.666120107927293     2.353876619822384     1.761792156138929
    H               -1.334120107927293     1.160876619822384     0.086792156138929
    H                0.342879892072707     0.920876619822384     0.563792156138929
    H               -0.926120107927293     0.218876619822384     1.540792156138929
    H               -0.413120107927293     3.198876619822384     1.121792156138929
    H                0.118879892072707     2.277876619822384     2.514792156138929
    H               -1.626340107927293     2.534546619822384     2.267092156138929
    C               -0.007120107927293    -1.383123380177616    -1.197207843861071
    C                1.326879892072707    -2.057123380177616    -1.505207843861071
    H               -0.808120107927293    -1.828123380177616    -1.787207843861071
    H               -0.241120107927293    -1.504123380177616    -0.139207843861071
    H                0.057879892072707    -0.323123380177616    -1.439207843861071
    H                2.086879892072707    -1.631123380177616    -0.849207843861071
    H                1.619689892072707    -1.895573380177616    -2.553107843861071
    H                1.247519892072707    -3.135893380177616    -1.305307843861071

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-151ILE-159VAL-1-dimer.npy', np.array(charges))