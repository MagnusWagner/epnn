import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.525076555999590    -0.330036040529577    -1.091210040372711
    C               -2.842076555999590    -0.626036040529577    -1.811210040372711
    H               -0.809076555999590     0.080963959470423    -1.801210040372711
    H               -1.688076555999590     0.391963959470423    -0.291210040372711
    H               -1.094076555999590    -1.241036040529577    -0.678210040372711
    H               -2.644076555999590    -1.377036040529577    -2.575210040372710
    H               -3.585586555999590    -1.020466040529576    -1.102960040372711
    H               -3.236116555999590     0.258948959470423    -2.332300040372711
    C                1.755923444000410     0.318963959470423     0.846789959627289
    C                2.611923444000410     0.636963959470423     2.059789959627289
    H                1.506923444000410     1.243963959470423     0.328789959627289
    H                2.297923444000410    -0.331036040529577     0.161789959627289
    H                0.828923444000410    -0.161036040529577     1.156789959627289
    H                2.039923444000410     1.267963959470424     2.731789959627290
    H                2.856202444000410    -0.294034040529577     2.592299959627290
    H                3.518852444000410     1.182555959470423     1.760109959627289

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-023LEU-097LEU-1-dimer.npy', np.array(charges))