import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.890934258317385    -1.689844715215340    -0.789706907099266
    C                0.309065741682615    -2.388844715215341    -1.383706907099266
    H               -0.800934258317385    -1.628844715215340     0.294293092900734
    H               -0.951934258317385    -0.681844715215341    -1.194706907099266
    H               -1.805934258317385    -2.224844715215341    -1.044706907099266
    H                1.217065741682615    -1.883844715215341    -1.048706907099266
    H                0.251065741682615    -2.262844715215341    -2.464706907099266
    H                0.368645741682615    -3.459137615215341    -1.136876907099266
    C               -0.124934258317385     1.756155284784660     0.519293092900734
    C                0.707065741682615     2.319155284784659     1.657293092900734
    H                0.122065741682615     0.708155284784660     0.362293092900734
    H               -1.184934258317385     1.824155284784660     0.765293092900734
    H                0.065065741682615     2.310155284784659    -0.398706907099266
    H                0.541065741682615     1.695155284784660     2.536293092900734
    H                1.773665741682615     2.296994284784659     1.389213092900734
    H                0.401965741682615     3.346977284784659     1.903253092900734

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-090ILE-190VAL-1-dimer.npy', np.array(charges))