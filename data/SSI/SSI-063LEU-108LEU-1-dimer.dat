import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.107678670755380    -1.766622999726595    -0.361390302420614
    C               -0.104678670755380    -2.842622999726595     0.114609697579386
    H               -2.014678670755381    -2.245622999726595    -0.734390302420614
    H               -1.375678670755381    -1.113622999726595     0.471609697579386
    H               -0.662678670755380    -1.169622999726595    -1.157390302420614
    H               -0.615678670755380    -3.401622999726595     0.895609697579386
    H                0.184821329244620    -3.524512999726594    -0.698540302420614
    H                0.803751329244620    -2.389132999726595     0.537819697579386
    C                0.445321329244620     1.551377000273405     0.116609697579386
    C                0.768321329244620     3.062377000273405     0.124609697579386
    H               -0.514678670755380     1.385377000273405    -0.372390302420614
    H                1.222321329244620     1.011377000273405    -0.424390302420614
    H                0.397321329244620     1.171377000273405     1.139609697579386
    H                1.723321329244620     3.210377000273405     0.626609697579386
    H               -0.025538670755380     3.575177000273405     0.687519697579386
    H                0.862091329244620     3.436777000273405    -0.905460302420614

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-063LEU-108LEU-1-dimer.npy', np.array(charges))