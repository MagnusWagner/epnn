import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.244489291347509    -2.012459898620527    -0.568242338717166
    C               -2.210489291347509    -2.579459898620528     0.437757661282834
    H               -0.337489291347509    -1.684459898620527    -0.066242338717166
    H               -0.972489291347509    -2.784459898620527    -1.284242338717166
    H               -1.698489291347508    -1.184459898620527    -1.115242338717165
    H               -3.111489291347509    -2.882459898620527    -0.095242338717166
    H               -2.472359291347508    -1.859309898620527     1.226937661282834
    H               -1.754179291347508    -3.469529898620528     0.895527661282834
    C                1.059510708652492     0.950540101379473    -0.076242338717166
    C                0.505510708652491     2.066540101379473    -0.945242338717166
    O                1.712510708652492     1.450540101379473     1.082757661282834
    H                0.235510708652491     0.323540101379473     0.253757661282834
    H                1.760510708652491     0.344540101379473    -0.652242338717166
    H                1.343510708652492     2.653540101379473    -1.321242338717166
    H                2.512510708652491     1.961540101379473     0.836757661282834
    H               -0.167229291347509     2.692730101379473    -0.340832338717166
    H               -0.013709291347509     1.619010101379473    -1.805542338717166

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-052VAL-057SER-1-dimer.npy', np.array(charges))