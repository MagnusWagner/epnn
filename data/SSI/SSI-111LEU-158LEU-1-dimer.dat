import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.231977420706558    -0.972285889592040    -1.575606919679986
    C               -0.036022579293442    -1.051285889592040    -3.102606919679986
    H                1.258977420706558    -0.656285889592040    -1.398606919679986
    H               -0.443022579293442    -0.239285889592040    -1.133606919679986
    H                0.062977420706558    -1.945285889592040    -1.111606919679986
    H                0.092977420706558    -0.062285889592040    -3.536606919679986
    H                0.684797420706558    -1.754205889592040    -3.545691119679986
    H               -1.066552579293442    -1.388225889592040    -3.288312529679986
    C               -0.365022579293442     1.094714110407960     1.628393080320014
    C                0.166977420706558     0.928714110407960     3.054393080320014
    H               -1.101022579293442     1.898714110407960     1.586393080320014
    H                0.451977420706558     1.324714110407960     0.945393080320014
    H               -0.835022579293442     0.164714110407960     1.306393080320014
    H                0.928977420706558     0.149714110407960     3.057393080320014
    H               -0.651752579293442     0.630014110407960     3.725562080320014
    H                0.641577420706558     1.879414110407960     3.338855080320014

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-111LEU-158LEU-1-dimer.npy', np.array(charges))