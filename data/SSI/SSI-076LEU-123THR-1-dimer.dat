import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.533386408245128     1.470004536277488    -0.939459574130473
    C               -1.198386408245127     2.277004536277488    -2.058459574130473
    H               -0.864386408245128     0.433004536277487    -0.981459574130473
    H                0.545613591754872     1.501004536277488    -1.063459574130473
    H               -0.792386408245128     1.893004536277487     0.032540425869527
    H               -0.946386408245128     1.836004536277487    -3.014459574130473
    H               -2.289426408245127     2.230974536277488    -1.926129574130473
    H               -0.859036408245128     3.323094536277487    -2.035449574130473
    C                0.828613591754872    -1.540995463722513     0.809540425869527
    C                0.904613591754872    -2.208995463722513     2.185540425869527
    H               -0.010386408245128    -1.927995463722513     0.230540425869527
    H                0.681613591754872    -0.469995463722513     0.947540425869527
    H                1.759613591754872    -1.695995463722513     0.264540425869527
    H                1.514613591754872    -1.589995463722512     2.843540425869527
    H                1.346943591754872    -3.213825463722513     2.117270425869527
    H               -0.103706408245128    -2.283775463722513     2.618780425869527

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-076LEU-123THR-1-dimer.npy', np.array(charges))