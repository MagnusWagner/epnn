import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.544783767631438     1.415968603363489    -0.366325460434616
    C               -0.224783767631437     1.872968603363489     1.060674539565384
    C               -1.874783767631438     1.953968603363489    -0.885325460434616
    H                0.260216232368563     1.767968603363489    -1.013325460434616
    H               -0.563783767631438     0.328968603363489    -0.410325460434616
    H                0.809216232368563     1.563968603363489     1.228674539565384
    H               -2.694783767631438     1.419968603363490    -0.412325460434616
    H               -1.974783767631437     3.007968603363489    -0.636325460434616
    H               -0.847713767631437     1.343738603363489     1.796794539565384
    H               -0.223343767631437     2.967668603363490     1.168564539565384
    H               -1.997953767631438     1.879778603363489    -1.975885460434616
    C                1.010216232368562    -1.874031396636511    -0.002325460434616
    C                1.591216232368563    -3.274031396636510     0.165674539565384
    H                0.513216232368563    -1.776031396636511    -0.965325460434616
    H                0.272216232368563    -1.693031396636511     0.777674539565384
    H                1.801216232368563    -1.127031396636511     0.077674539565384
    H                0.781216232368563    -3.996031396636511     0.095674539565384
    H                2.002216232368562    -3.323031396636511     1.172674539565384
    H                2.373876232368563    -3.494151396636510    -0.575265460434616

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-025GLN-260ILE-1-dimer.npy', np.array(charges))