import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.508311990761336    -1.626445151210307     1.207850670058684
    C               -1.003688009238664    -1.425445151210307     1.463850670058684
    H                0.660311990761336    -2.136445151210307     0.257850670058684
    H                0.997311990761336    -0.655445151210307     1.169850670058684
    H                0.963311990761336    -2.208445151210307     2.008850670058684
    H               -1.408688009238664    -0.815445151210307     0.656850670058684
    H               -1.535918009238664    -2.387585151210308     1.495830670058684
    H               -1.172398009238664    -0.849985151210307     2.386010670058684
    C                0.602311990761336     0.862554848789693    -1.452149329941316
    C               -0.104688009238664     2.186554848789693    -1.215149329941316
    H                1.315311990761336     0.661554848789693    -0.656149329941316
    H               -0.124688009238664     0.052554848789693    -1.488149329941316
    H                1.137311990761336     0.894554848789693    -2.401149329941316
    H               -0.724688009238664     2.115554848789693    -0.321149329941316
    H               -0.757688009238664     2.360554848789693    -2.068149329941316
    H                0.623741990761336     3.001684848789693    -1.092919329941316

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-019VAL-027ILE-1-dimer.npy', np.array(charges))