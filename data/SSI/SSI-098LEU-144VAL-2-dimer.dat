import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.054863637948705    -0.877221118956342     0.541008796631030
    C                2.438863637948705    -0.672221118956342     1.134008796631030
    C                0.415863637948705    -2.269221118956342     0.608008796631030
    H                0.382863637948705    -0.196221118956342     1.065008796631030
    H                1.077863637948705    -0.563221118956342    -0.504991203368970
    H                2.421863637948706    -1.066221118956342     2.151008796631030
    H                0.982863637948705    -2.964221118956342    -0.010991203368970
    H                2.649733637948705     0.406958881043658     1.164128796631030
    H                3.219603637948705    -1.206531118956342     0.572798796631030
    H                0.382473637948705    -2.650261118956342     1.639358796631030
    H               -0.616586362051295    -2.210101118956342     0.233098796631030
    C               -1.410136362051295     1.308778881043658    -1.023991203368970
    C               -2.414136362051295     2.445778881043658    -1.218991203368970
    H               -0.962136362051295     1.375778881043658    -0.032991203368970
    H               -1.929136362051295     0.355778881043658    -1.119991203368970
    H               -0.630136362051295     1.341778881043658    -1.784991203368970
    H               -2.797136362051295     2.375778881043658    -2.236991203368970
    H               -1.932726362051295     3.425148881043659    -1.080831203368970
    H               -3.265276362051295     2.338848881043658    -0.530421203368970

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-098LEU-144VAL-2-dimer.npy', np.array(charges))