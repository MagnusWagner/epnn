import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.592286621762587    -0.873986636515740    -1.590595305327745
    C                1.215286621762587     0.407013363484260    -2.113595305327745
    H                1.091286621762587    -1.169986636515741    -0.668595305327745
    H               -0.474713378237413    -0.737986636515740    -1.423595305327745
    H                0.726286621762587    -1.665986636515741    -2.329595305327745
    H                0.818286621762587     0.586013363484260    -3.110595305327746
    H                2.307886621762587     0.296093363484260    -2.176256305327746
    H                0.934486621762587     1.256643363484260    -1.473841305327745
    C               -0.313713378237414    -0.257986636515740     1.863404694672254
    C               -1.495713378237413     0.724013363484260     1.847404694672254
    H               -0.291713378237414    -0.833986636515740     0.949404694672255
    H                0.625286621762586     0.286013363484260     1.960404694672254
    H               -0.418713378237413    -0.955986636515740     2.690404694672254
    H               -1.361713378237413     1.377013363484260     0.991404694672255
    H               -2.470393378237413     0.221273363484260     1.762182694672255
    H               -1.464203378237414     1.352153363484260     2.749868694672255

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-004LEU-180LEU-1-dimer.npy', np.array(charges))