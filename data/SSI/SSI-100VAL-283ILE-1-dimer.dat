import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.411076083542993    -0.278666084475940    -1.504932168177068
    C                0.698076083542993     0.358333915524060    -2.715932168177068
    H                1.520076083542993     0.462333915524060    -0.710932168177069
    H                0.829076083542993    -1.122666084475940    -1.130932168177068
    H                2.398076083542993    -0.632666084475940    -1.802932168177068
    H                0.586076083542993    -0.388666084475940    -3.502932168177069
    H                1.301543083542993     1.201533915524060    -3.083232168177068
    H               -0.295351916457007     0.679923915524060    -2.369982168177069
    C               -0.688923916457007    -0.478666084475940     1.568067831822932
    C               -1.421923916457007     0.397333915524060     2.645067831822931
    H               -1.038923916457007    -0.219666084475940     0.570067831822932
    H                0.388076083542993    -0.301666084475940     1.614067831822932
    H               -0.882923916457007    -1.537666084475940     1.750067831822932
    H               -1.217923916457007     1.452333915524060     2.461067831822932
    H               -1.051923916457007     0.144333915524060     3.631067831822932
    H               -2.515685916457007     0.282353915524060     2.666627831822932

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-100VAL-283ILE-1-dimer.npy', np.array(charges))