import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.909078381147717    -0.154782356223587     0.717871661868872
    C                1.892078381147717    -1.587782356223588     1.257871661868872
    H                2.897078381147717     0.298217643776413     0.786871661868872
    H                1.630078381147717    -0.166782356223588    -0.337128338131128
    H                1.180078381147717     0.447217643776413     1.255871661868872
    H                2.673078381147717    -2.147782356223587     0.745871661868872
    H                2.109978381147717    -1.593442356223588     2.336058661868872
    H                0.933848381147717    -2.084320356223587     1.045172661868872
    C               -1.713921618852283     0.615217643776413    -0.285128338131128
    C               -2.088921618852282     1.131217643776413    -1.682128338131128
    H               -2.584921618852283     0.633217643776413     0.361871661868872
    H               -1.373921618852283    -0.417782356223587    -0.365128338131128
    H               -0.919921618852283     1.225217643776413     0.146871661868872
    H               -2.947921618852283     0.571217643776413    -2.050128338131128
    H               -2.323051618852283     2.205337643776413    -1.643947338131128
    H               -1.254321618852283     0.983597643776413    -2.383306338131128

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-136VAL-169LEU-1-dimer.npy', np.array(charges))