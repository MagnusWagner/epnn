import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                2.736848397382613     0.579199753169104    -1.439119851385123
    C                1.415848397382613     0.744199753169104    -0.702119851385123
    O                0.859848397382613    -0.272800246830896    -0.237119851385123
    O                0.930848397382612     1.897199753169104    -0.605119851385123
    H                3.321848397382613     1.501199753169104    -1.390119851385123
    H                2.492848397382613     0.380199753169104    -2.480119851385123
    H                3.344886397382612    -0.250920246830896    -1.050289851385123
    C               -1.897151602617388    -1.520800246830896     1.046880148614877
    C               -2.163151602617388    -0.474800246830896     2.127880148614877
    O               -1.736151602617387    -0.874800246830896    -0.202119851385123
    H               -0.985151602617387    -2.072800246830896     1.281880148614877
    H               -2.737151602617387    -2.216800246830896     0.997880148614877
    H               -1.337151602617388     0.235199753169104     2.109880148614877
    H               -0.786151602617387    -0.600800246830896    -0.219119851385123
    H               -2.197262602617387    -0.953110246830896     3.117860148614877
    H               -3.082500602617387     0.084929753169104     1.900940148614877

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-029GLU-055SER-1-dimer.npy', np.array(charges))