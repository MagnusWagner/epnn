import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.688931178229602    -0.523726602744795    -0.047890341240528
    C               -3.029931178229602    -1.281726602744795    -0.145890341240528
    H               -0.907931178229602    -1.052726602744795    -0.597890341240528
    H               -1.796931178229602     0.473273397255205    -0.469890341240528
    H               -1.380931178229602    -0.408726602744795     0.992109658759472
    H               -3.720931178229602    -0.820726602744795     0.562109658759472
    H               -2.859471178229602    -2.324476602744795     0.160086658759472
    H               -3.491071178229602    -1.151096602744795    -1.135984341240528
    C                2.031068821770398     0.328273397255205    -0.303890341240528
    C                2.686068821770399     1.466273397255205     0.496109658759472
    H                1.121068821770398     0.002273397255205     0.201109658759472
    H                1.779068821770398     0.675273397255205    -1.306890341240528
    H                2.712068821770398    -0.518726602744795    -0.399890341240528
    H                3.625068821770398     1.714273397255206     0.002109658759472
    H                2.892668821770398     1.179323397255206     1.537731658759472
    H                2.047858821770398     2.361923397255206     0.473879658759472

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-040ILE-054VAL-1-dimer.npy', np.array(charges))