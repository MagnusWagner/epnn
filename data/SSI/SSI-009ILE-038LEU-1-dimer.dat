import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.375882105338379    -1.649745181653097    -1.315172861290886
    C               -0.352882105338379    -3.053745181653097    -1.915172861290886
    H               -1.402882105338379    -1.358745181653097    -1.082172861290886
    H                0.186117894661621    -1.615745181653097    -0.388172861290886
    H                0.052117894661621    -0.922745181653097    -2.006172861290886
    H                0.665117894661621    -3.283745181653097    -2.233172861290886
    H               -1.014822105338379    -3.099545181653097    -2.792512861290886
    H               -0.637362105338379    -3.809745181653097    -1.168492861290886
    C                0.369117894661621     1.114254818346903     0.857827138709114
    C               -0.417882105338379     1.210254818346903     2.165827138709114
    C                0.803117894661621     2.455254818346903     0.268827138709114
    H                1.253117894661621     0.496254818346903     1.017827138709114
    H               -0.264882105338379     0.621254818346903     0.121827138709114
    H               -1.321882105338379     1.796254818346903     1.997827138709114
    H                1.445117894661621     2.978254818346903     0.975827138709114
    H                0.191107894661621     1.708924818346903     2.934239138709114
    H               -0.758432105338379     0.209574818346903     2.470226138709114
    H                1.381747894661621     2.291274818346903    -0.652202861290886
    H               -0.078872105338379     3.080294818346903     0.065287138709114

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-009ILE-038LEU-1-dimer.npy', np.array(charges))