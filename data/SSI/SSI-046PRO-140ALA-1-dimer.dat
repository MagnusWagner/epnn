import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.601596673200960    -0.730154584489238    -0.979371196948406
    C               -0.009596673200960    -1.985154584489238    -0.497371196948406
    C               -0.510596673200960    -0.755154584489238    -2.490371196948406
    H               -0.094596673200960     0.138845415510762    -0.567371196948406
    H               -1.651596673200959    -0.716154584489238    -0.689371196948406
    H                1.003403326799041    -1.774154584489238    -0.150371196948406
    H               -0.579596673200959    -2.398154584489239     0.332628803051594
    H               -1.491596673200959    -0.535154584489238    -2.915371196948406
    H                0.057015326799040    -2.700868584489239    -1.330031196948406
    H               -0.230814673200960    -1.791022584489238    -2.732651196948406
    H                0.200742326799040     0.003078115510762    -2.849651196948406
    C                0.711403326799041     0.977845415510762     1.895628803051594
    C                0.367403326799040     2.447845415510761     2.001628803051594
    H               -0.175596673200960     0.403845415510762     1.630628803051594
    H                1.489403326799040     0.829845415510762     1.145628803051594
    H                1.079403326799041     0.608845415510762     2.850628803051594
    H                1.219403326799041     2.977845415510762     2.416628803051594
    H               -0.491187673200960     2.588932415510762     2.674618803051594
    H                0.177410326799040     2.897375415510762     1.015818803051594

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-046PRO-140ALA-1-dimer.npy', np.array(charges))