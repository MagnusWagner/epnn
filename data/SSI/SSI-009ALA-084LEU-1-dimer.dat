import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.345464163593622    -0.221327118524733     0.792554206687692
    C                2.430464163593621    -1.026327118524733     1.512554206687692
    H                1.241464163593622    -0.579327118524733    -0.233445793312308
    H                0.391464163593622    -0.320327118524733     1.312554206687692
    H                1.618464163593622     0.832672881475267     0.759554206687692
    H                2.452464163593622    -0.745327118524733     2.567554206687692
    H                3.378624163593622    -0.771141118524733     1.016694206687692
    H                2.213214163593622    -2.103131118524733     1.455154206687692
    C               -1.396535836406378     1.198672881475267    -1.189445793312308
    C               -2.378535836406378     0.040672881475267    -1.108445793312308
    H               -0.575535836406378     1.041672881475267    -0.498445793312308
    H               -1.003535836406378     1.275672881475267    -2.204445793312308
    H               -1.873535836406378     2.136672881475267    -0.929445793312308
    H               -3.155535836406378     0.221672881475267    -1.848445793312308
    H               -2.834155836406378     0.003825881475267    -0.107915793312308
    H               -1.863595836406378    -0.894009118524733    -1.375295793312308

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-009ALA-084LEU-1-dimer.npy', np.array(charges))