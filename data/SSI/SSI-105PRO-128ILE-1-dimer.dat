import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.145402166435798    -0.708556878261053     0.334553943232391
    C               -2.444402166435799    -0.027556878261053     0.788553943232391
    C               -1.571402166435798    -1.922556878261052    -0.461446056767609
    H               -0.539402166435799    -0.979556878261053     1.201553943232391
    H               -0.617402166435799    -0.031556878261053    -0.327446056767609
    H               -2.315402166435799     0.486443121738947     1.741553943232391
    H               -2.766402166435799     0.680443121738947     0.027553943232391
    H               -1.449402166435799    -1.770556878261053    -1.533446056767609
    H               -3.177292166435799    -0.844079878261053     0.867051943232391
    H               -2.626292166435799    -2.068293878261052    -0.185830056767609
    H               -1.026212166435799    -2.806981878261053    -0.100122056767609
    C                1.856597833564202     1.166443121738947    -0.625446056767609
    C                3.238597833564202     1.439443121738948    -0.017446056767609
    H                1.268597833564202     0.657443121738947     0.127553943232391
    H                1.371597833564201     2.109443121738948    -0.873446056767609
    H                1.942597833564201     0.558443121738947    -1.522446056767609
    H                3.115597833564201     2.078443121738947     0.858553943232391
    H                3.787597833564202     2.013443121738947    -0.761446056767609
    H                3.817797833564201     0.545419121738947     0.256872943232391

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-105PRO-128ILE-1-dimer.npy', np.array(charges))