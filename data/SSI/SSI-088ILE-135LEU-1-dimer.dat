import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.552256864550736     0.878433702006601     0.793024370899895
    C                1.305256864550737     1.872433702006601     1.990024370899895
    H                1.291256864550737    -0.133566297993399     1.107024370899895
    H                0.928256864550737     1.154433702006600    -0.058975629100105
    H                2.594256864550737     0.857433702006601     0.478024370899895
    H                1.331256864550737     2.887433702006601     1.589024370899895
    H                2.119811864550737     1.775053702006601     2.722844370899895
    H                0.324631864550737     1.737293702006601     2.469724370899895
    C               -0.708743135449263    -1.203566297993399    -1.225975629100105
    C               -2.152743135449263    -1.548566297993399    -1.555975629100106
    H               -0.286743135449263    -0.588566297993399    -2.019975629100106
    H               -0.655743135449263    -0.665566297993399    -0.290975629100105
    H               -0.119743135449263    -2.115566297993399    -1.125975629100106
    H               -2.693743135449263    -0.628566297993399    -1.774975629100106
    H               -2.176956135449263    -2.223686297993399    -2.424095629100105
    H               -2.609242135449263    -2.041066297993399    -0.684735629100106

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-088ILE-135LEU-1-dimer.npy', np.array(charges))