import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.562045827310302     0.655091454249502    -1.936603665824220
    C                0.814954172689698     1.315091454249502    -1.598603665824220
    H               -0.663045827310302     0.542091454249502    -3.017603665824220
    H               -0.628045827310302    -0.329908545750498    -1.471603665824220
    H               -1.378045827310302     1.269091454249502    -1.553603665824220
    H                0.822954172689698     1.616091454249502    -0.550603665824220
    H                0.979969972689698     2.189671454249502    -2.245034665824221
    H                1.613373172689698     0.580581454249502    -1.780307665824220
    C               -0.685045827310302    -0.464908545750498     1.750396334175780
    C                0.439954172689698    -1.503908545750498     1.788396334175780
    H               -0.584045827310302     0.216091454249502     2.593396334175779
    H               -0.631045827310302     0.113091454249502     0.831396334175780
    H               -1.658045827310302    -0.952908545750498     1.792396334175780
    H                0.302954172689698    -2.187908545750498     0.950396334175780
    H                0.310009302689698    -2.055448545750498     2.731218334175780
    H                1.419942172689699    -1.016798545750498     1.677263334175780

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-039THR-079LEU-1-dimer.npy', np.array(charges))