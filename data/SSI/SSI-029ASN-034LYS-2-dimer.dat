import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    1 1
    --
    1 1
    C                0.203289818832452     0.657949868156276     1.972679929157761
    C               -0.004710181167548    -0.638050131843724     1.224679929157761
    O               -0.566710181167548    -0.658050131843724     0.124679929157761
    N                0.434289818832452    -1.732050131843724     1.818679929157761
    H                1.248289818832452     0.949949868156276     1.879679929157761
    H               -0.005710181167548     0.498949868156276     3.030679929157761
    H                0.205289818832452    -2.618050131843724     1.400679929157761
    H                0.877289818832452    -1.679050131843724     2.723679929157760
    H               -0.443535181167548     1.458579868156276     1.584584929157761
    C               -0.170710181167548     1.895949868156276    -2.385320070842240
    N                0.075289818832452     0.431949868156276    -2.397320070842239
    H                1.039289818832452     0.244949868156276    -2.665320070842240
    H               -0.058710181167548     0.031949868156276    -1.469320070842239
    H               -0.585710181167548    -0.041050131843724    -3.004320070842240
    H                0.483289818832452     2.357949868156275    -1.639320070842239
    H               -1.207710181167548     2.101949868156276    -2.101320070842239
    H                0.029913818832452     2.389959868156276    -3.347455070842239

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-029ASN-034LYS-2-dimer.npy', np.array(charges))