import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.554517593076495    -1.607960596683494     0.774822572223617
    C               -0.336517593076494    -2.521960596683494     1.991822572223617
    H               -1.617517593076494    -1.536960596683494     0.541822572223617
    H               -0.199517593076494    -0.606960596683494     1.013822572223617
    H               -0.003517593076494    -1.988960596683494    -0.085177427776383
    H               -0.998517593076494    -2.200960596683494     2.789822572223617
    H               -0.548967593076494    -3.571160596683494     1.738762572223617
    H                0.697722406923506    -2.459450596683495     2.361192572223617
    C               -0.106517593076494     1.519039403316506    -1.391177427776383
    C                0.991482406923506     2.614039403316506    -1.385177427776383
    H               -0.345517593076494     1.232039403316506    -2.416177427776383
    H                0.260482406923506     0.643039403316506    -0.861177427776383
    H               -1.006517593076494     1.889039403316506    -0.900177427776383
    H                1.881482406923506     2.211039403316506    -1.869177427776383
    H                1.230482406923506     2.782039403316506    -0.339177427776383
    H                0.722182406923506     3.569659403316505    -1.858746427776383

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-195LEU-237ILE-1-dimer.npy', np.array(charges))