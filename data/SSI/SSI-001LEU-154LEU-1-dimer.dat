import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.556039914593016    -1.723973090957359     0.211726574013299
    C                1.821039914593017    -2.036973090957359    -0.575273425986701
    H                0.739039914593017    -1.817973090957359     1.284726574013299
    H                0.235039914593017    -0.707973090957359    -0.002273425986701
    H               -0.244960085406983    -2.405973090957359    -0.083273425986701
    H                1.615039914593016    -1.890973090957359    -1.632273425986701
    H                2.110318914593016    -3.083989090957359    -0.401853425986701
    H                2.631125914593016    -1.356010090957359    -0.275183425986701
    C               -0.442960085406984     1.991026909042641     0.061726574013299
    C               -1.933960085406983     1.773026909042641     0.302726574013299
    H               -0.246960085406983     3.042026909042641    -0.151273425986701
    H                0.119039914593017     1.693026909042641     0.947726574013299
    H               -0.111960085406983     1.392026909042641    -0.785273425986701
    H               -2.071960085406984     0.729026909042641     0.570726574013299
    H               -2.495500085406984     1.972143909042641    -0.621953425986701
    H               -2.280165085406983     2.397637909042641     1.139386574013299

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-001LEU-154LEU-1-dimer.npy', np.array(charges))