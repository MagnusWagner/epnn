import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.892924424860368    -1.365138420745616    -0.983847864050599
    C               -1.244924424860368    -0.317138420745616    -1.982847864050599
    H               -0.096924424860368    -2.026138420745616    -1.296847864050599
    H               -0.580924424860368    -0.879138420745616    -0.061847864050599
    H               -1.771924424860368    -1.920138420745616    -0.744847864050599
    H               -0.390924424860368     0.341861579254384    -2.037847864050599
    H               -2.102924424860368     0.252861579254384    -1.620847864050599
    H               -1.484844424860368    -0.775948420745616    -2.953377864050599
    C                1.076075575139632     1.216861579254384     0.807152135949401
    C                1.064075575139632     0.466861579254384     2.151152135949401
    H                1.815075575139632     2.016861579254384     0.801152135949401
    H                1.320075575139632     0.521861579254384     0.005152135949401
    H                0.085075575139632     1.632861579254384     0.626152135949401
    H                2.018075575139632    -0.040138420745616     2.292152135949401
    H                0.278075575139632    -0.284138420745616     2.090152135949401
    H                0.884675575139632     1.142111579254384     3.000772135949402

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-012ILE-044ILE-1-dimer.npy', np.array(charges))