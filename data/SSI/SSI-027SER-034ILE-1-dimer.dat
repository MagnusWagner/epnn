import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.357608662711077     1.286457216079549    -0.317950681340339
    C               -0.334608662711077     2.215457216079549     0.900049318659661
    O               -0.974608662711077     1.908457216079549    -1.439950681340339
    H                0.663391337288923     1.007457216079550    -0.583950681340339
    H               -0.906608662711077     0.379457216079549    -0.067950681340339
    H               -1.352608662711077     2.376457216079550     1.252049318659661
    H               -0.283608662711077     2.435457216079549    -1.876950681340339
    H                0.112057337288923     3.185513216079550     0.636459318659661
    H                0.270334337288923     1.758867216079549     1.697279318659661
    C                0.632391337288923    -2.055542783920451     0.516049318659661
    C                1.063391337288923    -3.519542783920451     0.475049318659661
    H                0.353391337288923    -1.707542783920451    -0.475950681340339
    H               -0.233608662711077    -1.954542783920451     1.171049318659661
    H                1.442391337288923    -1.437542783920451     0.906049318659661
    H                0.255391337288923    -4.119542783920450     0.053049318659661
    H                1.210391337288923    -3.838542783920451     1.507049318659661
    H                1.987552337288923    -3.689202783920451    -0.096910681340339

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-027SER-034ILE-1-dimer.npy', np.array(charges))