import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.075277434684900     0.217608347761005    -1.991595700144514
    C                1.262277434684900    -1.235391652238995    -1.547595700144514
    H                0.074277434684900     0.364608347761005    -2.401595700144514
    H                1.189277434684900     0.869608347761005    -1.124595700144514
    H                1.826277434684900     0.516608347761005    -2.722595700144514
    H                0.563277434684900    -1.443391652238995    -0.741595700144514
    H                1.038147434684900    -1.914861652238995    -2.383105700144514
    H                2.287437434684900    -1.378651652238995    -1.175395700144515
    C               -0.641722565315100     0.209608347761005     1.301404299855486
    C               -1.690722565315100     0.805608347761005     2.235404299855486
    H                0.358277434684900     0.318608347761005     1.723404299855486
    H               -0.857722565315100    -0.847391652238995     1.152404299855486
    H               -0.688722565315100     0.716608347761005     0.338404299855486
    H               -2.676722565315100     0.671608347761005     1.785404299855486
    H               -1.499042565315100     1.879448347761005     2.377274299855486
    H               -1.675602565315100     0.277758347761005     3.200364299855486

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-098VAL-152ALA-1-dimer.npy', np.array(charges))