import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.371552333164083     0.448650246123014     0.822328557007480
    C               -1.788552333164083     0.006650246123014     2.217328557007480
    H               -2.037552333164083     0.043650246123014     0.061328557007480
    H               -1.421552333164083     1.536650246123014     0.768328557007480
    H               -0.346552333164083     0.144650246123014     0.632328557007480
    H               -2.809552333164083     0.330650246123014     2.367328557007480
    H               -1.175552333164083     0.534650246123014     2.949328557007480
    H               -1.693002333164083    -1.075309753876986     2.391188557007480
    C                1.481447666835917     0.515650246123014    -1.627671442992520
    C                1.681447666835918    -0.983349753876986    -1.416671442992520
    H                1.518447666835917     0.753650246123014    -2.692671442992520
    H                0.513447666835917     0.834650246123014    -1.248671442992520
    H                2.254447666835917     1.081650246123014    -1.107671442992520
    H                1.795447666835917    -1.174349753876986    -0.348671442992520
    H                2.573957666835917    -1.322329753876986    -1.963041442992520
    H                0.794787666835917    -1.540579753876986    -1.753311442992520

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-168ILE-178VAL-1-dimer.npy', np.array(charges))