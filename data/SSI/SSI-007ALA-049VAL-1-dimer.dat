import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.371103132498632    -1.135034589618111    -0.305813181022732
    C                1.431103132498633    -2.654034589618111    -0.468813181022732
    H                0.334103132498633    -0.841034589618111    -0.144813181022732
    H                1.725103132498633    -0.644034589618111    -1.206813181022732
    H                1.973103132498633    -0.825034589618111     0.547186818977268
    H                0.819103132498633    -2.926034589618111    -1.331813181022732
    H                1.014203132498632    -3.141423589618111     0.424856818977268
    H                2.470283132498632    -2.971023589618111    -0.640933181022732
    C               -1.271896867501367     1.331965410381889     0.881186818977268
    C               -1.526896867501367     2.459965410381888    -0.102813181022732
    H               -0.212896867501367     1.078965410381889     0.898186818977268
    H               -1.831896867501367     0.446965410381889     0.575186818977268
    H               -1.597896867501367     1.625965410381889     1.879186818977268
    H               -1.204896867501367     2.113965410381889    -1.074813181022732
    H               -0.933036867501367     3.336855410381888     0.194476818977268
    H               -2.595906867501368     2.711795410381889    -0.164513181022732

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-007ALA-049VAL-1-dimer.npy', np.array(charges))