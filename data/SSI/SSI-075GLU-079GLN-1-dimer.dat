import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                1.920314312145870     1.732585485345213     0.907763452359619
    C                0.809314312145870     1.283585485345214     1.846763452359619
    O                0.200314312145870     0.217585485345214     1.598763452359619
    O                0.539314312145870     2.003585485345214     2.834763452359619
    H                2.862314312145870     1.833585485345213     1.450763452359619
    H                1.653314312145870     2.716585485345213     0.513763452359619
    H                2.062371612145870     1.040326485345214     0.064793452359619
    C               -1.260685687854130    -2.244414514654786    -2.812236547640381
    C               -0.848685687854130    -1.228414514654786    -1.792236547640381
    O               -0.562685687854130    -0.071414514654786    -2.093236547640381
    N               -0.800685687854130    -1.665414514654787    -0.562236547640381
    H               -0.493685687854130    -1.012414514654786     0.159763452359619
    H               -1.037685687854130    -2.618414514654786    -0.334236547640381
    H               -2.228685687854130    -2.661414514654786    -2.530236547640381
    H               -0.536685687854130    -3.052414514654786    -2.819236547640381
    H               -1.349759687854130    -1.786832514654787    -3.808576547640381

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-075GLU-079GLN-1-dimer.npy', np.array(charges))