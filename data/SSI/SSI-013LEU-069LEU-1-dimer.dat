import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.849066566326797     0.262687899981233     1.431224230412266
    C                1.819066566326797     0.304687899981233     2.610224230412266
    H                1.262066566326797     0.817687899981233     0.587224230412266
    H                0.700066566326797    -0.774312100018767     1.136224230412266
    H               -0.109933433673203     0.697687899981232     1.717224230412266
    H                2.762066566326797    -0.105312100018767     2.272224230412266
    H                1.980676566326797     1.346504899981233     2.924068130412266
    H                1.453986566326797    -0.322501100018767     3.436874730412266
    C               -1.265933433673202     0.437687899981233    -1.790775769587734
    C               -1.400933433673203    -1.003312100018767    -2.251775769587734
    H               -0.325933433673203     0.851687899981233    -2.153775769587734
    H               -2.088933433673203     1.032687899981233    -2.182775769587734
    H               -1.280933433673203     0.479687899981233    -0.700775769587734
    H               -2.311933433673202    -1.399312100018767    -1.803775769587734
    H               -0.538130433673203    -1.573019900018767    -1.876269769587734
    H               -1.518142433673203    -1.072343100018767    -3.343332769587734

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-013LEU-069LEU-1-dimer.npy', np.array(charges))