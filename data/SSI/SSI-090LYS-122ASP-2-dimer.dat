import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                1.818559617198237    -0.799011143838729     0.135455872894752
    C                1.501559617198237    -2.000011143838729     1.027455872894752
    C                3.043559617198237    -1.087011143838729    -0.740544127105248
    H                0.955559617198237    -0.601011143838729    -0.501544127105248
    H                2.015559617198237     0.080988856161271     0.750455872894752
    H                2.379559617198237    -2.265011143838728     1.615455872894753
    H                1.278559617198237    -2.850011143838729     0.380455872894752
    H                3.930559617198237    -1.134011143838729    -0.099544127105248
    H                2.914559617198237    -2.074011143838729    -1.198544127105248
    H                0.630394617198237    -1.839324743838729     1.679568772894753
    H                3.183389617198237    -0.335357143838729    -1.531408127105248
    C               -1.099440382801763     2.061988856161272    -0.914544127105248
    C               -1.631440382801763     0.923988856161271    -0.055544127105248
    O               -1.796440382801763     1.119988856161271     1.155455872894753
    O               -1.839440382801763    -0.191011143838729    -0.597544127105248
    H               -1.643440382801763     2.105988856161271    -1.860544127105247
    H               -0.055440382801763     1.840988856161271    -1.146544127105247
    H               -1.140299382801763     3.044029856161271    -0.420656127105248

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-090LYS-122ASP-2-dimer.npy', np.array(charges))