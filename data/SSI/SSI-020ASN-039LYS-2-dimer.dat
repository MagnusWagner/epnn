import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    1 1
    --
    1 1
    C                1.491253393607265    -1.713467443065789     0.782494819131849
    C                0.292253393607265    -0.876467443065788     1.183494819131849
    O               -0.491746606392735    -0.407467443065789     0.363494819131849
    N                0.119253393607265    -0.711467443065789     2.457494819131849
    H                1.494253393607265    -2.611467443065789     1.403494819131849
    H                2.391253393607264    -1.137467443065789     1.008494819131849
    H               -0.673746606392735    -0.181467443065789     2.778494819131849
    H                0.796253393607265    -1.118467443065789     3.096494819131850
    H                1.487664693607265    -2.007027443065788    -0.277605180868151
    C               -0.291746606392735     2.286532556934211    -2.624505180868151
    N               -0.954746606392735     1.187532556934211    -1.897505180868151
    H               -0.777746606392735     1.212532556934212    -0.895505180868151
    H               -1.959746606392735     1.232532556934211    -2.023505180868151
    H               -0.656746606392735     0.277532556934211    -2.240505180868150
    H               -0.822746606392735     3.223532556934211    -2.424505180868151
    H               -0.403746606392735     2.101532556934211    -3.697505180868151
    H                0.775932693607265     2.472982556934211    -2.436635180868151

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-020ASN-039LYS-2-dimer.npy', np.array(charges))