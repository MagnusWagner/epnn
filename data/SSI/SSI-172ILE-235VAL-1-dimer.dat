import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.184387786795004    -1.276660345508373    -1.037535601614654
    C                0.284387786795004    -2.369660345508374    -2.127535601614654
    H                1.045387786795004    -0.617660345508373    -1.078535601614654
    H               -0.707612213204996    -0.676660345508373    -1.223535601614654
    H                0.084387786795004    -1.706660345508373    -0.039535601614654
    H               -0.580612213204996    -3.023660345508373    -2.010535601614654
    H                1.193987786795004    -2.967310345508373    -1.968019601614654
    H                0.284387786795004    -1.995510345508373    -3.161949601614654
    C               -0.394612213204996     1.896339654491627     0.844464398385345
    C               -0.068612213204996     1.755339654491627     2.321464398385345
    H                0.359387786795004     1.398339654491627     0.235464398385346
    H               -1.361612213204996     1.436339654491627     0.636464398385346
    H               -0.436612213204996     2.950339654492627     0.568464398385345
    H               -0.015612213204996     0.700339654491627     2.564464398385346
    H                0.911077786795004     2.214479654492627     2.519972398385346
    H               -0.842652213204996     2.223819654491627     2.947070398385346

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-172ILE-235VAL-1-dimer.npy', np.array(charges))