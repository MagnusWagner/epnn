import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.337066702136895    -0.104752691733361     1.218010813528992
    C               -0.306066702136895    -0.363752691733361     2.762010813528992
    C               -1.486066702136895     0.876247308266640     1.106010813528992
    H               -0.569066702136895    -1.033752691733360     0.707010813528992
    H                0.560933297863105     0.333247308266640     0.783010813528992
    H               -1.025066702136895    -1.137752691733360     3.045010813528992
    H                0.683933297863105    -0.660752691733361     3.093010813528992
    H               -1.504066702136895     1.449247308266640     0.181010813528992
    H               -0.599196702136895     0.595707308266639     3.213140813528992
    H               -1.309206702136895     1.532407308266639     1.970980813528992
    H               -2.443986702136895     0.343747308266640     1.199980813528992
    C                0.397933297863105     0.153247308266639    -2.291989186471008
    C                1.719933297863105    -0.573752691733361    -2.722989186471008
    H                0.275933297863105     1.088247308266639    -2.841989186471008
    H               -0.463066702136895    -0.481752691733360    -2.489989186471008
    H                0.430933297863105     0.379247308266639    -1.235989186471008
    H                1.672933297863105    -0.811752691733361    -3.789989186471008
    H                2.597643297863105     0.061487308266639    -2.532989186471008
    H                1.826293297863105    -1.505602691733361    -2.148239186471008

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-039PRO-199LEU-1-dimer.npy', np.array(charges))