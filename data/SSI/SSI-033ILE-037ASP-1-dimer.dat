import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C               -1.282277798626240    -2.427392901686639     0.926035484489960
    C               -1.858277798626240    -3.369392901686639     1.989035484489960
    H               -0.326277798626240    -2.028392901686639     1.260035484489960
    H               -1.125277798626240    -2.946392901686639    -0.013964515510040
    H               -1.966277798626240    -1.600392901686639     0.745035484489960
    H               -2.886277798626240    -3.610392901686639     1.711035484489960
    H               -1.856137798626240    -2.899232901686639     2.983495484489960
    H               -1.279447798626240    -4.303212901686639     2.043215484489960
    C               -0.091277798626240     0.598607098313361    -1.105964515510040
    C               -0.732277798626240     1.664607098313361    -2.003964515510040
    C                1.040722201373760     1.096607098313362    -0.200964515510040
    O                1.550722201373760     2.213607098313361    -0.407964515510040
    O                1.432722201373760     0.351607098313361     0.718035484489960
    H               -0.863277798626240     0.119607098313361    -0.507964515510040
    H                0.333722201373760    -0.179392901686639    -1.743964515510041
    H                0.068722201373760     2.182607098313361    -2.531964515510040
    H               -1.283267798626240     2.384897098313361    -1.381404515510041
    H               -1.357337798626240     1.185007098313361    -2.771614515510040

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-033ILE-037ASP-1-dimer.npy', np.array(charges))