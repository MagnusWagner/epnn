import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.256159465273406     0.508917453938308     1.826188786443483
    C               -1.668159465273406    -0.091082546061692     1.915188786443483
    H               -0.279159465273406     1.392917453938308     1.189188786443483
    H                0.086840534726594     0.800917453938308     2.820188786443483
    H                0.435840534726594    -0.223082546061692     1.408188786443483
    H               -1.962159465273405    -0.425082546061692     0.919188786443483
    H               -1.687447465273406    -0.952617546061692     2.598848786443483
    H               -2.390303465273406     0.676420453938308     2.230538786443483
    C                1.256840534726594     0.405917453938308    -1.517811213556517
    C                0.669840534726594    -0.824082546061692    -2.223811213556517
    H                0.497840534726594     0.849917453938308    -0.881811213556517
    H                2.098840534726595     0.116917453938308    -0.891811213556517
    H                1.581840534726594     1.144917453938308    -2.252811213556517
    H                0.403840534726594    -1.548082546061692    -1.454811213556517
    H                1.425230534726594    -1.260271546061692    -2.893981213556517
    H               -0.239329465273406    -0.568939546061692    -2.788001213556517

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-005VAL-023LEU-1-dimer.npy', np.array(charges))