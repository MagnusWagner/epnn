import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.774311937107615     0.878760995429060     1.441966601579404
    C                1.445311937107615     0.778760995429061     2.830966601579404
    H                1.166311937107615     1.719760995429061     0.874966601579404
    H                0.974311937107615    -0.037239004570939     0.884966601579404
    H               -0.303688062892385     0.992760995429060     1.553966601579404
    H                2.518311937107615     0.631760995429061     2.714966601579404
    H                1.029311937107615    -0.118239004570939     3.284966601579403
    H                1.250191937107615     1.666837395429061     3.450036601579404
    C               -0.979688062892385    -0.514239004570939    -1.446033398420596
    C               -1.244688062892385    -1.137239004570939    -2.818033398420596
    H               -0.742688062892385    -1.286239004570939    -0.716033398420596
    H               -0.130688062892385     0.164760995429061    -1.508033398420596
    H               -1.855688062892385     0.044760995429061    -1.117033398420596
    H               -0.398688062892385    -1.752239004570939    -3.070033398420597
    H               -2.162117062892385    -1.742185004570939    -2.866653398420596
    H               -1.288298062892385    -0.356466004570939    -3.591653398420596

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-080ILE-112LEU-1-dimer.npy', np.array(charges))