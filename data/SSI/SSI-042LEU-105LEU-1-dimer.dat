import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.653753753326369     0.019037021857595     1.885083968709722
    C                0.142246246673631    -0.330962978142405     3.147083968709721
    H               -0.230753753326369    -0.491962978142405     1.022083968709721
    H               -1.686753753326369    -0.308962978142405     2.001083968709722
    H               -0.635753753326369     1.096037021857595     1.726083968709721
    H                0.184246246673631    -1.412962978142405     3.234083968709721
    H                1.172228246673632     0.054204521857595     3.119113968709721
    H               -0.381331753326369     0.052370821857595     4.035293968709721
    C                0.066246246673631     0.069037021857595    -1.775916031290278
    C                0.452246246673631     0.246037021857595    -3.256916031290278
    H                0.592246246673631     0.779037021857594    -1.146916031290278
    H               -1.001753753326369     0.245037021857595    -1.658916031290279
    H                0.299246246673631    -0.945962978142405    -1.448916031290278
    H                0.282246246673631     1.284037021857595    -3.536916031290279
    H                1.506981246673631    -0.007560378142405    -3.439189031290279
    H               -0.184016753326369    -0.380794878142405    -3.898983031290279

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-042LEU-105LEU-1-dimer.npy', np.array(charges))