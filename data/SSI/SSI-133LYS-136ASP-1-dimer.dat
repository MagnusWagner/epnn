import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -3.027049775304531    -0.345806887270713     0.571967527041011
    N               -2.118049775304531     0.822193112729287     0.950967527041011
    H               -2.325049775304531     1.653193112729287     0.412967527041011
    H               -2.240049775304531     1.059193112729287     1.928967527041011
    H               -1.130049775304531     0.578193112729287     0.833967527041011
    H               -4.070049775304531    -0.078806887270713     0.773967527041011
    H               -2.784049775304531    -1.225806887270713     1.175967527041011
    H               -2.935396855304531    -0.609308887270713    -0.492062472958989
    C                0.994950224695469    -1.250806887270713    -1.249032472958989
    C                1.391950224695469    -0.078806887270713    -0.384032472958989
    O                0.738950224695469     0.182193112729287     0.656967527041011
    O                2.403950224695469     0.558193112729287    -0.709032472958989
    H                0.821950224695469    -0.891806887270713    -2.265032472958989
    H                0.074950224695469    -1.667806887270713    -0.865032472958989
    H                1.758708224695469    -2.042401887270713    -1.256172472958989

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-133LYS-136ASP-1-dimer.npy', np.array(charges))