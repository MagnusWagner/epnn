import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.177551788345897     0.618704358868101     1.879475338717631
    C                1.016551788345897     1.731704358868100     2.472475338717631
    H               -0.885448211654103     0.861704358868101     1.952475338717631
    H                0.447551788345897     0.484704358868101     0.832475338717630
    H                0.366551788345897    -0.312295641131899     2.415475338717631
    H                2.066551788345897     1.492704358868101     2.300475338717630
    H                0.813517788345897     1.830944358868101     3.549015338717631
    H                0.794528788345897     2.680944358868100     1.962915338717631
    C               -0.409448211654103    -1.184295641131899    -1.437524661282370
    C               -0.784448211654103    -1.157295641131899    -2.911524661282369
    H               -0.681448211654103    -0.237295641131899    -0.974524661282369
    H               -0.956448211654103    -1.980295641131900    -0.945524661282369
    H                0.653551788345897    -1.384295641131899    -1.304524661282370
    H               -0.427448211654103    -2.086295641131900    -3.355524661282370
    H               -0.315995211654103    -0.312055641131899    -3.437004661282369
    H               -1.877932211654103    -1.143455641131899    -3.030274661282369

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-118ALA-160VAL-1-dimer.npy', np.array(charges))