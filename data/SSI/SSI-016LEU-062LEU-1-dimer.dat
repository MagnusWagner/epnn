import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.763068081448463     1.338860069879018     0.679748973637709
    C                1.069068081448463     2.333860069879018     1.766748973637709
    H                0.200068081448463     1.807860069879018    -0.128251026362291
    H                1.695068081448463     0.937860069879018     0.278748973637709
    H                0.196068081448463     0.510860069879018     1.099748973637709
    H                1.547068081448463     1.829860069879018     2.606748973637709
    H                0.142328081448463     2.828360069879018     2.093279973637709
    H                1.737888081448463     3.117290069879018     1.380837973637709
    C               -0.643931918551537    -1.302139930120982    -0.765251026362291
    C               -1.184931918551537    -2.369139930120982    -1.688251026362291
    H               -1.292931918551537    -0.428139930120982    -0.760251026362291
    H               -0.583931918551537    -1.695139930120982     0.249748973637709
    H                0.356068081448463    -1.009139930120982    -1.090251026362291
    H               -2.176931918551537    -2.590139930120982    -1.314251026362291
    H               -1.255581918551537    -2.027419930120982    -2.731436026362291
    H               -0.604141918551537    -3.299259930120982    -1.601277026362291

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-016LEU-062LEU-1-dimer.npy', np.array(charges))