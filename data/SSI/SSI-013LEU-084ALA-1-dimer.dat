import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.315161427461382    -0.511887537169473    -1.615211083765785
    C                0.822161427461382     0.359112462830527    -2.763211083765785
    H               -0.614838572538618    -0.101887537169473    -1.218211083765785
    H                0.146161427461382    -1.523887537169473    -1.985211083765785
    H                1.057161427461382    -0.588887537169473    -0.822211083765785
    H                1.765161427461381    -0.050887537169473    -3.101211083765785
    H                0.983771427461382     1.400929462830527    -2.449367183765784
    H                0.123551427461382     0.328863462830527    -3.612346083765785
    C               -1.022838572538618    -0.403887537169473     1.825788916234215
    C               -0.116838572538618     0.562112462830527     2.560788916234215
    H               -1.507838572538618    -1.072887537169473     2.537788916234216
    H               -1.780838572538618     0.151112462830527     1.269788916234215
    H               -0.435838572538618    -1.002887537169473     1.130788916234215
    H                0.384161427461382     1.169112462830527     1.810788916234215
    H                0.627881427461382     0.001116462830527     3.144465916234215
    H               -0.720463572538618     1.225300462830527     3.197827916234215

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-013LEU-084ALA-1-dimer.npy', np.array(charges))