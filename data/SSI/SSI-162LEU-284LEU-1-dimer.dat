import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.728985127140374    -0.413164980005761    -0.728177329556448
    C                1.830985127140374    -0.551164980005761    -2.245177329556447
    H                1.001985127140374    -1.115164980005761    -0.331177329556448
    H                2.701985127140374    -0.621164980005761    -0.280177329556448
    H                1.430985127140374     0.602835019994239    -0.466177329556448
    H                2.203985127140374    -1.549164980005761    -2.468177329556448
    H                0.812095127140374    -0.436524980005761    -2.643563329556448
    H                2.528665127140374     0.192385019994239    -2.657949329556448
    C               -1.250014872859626    -0.046164980005761     1.387822670443552
    C               -2.309014872859626     1.013835019994239     1.580822670443552
    H               -0.260014872859626     0.403835019994239     1.351822670443552
    H               -1.277014872859626    -0.741164980005761     2.224822670443552
    H               -1.426014872859626    -0.598164980005761     0.463822670443552
    H               -2.159014872859626     1.503835019994239     2.540822670443552
    H               -2.249194872859626     1.738925019994239     0.755796670443552
    H               -3.319644872859626     0.579765019994239     1.566207670443552

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-162LEU-284LEU-1-dimer.npy', np.array(charges))