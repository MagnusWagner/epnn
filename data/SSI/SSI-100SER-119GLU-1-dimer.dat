import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                0.662824533077575    -1.848957738177315    -0.665726649848229
    C                0.147824533077575    -2.858957738177315     0.364273350151771
    O                1.632824533077575    -0.978957738177315    -0.116726649848229
    H                1.101824533077576    -2.389957738177315    -1.505726649848229
    H               -0.173175466922425    -1.257957738177315    -1.042726649848229
    H               -0.611175466922425    -3.470957738177315    -0.125726649848229
    H                1.216824533077576    -0.080957738177315    -0.094726649848229
    H               -0.320805466922425    -2.347383738177315     1.217903350151771
    H                0.967644533077575    -3.529393738177315     0.661603350151771
    C               -1.509175466922424     2.501042261822685    -0.348726649848229
    C               -0.594175466922425     1.386042261822685     0.137273350151771
    O               -1.084175466922425     0.485042261822685     0.853273350151771
    O                0.612824533077575     1.409042261822685    -0.203726649848229
    H               -2.107175466922425     2.126042261822685    -1.182726649848229
    H               -0.923175466922425     3.348042261822685    -0.715726649848229
    H               -2.192235466922424     2.852291261822685     0.438703350151771

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-100SER-119GLU-1-dimer.npy', np.array(charges))