import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.655578638924637    -1.056784290148128    -0.769938001087275
    C               -0.830578638924637    -2.278784290148128    -1.186938001087275
    H               -2.702578638924638    -1.177784290148128    -1.035938001087275
    H               -1.599578638924638    -0.939784290148128     0.312061998912725
    H               -1.260578638924637    -0.155784290148128    -1.239938001087275
    H               -1.315578638924637    -3.180784290148128    -0.819938001087275
    H               -0.739288638924637    -2.334852290148127    -2.281708001087275
    H                0.184431361075363    -2.244389290148127    -0.764368001087275
    C                0.638421361075363     1.318215709851872     0.634061998912725
    C                1.841421361075363     2.025215709851872     1.322061998912725
    H               -0.138578638924637     2.044215709851872     0.393061998912725
    H                0.972421361075363     0.839215709851872    -0.283938001087275
    H                0.226421361075363     0.561215709851872     1.303061998912725
    H                2.588421361075363     1.259215709851872     1.541061998912725
    H                1.559081361075363     2.504591709851872     2.271001998912725
    H                2.300591361075363     2.731302709851872     0.614531998912725

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-176LEU-208ALA-1-dimer.npy', np.array(charges))