import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.756369522885013    -1.512235532045561     0.110167454874428
    C               -0.457369522885013    -2.209235532045562     0.456167454874428
    H               -1.921369522885013    -0.660235532045562     0.770167454874428
    H               -1.706369522885013    -1.143235532045561    -0.914832545125572
    H               -2.591369522885013    -2.207235532045562     0.192167454874428
    H                0.361630477114987    -1.496235532045561     0.390167454874428
    H               -0.286369522885013    -2.972235532045562    -0.282832545125572
    H               -0.450159522885013    -2.700005532045561     1.440587454874428
    C                0.909630477114986     1.121764467954439    -0.228832545125572
    C                1.304630477114987     2.603764467954439    -0.325832545125572
    H                1.170630477114987     0.725764467954438     0.755167454874428
    H               -0.161369522885014     0.999764467954439    -0.386832545125572
    H                1.388630477114987     0.522764467954439    -1.003832545125572
    H                1.079630477114986     2.957764467954438    -1.331832545125572
    H                2.385320477114986     2.716914467954438    -0.154662545125572
    H                0.724950477114987     3.207894467954438     0.387617454874428

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-036ILE-061ILE-1-dimer.npy', np.array(charges))