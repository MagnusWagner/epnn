import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.213600320391663     1.360536222805367     1.716297657171399
    C               -1.008600320391663     0.504536222805367     0.771297657171399
    O               -1.618600320391663     1.019536222805367    -0.140702342828601
    N               -1.035600320391663    -0.811463777194633     0.973297657171399
    H                0.744399679608337     1.586536222805367     1.249297657171399
    H               -0.005600320391663     0.796536222805367     2.626297657171399
    H               -1.624600320391663    -1.368463777194633     0.374297657171399
    H               -0.548600320391663    -1.225463777194633     1.753297657171399
    H               -0.734600320391663     2.288820222805367     1.993503657171399
    C                1.263399679608337    -0.622463777194633    -1.848702342828601
    C                2.551399679608337    -1.333463777194633    -1.436702342828601
    H                1.000399679608337    -0.918463777194633    -2.862702342828601
    H                0.450399679608337    -0.915463777194633    -1.190702342828601
    H                1.381399679608337     0.458536222805367    -1.776702342828601
    H                2.893399679608337    -0.899463777194633    -0.497702342828601
    H                3.344649679608337    -1.234927777194633    -2.192379342828601
    H                2.306479679608337    -2.392403777194632    -1.267416342828601

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-069ASN-119VAL-1-dimer.npy', np.array(charges))