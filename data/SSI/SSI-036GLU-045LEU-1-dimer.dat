import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C               -0.037387701209971    -0.154385020000459     0.503287111961256
    C               -1.297387701209971     0.543614979999541     1.009287111961256
    C                1.097612298790029    -0.154385020000459     1.522287111961256
    O                0.828612298790029    -0.328385020000459     2.734287111961256
    O                2.266612298790029    -0.003385020000459     1.103287111961256
    H               -0.291387701209971    -1.188385020000459     0.261287111961256
    H                0.294612298790029     0.318614979999541    -0.420712888038744
    H               -1.639387701209971     0.042614979999541     1.915287111961256
    H               -2.083387701209971     0.427614979999541     0.271287111961256
    H               -1.181677701209971     1.618024979999541     1.214827111961256
    C               -0.715387701209971     0.363614979999541    -3.220712888038744
    C               -2.059387701209971    -0.281385020000459    -3.507712888038744
    H               -0.459387701209971     1.054614979999541    -4.021712888038744
    H               -0.780387701209971     0.925614979999541    -2.293712888038744
    H                0.060612298790029    -0.397385020000459    -3.131712888038744
    H               -2.811387701209971     0.496614979999541    -3.632712888038744
    H               -2.001787701209971    -0.889055020000459    -4.422818888038743
    H               -2.367257701209970    -0.918815020000459    -2.665753888038743

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-036GLU-045LEU-1-dimer.npy', np.array(charges))