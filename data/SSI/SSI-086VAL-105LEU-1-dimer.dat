import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.484914035560628     0.851725833223304     1.428932576423465
    C               -2.716914035560628     0.806725833223304     0.501932576423465
    H               -0.946914035560628    -0.091274166776696     1.350932576423465
    H               -0.812914035560628     1.650725833223304     1.113932576423465
    H               -1.794914035560628     1.025725833223304     2.460932576423466
    H               -2.372914035560628     0.538725833223304    -0.487067423576535
    H               -3.475534035560627     0.087285833223304     0.843844576423465
    H               -3.170884035560627     1.805316833223304     0.419915576423465
    C                1.450085964439372    -0.653274166776696    -0.592067423576535
    C                2.751085964439372    -1.005274166776696    -1.329067423576535
    H                1.670085964439372    -0.067274166776696     0.300932576423465
    H                0.814085964439372    -0.062274166776696    -1.250067423576535
    H                0.916085964439372    -1.559274166776696    -0.311067423576535
    H                2.495085964439373    -1.611274166776696    -2.197067423576535
    H                3.395570964439372    -1.592584166776696    -0.658464423576535
    H                3.290971964439372    -0.122674166776696    -1.702613423576535

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-086VAL-105LEU-1-dimer.npy', np.array(charges))