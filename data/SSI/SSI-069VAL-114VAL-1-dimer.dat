import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.041421341431376    -0.891212643193717    -1.109462433324220
    C                2.016421341431376    -1.563212643193717    -2.091462433324220
    H                0.182421341431376    -1.534212643193717    -0.924462433324220
    H                1.551421341431376    -0.695212643193717    -0.164462433324220
    H                0.691421341431376     0.053787356806283    -1.524462433324220
    H                2.462421341431376    -2.430212643193717    -1.604462433324220
    H                1.472811341431376    -1.897744643193717    -2.987322433324220
    H                2.825451341431376    -0.863052643193717    -2.346902433324220
    C               -1.683578658568624     0.884787356806283     0.949537566675780
    C               -1.381578658568624     1.566787356806283     2.251537566675780
    H               -2.223578658568624     1.549787356806283     0.275537566675780
    H               -0.747578658568624     0.612787356806283     0.463537566675780
    H               -2.268578658568624    -0.021212643193717     1.111537566675780
    H               -0.814578658568624     2.471787356806283     2.032537566675780
    H               -2.295856658568624     1.863640356806283     2.786307566675780
    H               -0.748682658568624     0.923799356806283     2.880827566675780

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-069VAL-114VAL-1-dimer.npy', np.array(charges))