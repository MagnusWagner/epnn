import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.041345285426641     0.155708172175752    -0.510685095963125
    C                0.805345285426642     0.124708172175752    -2.009685095963125
    O                2.364345285426642     0.433708172175752    -0.177685095963125
    H                0.402345285427642     0.919708172175752    -0.067685095963125
    H                0.766345285426641    -0.810291827824248    -0.085685095963125
    H               -0.270654714573358     0.004708172175752    -2.155685095963126
    H                2.384345285426642     1.384708172175752     0.048314904036875
    H                1.305945285426642    -0.733997827824248    -2.480885095963125
    H                1.079985285426641     1.083068172175752    -2.474565095963125
    C               -2.097654714573359    -1.122291827824248     1.107314904036875
    C               -2.281654714573358     0.306708172175752     1.586314904036875
    H               -2.910654714573358    -1.753291827824248     1.466314904036875
    H               -2.098654714573359    -1.133291827824248     0.018314904036875
    H               -1.145654714573358    -1.521291827824248     1.453314904036875
    H               -1.453654714573358     0.882708172175752     1.175314904036875
    H               -2.230064714572358     0.407028172175752     2.680514904036875
    H               -3.198044714573358     0.759118172175752     1.179434904036875

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-138SER-169VAL-1-dimer.npy', np.array(charges))