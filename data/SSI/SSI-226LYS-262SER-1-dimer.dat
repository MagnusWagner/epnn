import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    1 1
    --
    1 1
    C                0.190258501530713     0.930968966452728    -1.577254920670634
    C                1.658258501530713     0.549968966452728    -1.342254920670634
    N               -0.710741498469287    -0.145031033547272    -1.126254920670634
    H               -0.023741498469287     1.850968966452728    -1.021254920670635
    H                0.034258501530713     1.127968966452728    -2.644254920670635
    H                1.846258501530713    -0.438031033547272    -1.760254920670634
    H                1.834258501530713     0.508968966452728    -0.272254920670634
    H               -0.468741498469287    -0.444031033547272    -0.187254920670634
    H               -1.667741498469287     0.188968966452728    -1.061254920670634
    H               -0.654741498469287    -0.950031033547272    -1.748254920670634
    H                2.369888501530713     1.263058966452728    -1.783934920670634
    C               -0.906741498469287    -1.016031033547272     2.321745079329366
    O               -0.127741498469287    -0.179031033547272     1.498745079329366
    H                0.782258501530713    -0.055031033547272     1.878745079329366
    H               -0.348741498469287    -1.923031033547272     2.557745079329365
    H               -1.804741498469287    -1.297031033547272     1.770745079329366
    H               -1.209391498469287    -0.511851033547272     3.251375079329366

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-226LYS-262SER-1-dimer.npy', np.array(charges))