import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.885681812180214    -0.190754345368185    -0.452367289490490
    C                2.590681812180214     1.056245654631815     0.083632710509510
    H                1.199681812180214     0.089245654631815    -1.252367289490490
    H                1.323681812180214    -0.669754345368185     0.349632710509511
    H                2.615681812180214    -0.901754345368185    -0.844367289490489
    H                1.834681812180214     1.760245654631815     0.411632710509511
    H                3.218991812180214     1.508630154631815    -0.697757289490490
    H                3.235651812180214     0.788054714631815     0.933392710509511
    C               -1.619318187819786    -0.842754345368185     0.367632710509510
    C               -2.862318187819787    -0.024754345368185     0.002632710509510
    H               -1.025318187819786    -0.301754345368185     1.103632710509510
    H               -1.015318187819786    -1.006754345368185    -0.525367289490489
    H               -1.914318187819786    -1.810754345368185     0.777632710509510
    H               -2.531318187819786     0.953245654631815    -0.347367289490490
    H               -3.479478187819786     0.119927854631815     0.901622710509511
    H               -3.399838187819786    -0.504557345368185    -0.828547289490490

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-024ALA-034ALA-1-dimer.npy', np.array(charges))