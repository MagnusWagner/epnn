import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.434875452172375    -1.169501927665764    -0.394401959792145
    C                0.523124547827625    -2.287501927665764    -0.218401959792145
    C               -1.697875452172375    -1.743501927665764    -0.898401959792145
    H               -0.034875452172375    -0.484501927665764    -1.142401959792145
    H               -0.597875452172375    -0.647501927665764     0.547598040207856
    H                1.540124547827625    -1.960501927665764    -0.431401959792145
    H                0.445124547827625    -2.698501927665764     0.788598040207856
    H               -2.243875452172375    -1.023501927665764    -1.504401959792145
    H               -2.308875452172375    -2.072501927665764    -0.056401959792145
    H                0.164014547827625    -3.023831927665764    -0.952469959792144
    H               -1.381125452172375    -2.618751927665764    -1.484574959792144
    C                0.476124547827625     1.867498072334236     0.702598040207856
    C                1.102124547827625     3.261498072334236     0.784598040207855
    H                0.153124547827625     1.676498072334236    -0.319401959792145
    H                1.213124547827625     1.119498072334236     0.994598040207855
    H               -0.374875452172375     1.792498072334236     1.378598040207855
    H                1.323124547827625     3.475498072334236     1.828598040207855
    H                0.413804547827625     4.023108072334236     0.389423040207855
    H                2.062664547827625     3.293948072334236     0.249522040207855

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-076PRO-112LEU-1-dimer.npy', np.array(charges))