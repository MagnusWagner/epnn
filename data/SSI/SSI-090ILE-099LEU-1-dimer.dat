import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.768307949457582    -0.163755824758818     1.504424981171152
    C               -1.106307949457583     1.213244175241182     1.587424981171152
    H               -2.692307949457582    -0.188755824758818     2.084424981171152
    H               -1.999307949457583    -0.405755824758818     0.466424981171152
    H               -1.088307949457582    -0.927755824758818     1.885424981171152
    H               -0.215307949457582     1.182244175241182     0.964424981171152
    H               -0.757777949457583     1.410844175241182     2.611864981171153
    H               -1.749057949457582     2.026494175241182     1.219324981171152
    C                1.167692050542417    -0.231755824758818    -0.893575018828848
    C                1.698692050542418    -0.813755824758818    -2.199575018828848
    H                0.409692050542418     0.519244175241182    -1.115575018828848
    H                0.730692050542418    -1.022755824758818    -0.283575018828848
    H                1.981692050542418     0.233244175241182    -0.339575018828848
    H                2.407692050542418    -1.602755824758818    -1.959575018828848
    H                2.211612050542417    -0.018585824758818    -2.760485018828848
    H                0.858702050542418    -1.253055824758818    -2.757625018828848

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-090ILE-099LEU-1-dimer.npy', np.array(charges))