import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.857733016419951     0.089214728055794     1.819758156373276
    C               -1.484733016419951    -1.280785271944206     2.034758156373276
    H                0.230266983580049     0.016214728055794     1.835758156373277
    H               -1.179733016419951     0.493214728055794     0.860758156373276
    H               -1.189733016419951     0.769214728055794     2.601758156373276
    H               -2.570733016419951    -1.166785271944206     2.003758156373276
    H               -1.189233016419951    -1.669995271944206     3.020258156373277
    H               -1.183763016419951    -1.980895271944206     1.241458156373276
    C                0.517266983580049     0.364214728055794    -1.595241843626723
    C                1.829266983580049     0.826214728055794    -2.257241843626724
    H                0.090266983580049     1.177214728055794    -1.007241843626724
    H               -0.195733016419951     0.066214728055794    -2.364241843626723
    H                0.714266983580049    -0.490785271944206    -0.948241843626724
    H                2.169266983580049     0.029214728055794    -2.920241843626724
    H                2.604456983580049     1.031074728055794    -1.504141843626724
    H                1.651966983580049     1.739684728055794    -2.843841843626724

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-124ALA-156THR-1-dimer.npy', np.array(charges))