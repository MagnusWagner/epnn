import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.879919207051288     1.231262982808632     2.565831533158115
    C                0.580919207051288     1.360262982808633     1.806831533158115
    O               -0.490080792948712     1.360262982808633     2.400831533158115
    N                0.655919207051288     1.343262982808633     0.484831533158115
    H               -0.195080792948712     1.225262982808633    -0.054168466841885
    H                1.551919207051288     1.344262982808633     0.025831533158115
    H                1.951919207051287     2.051262982808633     3.280831533158115
    H                2.718919207051288     1.310262982808633     1.873831533158115
    H                1.921159207051288     0.269652982808632     3.098372533158115
    C                0.383919207051288    -1.514737017191368    -2.792168466841885
    C               -0.690080792948712    -1.255737017191368    -1.754168466841885
    O               -1.017080792948712    -0.110737017191368    -1.435168466841885
    N               -1.269080792948712    -2.323737017191367    -1.223168466841885
    H                0.026919207051288    -2.272737017191367    -3.491168466841885
    H                1.210919207051288    -1.961737017191368    -2.264168466841885
    H               -2.012080792948712    -2.180737017191368    -0.554168466841885
    H               -1.026080792948712    -3.248737017191368    -1.543168466841885
    H                0.635349207051288    -0.613887017191368    -3.371181466841885

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-099GLN-108GLN-1-dimer.npy', np.array(charges))