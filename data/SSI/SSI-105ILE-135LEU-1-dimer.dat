import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.888295583136058    -0.127690888544458    -1.438110061727629
    C               -1.987295583136058    -0.611690888544458    -2.306110061727629
    H               -0.644295583136058     0.905309111455542    -1.668110061727629
    H               -1.213295583136058    -0.176690888544458    -0.400110061727629
    H                0.001704416863942    -0.744690888544458    -1.560110061727630
    H               -2.856295583136059     0.037309111455542    -2.188110061727630
    H               -2.247295583136059    -1.610690888544458    -1.955110061727630
    H               -1.675893583136059    -0.641244888544457    -3.360700061727629
    C                1.664704416863941     0.626309111455542     1.159889938272370
    C                1.210704416863942     0.111309111455542     2.579889938272371
    H                1.105704416863941     1.524309111455542     0.888889938272371
    H                2.723704416863942     0.875309111455542     1.214889938272370
    H                1.510704416863942    -0.146690888544458     0.405889938272371
    H                1.421704416863942     0.885309111455542     3.311889938272371
    H                0.128360416863942    -0.075054888544457     2.518249938272371
    H                1.747364416863941    -0.811483888544458     2.845309938272371

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-105ILE-135LEU-1-dimer.npy', np.array(charges))