import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.379053012148967     0.119512479908117     1.207978410654025
    C               -2.891053012148967     0.320512479908117     1.463978410654025
    H               -1.227053012148967    -0.390487520091883     0.257978410654025
    H               -0.890053012148967     1.090512479908117     1.169978410654025
    H               -0.924053012148967    -0.462487520091883     2.008978410654025
    H               -3.296053012148967     0.930512479908117     0.656978410654025
    H               -3.423283012148967    -0.641627520091883     1.495958410654025
    H               -3.059763012148967     0.895972479908117     2.386138410654024
    C                1.702946987851033    -0.359487520091883    -0.731021589345975
    C                2.572946987851033    -0.085487520091883    -1.937021589345975
    H                1.586946987851033     0.542512479908117    -0.130021589345975
    H                0.718946987851033    -0.686487520091883    -1.067021589345975
    H                2.127946987851033    -1.156487520091883    -0.124021589345975
    H                2.728946987851033    -1.014487520091883    -2.485021589345976
    H                3.538096987851033     0.332822479908117    -1.615301589345975
    H                2.050456987851033     0.618672479908117    -2.601221589345975

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-019VAL-075LEU-1-dimer.npy', np.array(charges))