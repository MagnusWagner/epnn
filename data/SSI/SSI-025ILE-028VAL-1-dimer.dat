import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.555522825109704     0.597280919677870    -1.966060632791567
    C               -0.625477174890296     1.582280919677870    -1.988060632791567
    H                0.933522825109704     0.424280919677870    -2.975060632791567
    H                1.360522825109704     1.003280919677870    -1.351060632791567
    H                0.247522825109704    -0.362719080322130    -1.552060632791567
    H               -0.918477174890296     1.729280919677870    -0.950060632791567
    H               -1.477023174890296     1.134210919677870    -2.521070632791567
    H               -0.366480174890296     2.585890919677869    -2.356410632791567
    C               -0.124477174890296    -0.773719080322130     1.298939367208433
    C                0.194522825109704    -1.407719080322130     2.646939367208433
    H               -1.079477174890296    -1.133719080322130     0.913939367208433
    H               -0.187477174890296     0.311280919677870     1.395939367208433
    H                0.670522825109704    -1.002719080322130     0.588939367208433
    H               -0.665477174890296    -1.298719080322130     3.304939367208433
    H                0.425449825109704    -2.473149080322130     2.500179367208433
    H                1.055783825109704    -0.894859080322130     3.099929367208433

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-025ILE-028VAL-1-dimer.npy', np.array(charges))