import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.599865231955728    -1.564744817343183     0.645068650460869
    C                1.583865231955728    -2.232744817343183    -0.292931349539131
    H                0.444865231955728    -2.171744817343183     1.532068650460869
    H                0.989865231955728    -0.597744817343183     0.962068650460869
    H               -0.357134768044272    -1.425744817343183     0.149068650460869
    H                2.357865231955728    -2.706744817343183     0.309068650460869
    H                1.055695231955728    -3.002424817343183    -0.874849749539131
    H                2.089565231955728    -1.500124817343183    -0.939104049539131
    C               -1.402134768044272     1.299255182656817     0.165068650460869
    C               -0.787134768044272     2.504255182656816    -0.514931349539131
    H               -2.471134768044272     1.409255182656817     0.275068650460869
    H               -1.232134768044272     0.432255182656817    -0.467931349539131
    H               -0.946134768044272     1.143255182656817     1.143068650460868
    H               -1.199134768044272     2.578255182656817    -1.522931349539131
    H                0.282865231955728     2.313255182656817    -0.603931349539131
    H               -0.949094768044272     3.456565182656817     0.011252650460869

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-162LEU-208ILE-1-dimer.npy', np.array(charges))