import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.056496726595012    -1.746316045509932    -2.621459807524874
    N                0.327496726595013    -1.946316045509932    -1.331459807524874
    H               -0.568503273404987    -2.418316045509932    -1.440459807524874
    H                0.891496726595013    -2.480316045509932    -0.679459807524874
    H                0.162496726595013    -1.039316045509932    -0.878459807524874
    H                1.495496726595012    -2.690316045509932    -2.961459807524874
    H                1.879496726595012    -1.039316045509932    -2.470459807524874
    H                0.403676726595013    -1.364846045509932    -3.420395807524874
    C               -0.389503273404987     2.399683954490068     1.388540192475126
    C               -0.366503273404987     0.926683954490068     1.032540192475126
    O                0.248496726595013     0.576683954490068     0.000540192475126
    O               -0.959503273404987     0.114683954490068     1.782540192475126
    H               -0.307503273404987     3.015683954490068     0.490540192475126
    H                0.493496726595013     2.594683954490068     1.998540192475126
    H               -1.294203273404988     2.678937954490068     1.948487192475126

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-007LYS-011ASP-1-dimer.npy', np.array(charges))