import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                0.370324515506575    -2.066735087437935    -1.243430927073616
    C                1.503324515506575    -1.413735087437935    -0.480430927073616
    O                2.025324515506575    -0.365735087437935    -0.931430927073616
    O                1.857324515506575    -1.955735087437935     0.587569072926384
    H               -0.539675484493425    -1.782735087437935    -0.716430927073616
    H                0.482324515506575    -3.154735087437935    -1.222430927073616
    H                0.321064515506575    -1.727720087437935    -2.288730927073615
    C               -2.749675484493425     2.065264912562065     0.530569072926384
    C               -1.385675484493425     1.410264912562065     0.567569072926384
    O               -1.002675484493425     0.805264912562065     1.564569072926384
    N               -0.649675484493425     1.512264912562065    -0.524430927073616
    H                0.242324515506575     1.040264912562065    -0.553430927073616
    H               -0.995675484493425     2.031264912562065    -1.328430927073616
    H               -2.941675484493425     2.367264912562065    -0.494430927073616
    H               -2.765675484493425     2.962264912562065     1.143569072926384
    H               -3.553765484493425     1.374293912562065     0.823819072926384

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-114GLU-144ASN-1-dimer.npy', np.array(charges))