import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.209684285832228    -2.347246585853457     1.795422265278100
    C               -0.273684285832228    -3.530246585853457     2.037422265278100
    H               -2.227684285832228    -2.609246585853457     2.084422265278100
    H               -0.881684285832228    -1.509246585853458     2.397422265278100
    H               -1.186684285832228    -2.035246585853458     0.754422265278100
    H                0.743315714167772    -3.257246585853458     1.749422265278100
    H               -0.602344285832228    -4.403584585853458     1.454962265278100
    H               -0.310754285832228    -3.776878585853458     3.108772265278100
    C               -0.548684285832228     0.275753414146542    -0.754577734721900
    C                1.587315714167772     1.852753414146542    -0.237577734721900
    S                0.197315714167772     1.789753414146542    -1.367577734721900
    H               -1.063684285832228     0.440753414146542     0.190422265278100
    H               -1.282684285832228    -0.068246585853458    -1.479577734721900
    H                0.209315714167772    -0.502246585853458    -0.655577734721900
    H                2.019315714167772     2.853753414146543    -0.250577734721900
    H                2.340315714167772     1.143753414146542    -0.576577734721900
    H                1.279055714167772     1.584385414146543     0.783672265278100

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-008ILE-032MET-1-dimer.npy', np.array(charges))