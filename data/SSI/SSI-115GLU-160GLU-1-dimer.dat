import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -2 1
    --
    -2 1
    C               -0.432544574594736     1.269356782575298    -2.328860074435638
    C               -0.496544574594736    -0.239643217424702    -2.104860074435638
    O               -0.014544574594736    -0.980643217424702    -2.981860074435638
    O               -1.022544574594736    -0.685643217424702    -1.059860074435638
    H               -0.377544574594736     1.501356782575299    -3.395860074435638
    H                0.487455425405264     1.655356782575298    -1.880860074435638
    H               -1.281864574594736     1.811536782575298    -1.887620074435638
    C                0.981455425405264    -0.726643217424702     1.397139925564362
    C                0.162455425405264    -1.806643217424702     2.103139925564362
    C                0.429455425405264     0.678356782575298     1.618139925564362
    O               -0.518544574594736     0.845356782575298     2.419139925564362
    O                0.961455425405264     1.625356782575298     0.994139925564362
    H                1.997455425405264    -0.772643217424702     1.797139925564362
    H                1.068455425405264    -0.933643217424702     0.331139925564362
    H               -0.904544574594736    -1.622643217424702     1.970139925564362
    H                0.389455425405264    -1.766643217424702     3.169139925564362
    H                0.379875425405264    -2.813813217424702     1.717982925564362

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-115GLU-160GLU-1-dimer.npy', np.array(charges))