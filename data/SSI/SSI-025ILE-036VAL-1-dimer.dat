import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.260648057762763     1.526288617960297     0.365639075744394
    C                2.192648057762763     1.552288617960297     1.577639075744394
    H                0.202648057762763     1.599288617960297     0.559639075744394
    H                1.541648057762763     2.339288617960297    -0.304360924255606
    H                1.420648057762763     0.589288617960297    -0.168360924255606
    H                2.225648057762763     2.558288617960297     1.996639075744394
    H                3.190648057762763     1.282288617960297     1.232639075744394
    H                1.837898057762763     0.846368617960297     2.343038075744394
    C               -1.441351942237237    -0.920711382039703    -0.609360924255606
    C               -2.021351942237237    -2.153711382039703    -1.323360924255606
    H               -2.248351942237237    -0.310711382039703    -0.199360924255606
    H               -0.796351942237237    -1.246711382039703     0.207639075744394
    H               -0.843351942237237    -0.319711382039703    -1.295360924255606
    H               -1.198351942237237    -2.714711382039703    -1.758360924255606
    H               -2.701977142237237    -1.847001382039703    -2.131240924255606
    H               -2.518736742237237    -2.825431382039703    -0.608240924255606

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-025ILE-036VAL-1-dimer.npy', np.array(charges))