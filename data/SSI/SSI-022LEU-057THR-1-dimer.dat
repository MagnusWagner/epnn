import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.970955176829864     0.542302100751533     1.034662799796899
    C                1.958955176829864     1.153302100751533     2.020662799796899
    H                1.500955176829864     0.026302100751533     0.235662799796899
    H                0.346955176829864    -0.188697899248467     1.547662799796899
    H                0.332955176829864     1.319302100751532     0.611662799796899
    H                2.616955176829864     0.362302100751533     2.377662799796900
    H                2.561665176829864     1.951453100751533     1.562742799796899
    H                1.441215176829864     1.566624100751532     2.898792799796900
    C               -1.360044823170136    -1.385697899248468    -1.005337200203101
    C               -1.574044823170136    -0.303697899248467    -2.053337200203101
    H               -1.901044823170136    -2.294697899248467    -1.272337200203101
    H               -0.295044823170136    -1.614697899248468    -0.934337200203101
    H               -1.697044823170136    -1.038697899248467    -0.027337200203101
    H               -1.079044823170136     0.618302100751532    -1.744337200203101
    H               -2.646484823170136    -0.123998899248468    -2.219377200203101
    H               -1.132274823170136    -0.657417499248467    -2.996587200203101

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-022LEU-057THR-1-dimer.npy', np.array(charges))