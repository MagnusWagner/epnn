import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.931328618344531    -0.600308133468734     0.807502186202149
    C               -1.514328618344530    -2.023308133468734     0.410502186202149
    H               -1.065328618344530     0.062691866531266     0.826502186202149
    H               -2.665328618344530    -0.196308133468734     0.115502186202149
    H               -2.398328618344530    -0.596308133468734     1.793502186202149
    H               -2.372328618344530    -2.682308133468734     0.544502186202149
    H               -0.686198618344530    -2.363838133468734     1.049443986202149
    H               -1.203238618344530    -2.061298133468734    -0.643907813797851
    C                1.154671381655470     0.885691866531266    -0.889497813797851
    C                2.297671381655469     1.735691866531266    -0.330497813797851
    H                1.085671381655470    -0.025308133468734    -0.297497813797851
    H                0.209671381655469     1.426691866531266    -0.838497813797851
    H                1.311671381655470     0.629691866531266    -1.937497813797851
    H                2.376671381655469     2.637691866531266    -0.933497813797851
    H                3.244641381655470     1.177091866531266    -0.365543813797851
    H                2.082821381655469     2.018091866531266     0.710699686202149

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-011ILE-024ILE-1-dimer.npy', np.array(charges))