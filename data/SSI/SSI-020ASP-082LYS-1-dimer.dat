import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -2.531137604050418    -0.755155782307211     1.319137705099205
    C               -1.717137604050418    -0.896155782307211     0.054137705099205
    O               -0.477137604050418    -0.946155782307211     0.119137705099205
    O               -2.322137604050418    -0.938155782307211    -1.033862294900795
    H               -3.552137604050418    -1.104155782307211     1.148137705099205
    H               -2.579137604050418     0.311844217692789     1.543137705099205
    H               -2.108877604050418    -1.298672382307211     2.177207705099205
    C                1.689862395949582     0.968844217692789    -0.089862294900795
    C                2.724862395949582     0.489844217692789     0.927137705099205
    N                2.311862395949582     1.828844217692789    -1.138862294900795
    H                1.252862395949582     0.091844217692789    -0.568862294900795
    H                0.896862395949582     1.513844217692789     0.430137705099205
    H                3.285862395949582     1.356844217692789     1.283137705099205
    H                3.420862395949582    -0.166155782307211     0.400137705099205
    H                3.037862395949582     1.333844217692789    -1.639862294900795
    H                1.621862395949582     2.122844217692789    -1.818862294900795
    H                2.719862395949582     2.664844217692789    -0.739862294900795
    H                2.326932395949582    -0.038605182307211     1.805997705099205

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-020ASP-082LYS-1-dimer.npy', np.array(charges))