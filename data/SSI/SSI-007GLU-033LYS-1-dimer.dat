import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                1.336150686744666     1.387729249511523    -1.334642214792838
    C                1.671150686744666     0.617729249511523    -0.022642214792838
    O                1.932150686744667    -0.607270750488477    -0.026642214792838
    O                1.539150686744666     1.241729249511523     1.062357785207162
    H                1.719150686744666     2.407729249511523    -1.255642214792838
    H                0.248150686744666     1.457729249511523    -1.408642214792838
    H                1.705360686744666     0.958569249511523    -2.277772214792838
    C               -1.903849313255334    -0.402270750488477    -0.069642214792838
    C               -3.206849313255334    -0.441270750488477     0.680357785207162
    C               -1.354849313255334    -1.778270750488477    -0.303642214792838
    H               -2.049849313255334     0.078729249511523    -1.037642214792838
    H               -1.184849313255333     0.186729249511523     0.500357785207162
    H               -3.021849313255334    -0.877270750488477     1.659357785207162
    H               -3.907849313255334    -1.097270750488477     0.158357785207162
    H               -2.071849313255334    -2.288270750488477    -0.949642214792838
    H               -0.389849313255334    -1.718270750488477    -0.807642214792838
    H               -3.684229313255334     0.532149249511523     0.866287785207162
    H               -1.277659313255334    -2.371050750488477     0.619747785207162

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-007GLU-033LYS-1-dimer.npy', np.array(charges))