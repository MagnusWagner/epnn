import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.165453094840936    -1.771512972008700    -0.998125895803226
    C                1.250453094840936    -2.576512972008700    -0.278125895803226
    H                0.061453094840936    -2.129512972008700    -2.024125895803226
    H               -0.788546905159064    -1.870512972008700    -0.478125895803226
    H                0.438453094840936    -0.717512972008700    -1.031125895803226
    H                1.272453094840936    -2.295512972008700     0.776874104196774
    H                2.198613094840936    -2.321326972008700    -0.773985895803226
    H                1.033203094840936    -3.653316972008700    -0.335525895803226
    C               -0.992546905159064     1.572487027991300     0.258874104196774
    C               -0.422546905159064     2.778487027991300     1.017874104196774
    H               -1.016546905159064     1.753487027991300    -0.813125895803226
    H               -0.351546905159064     0.717487027991300     0.455874104196774
    H               -1.995546905159063     1.334487027991300     0.614874104196774
    H                0.508453094840936     3.106487027991300     0.553874104196774
    H               -0.209546905159064     2.446487027991300     2.032874104196774
    H               -1.160566905159063     3.594158027991300     1.015734104196774

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-009ALA-091ILE-1-dimer.npy', np.array(charges))