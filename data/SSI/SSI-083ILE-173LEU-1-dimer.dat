import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.423609399045522    -0.974376899180321    -1.029419835397219
    C               -1.521609399045522    -0.676376899180321    -2.518419835397219
    H               -0.390609399045522    -1.193376899180321    -0.752419835397219
    H               -1.764609399045522    -0.121376899180321    -0.445419835397219
    H               -2.062609399045522    -1.817376899180321    -0.758419835397219
    H               -2.578609399045522    -0.631376899180321    -2.786419835397219
    H               -1.050459399045522    -1.491223899180321    -3.087669835397219
    H               -1.049929399045522     0.282015100819679    -2.781099835397219
    C                1.138390600954478     0.530623100819679     1.155580164602781
    C                1.805390600954478     1.121623100819679     2.392580164602781
    H                1.128390600954478     1.251623100819679     0.337580164602781
    H                1.700390600954478    -0.343376899180321     0.824580164602781
    H                0.119390600954478     0.219623100819679     1.391580164602781
    H                2.779390600954478     1.501623100819679     2.094580164602780
    H                1.194900600954478     1.950346100819679     2.780550164602781
    H                1.991480600954478     0.375108100819679     3.178760164602781

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-083ILE-173LEU-1-dimer.npy', np.array(charges))