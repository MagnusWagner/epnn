import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.121806419502110    -0.560697118676522     1.204783063939967
    C                0.489806419502110    -1.872697118676522     1.660783063939968
    H                1.946806419502110    -0.310697118676522     1.867783063939967
    H                1.517806419502110    -0.666697118676522     0.195783063939968
    H                0.415806419502109     0.265302881323478     1.174783063939968
    H               -0.238193580497890    -2.180697118676522     0.908783063939968
    H               -0.037383580497890    -1.752687118676522     2.618731063939967
    H                1.264926419502109    -2.649247118676522     1.739222063939968
    C               -1.365193580497891     1.200302881323478    -0.902216936060032
    C               -0.251193580497890     1.234302881323478    -1.960216936060032
    H               -2.330193580497890     1.410302881323478    -1.365216936060032
    H               -1.413193580497891     0.220302881323478    -0.432216936060032
    H               -1.173193580497891     1.923302881323478    -0.108216936060032
    H                0.701806419502109     1.085302881323478    -1.450216936060032
    H               -0.218503580497890     2.203712881323478    -2.479036936060032
    H               -0.379643580497890     0.437372881323478    -2.707475936060032

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-082ILE-135ILE-1-dimer.npy', np.array(charges))