import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.133811213556517    -0.630919958071320     0.698677680807914
    C               -2.609811213556517    -0.773919958071320     1.063677680807914
    H               -0.810811213556517     0.399080041928680     0.730677680807914
    H               -0.533811213556517    -1.194919958071320     1.407677680807914
    H               -0.951811213556517    -1.009919958071320    -0.303322319192086
    H               -2.737811213556517    -0.451919958071320     2.098677680807914
    H               -3.233611213556517    -0.143719958071320     0.412777680807914
    H               -2.911411213556517    -1.829119958071320     0.988077680807914
    C                1.500188786443483     1.368080041928680    -0.957322319192086
    C                2.243188786443483     0.041080041928680    -0.812322319192086
    H                0.449188786443483     1.177080041928680    -1.177322319192086
    H                1.566188786443483     1.934080041928680    -0.029322319192086
    H                1.796188786443483    -0.509919958071320     0.016677680807914
    H                3.304588786443483     0.220580041928680    -0.586022319192086
    H                2.120788786443483    -0.570419958071320    -1.718422319192086
    H                1.945238786443484     1.927680041928680    -1.753362319192086

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-219VAL-272ALA-1-dimer.npy', np.array(charges))