import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                1.427010453613522     0.327556153831675    -2.202574030344406
    C                1.071010453613521     1.431556153831675    -3.191574030344406
    H                0.908010453613521    -0.596443846168325    -2.460574030344406
    H                2.503010453613522     0.151556153831675    -2.209574030344406
    H                1.134010453613521     0.674556153831675    -1.225574030344406
    H                1.622010453613521     2.334556153831675    -2.922574030344407
    H               -0.005879546386479     1.649666153831675    -3.139324030344406
    H                1.383050453613522     1.133966153831675    -4.203534030344406
    C               -0.735989546386479    -1.112443846168325     0.354425969655594
    C               -2.201989546386478    -0.742443846168325     0.149425969655594
    C               -0.053989546386479    -0.226443846168325     1.394425969655594
    O               -0.554989546386479    -0.151443846168325     2.537425969655594
    O                0.988010453613521     0.384556153831675     1.074425969655594
    H               -0.682989546386479    -2.149443846168325     0.690425969655594
    H               -0.217989546386479    -1.057443846168325    -0.596574030344406
    H               -2.706989546386478    -0.992443846168325     1.065425969655594
    H               -2.635589546386479    -1.349483846168325    -0.658964030344406
    H               -2.291659546386479     0.337906153831675    -0.037144030344406

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-127ALA-177ASP-1-dimer.npy', np.array(charges))