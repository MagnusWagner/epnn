import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.659910779145022    -0.000513041965200    -0.192068232854059
    C               -2.812910779145022     1.005486958034800    -0.207068232854059
    H               -0.870910779145022     0.317486958034800    -0.878068232854059
    H               -1.235910779145022    -0.074513041965200     0.808931767145941
    H               -2.002910779145022    -0.999513041965200    -0.467068232854059
    H               -3.643910779145022     0.586486958034800     0.359931767145941
    H               -3.149270779145022     1.196466958034801    -1.236818232854059
    H               -2.490390779145022     1.944386958034801     0.266681767145941
    C                2.094089220854978     0.239486958034800     0.085931767145941
    C                2.379089220854978    -1.242513041965200     0.303931767145941
    H                1.681089220854978     0.398486958034800    -0.911068232854059
    H                1.375089220854978     0.587486958034800     0.828931767145941
    H                3.003089220854978     0.829486958034801     0.200931767145941
    H                2.836089220854978    -1.358513041965200     1.283931767145941
    H                3.052779220854978    -1.634544041965199    -0.472248232854059
    H                1.440919220854978    -1.816398041965200     0.326341767145941

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-142ILE-155LEU-2-dimer.npy', np.array(charges))