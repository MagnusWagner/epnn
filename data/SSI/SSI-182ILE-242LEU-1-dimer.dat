import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.943799703015760     1.359825857370718    -0.281356531700386
    C               -1.784799703015760     2.633825857370718    -0.166356531700386
    H               -0.305799703015760     1.403825857370718    -1.166356531700386
    H               -0.308799703015760     1.248825857370718     0.597643468299614
    H               -1.572799703015760     0.469825857370718    -0.335356531700386
    H               -2.480799703015760     2.519825857370719     0.665643468299614
    H               -2.367269703015760     2.795663857370719    -1.085336531700386
    H               -1.134989703015760     3.496657857370718     0.041643468299614
    C                0.757200296984240    -2.051174142629282    -0.234356531700386
    C                1.973200296984240    -1.941174142629282     0.674643468299614
    H                0.176200296984240    -2.939174142629282     0.014643468299614
    H                0.118200296984240    -1.184174142629282    -0.086356531700386
    H                1.067200296984240    -2.094174142629281    -1.279356531700386
    H                1.634200296984240    -1.961174142629282     1.709643468299614
    H                2.658310296984240    -2.784443142629282     0.502823468299614
    H                2.494900296984240    -0.987005142629282     0.509143468299614

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-182ILE-242LEU-1-dimer.npy', np.array(charges))