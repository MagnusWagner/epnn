import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.046800588906742     0.326558196296335    -0.817230030363721
    C                0.917800588906742     0.322558196296335    -2.069230030363721
    S               -1.414199411093258     1.396558196296335    -0.952230030363721
    H               -0.282199411093258    -0.696441803703665    -0.628230030363721
    H                0.653800588906742     0.660558196296335     0.026769969636279
    H                0.330800588906742    -0.061441803703665    -2.908230030363721
    H               -1.778199411093258     1.373558196296335     0.335769969636279
    H                1.816152588906742    -0.291231803703665    -1.907269030363721
    H                1.262716588906742     1.342058196296334    -2.296511030363721
    C                1.607800588906742    -1.345441803703666     2.183769969636279
    C                0.498800588906742    -2.306441803703665     2.640769969636279
    H                2.060800588906742    -1.701441803703665     1.256769969636279
    H                1.186800588906742    -0.355441803703665     2.013769969636279
    H                2.373800588906742    -1.240441803703665     2.953769969636279
    H                0.121800588906742    -1.943441803703665     3.595769969636279
    H                0.877322588906742    -3.330591803703665     2.774319969636279
    H               -0.328053411093258    -2.306441803703665     1.915299969636279

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-011CYS-042VAL-2-dimer.npy', np.array(charges))