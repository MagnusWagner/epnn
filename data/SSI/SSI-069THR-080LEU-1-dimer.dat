import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.443962821926630    -0.221828381147717    -0.977502683333984
    C                2.756962821926630    -0.911828381147717    -0.987502683333985
    H                1.573962821926630     0.861171618852283    -0.962502683333984
    H                0.894962821926630    -0.486828381147717    -1.881502683333985
    H                0.842962821926630    -0.525828381147717    -0.121502683333984
    H                2.582962821926630    -1.985828381147717    -1.056502683333985
    H                3.279312821926630    -0.702888381147717    -0.042252683333984
    H                3.371102821926630    -0.620228381147717    -1.852252683333985
    C               -1.994037178073370     0.637171618852283     0.212497316666016
    C               -2.206037178073370     0.498171618852283     1.752497316666016
    H               -2.923037178073370     0.939171618852283    -0.271502683333984
    H               -1.249037178073370     1.410171618852283     0.019497316666016
    H               -1.649037178073370    -0.306828381147717    -0.209502683333984
    H               -2.679037178073370     1.403171618852283     2.127497316666016
    H               -2.820497178073370    -0.380948381147717     1.996577316666015
    H               -1.234757178073370     0.375611618852283     2.254077316666016

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-069THR-080LEU-1-dimer.npy', np.array(charges))