import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.508168681609992     2.549310483863281     1.962688439926229
    O                1.429168681609992     2.034310483863280     0.636688439926229
    H                0.986168681609991     1.164310483863280     0.640688439926229
    H                2.192168681609991     3.399310483863280     1.970688439926229
    H                0.513978681609991     2.886456883863280     2.291208439926228
    H                1.893378681609992     1.769472483863280     2.636088439926228
    C               -2.001831318390009     0.687310483863280    -1.115311560073771
    C               -1.045831318390009    -0.403689516136720    -0.731311560073771
    C                0.665168681609991    -1.352689516136720     0.278688439926229
    C               -1.022831318390009    -1.715689516136720    -1.089311560073771
    N                0.012168681609991    -0.202689516136720     0.130688439926229
    N                0.057168681609991    -2.285689516136720    -0.449311560073771
    H                1.542168681609992    -1.508689516136720     0.896688439926229
    H               -2.122831318390009     1.365310483863280    -0.278311560073771
    H               -2.965831318390009     0.232310483863280    -1.306311560073771
    H                0.341168681609991    -3.257689516136719    -0.501311560073771
    H               -1.729831318390009    -2.209689516136719    -1.744311560073771
    H               -1.706761318390009     1.250757483863280    -2.012781560073771

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-091THR-094HIE-2-dimer.npy', np.array(charges))