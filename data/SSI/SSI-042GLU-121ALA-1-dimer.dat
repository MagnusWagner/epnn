import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                0.103416542508080    -0.953041434367450    -0.462090969537081
    C                0.437416542508080    -2.427041434367450    -0.664090969537081
    C                1.290416542508080    -0.131041434367450    -0.016090969537081
    O                2.351416542508080    -0.698041434367450     0.305909030462919
    O                1.123416542508080     1.119958565632550    -0.000090969537081
    H               -0.278583457491920    -0.553041434367450    -1.404090969537081
    H               -0.678583457491920    -0.864041434367451     0.287909030462919
    H                0.787416542508080    -2.858041434367451     0.273909030462919
    H                1.231416542508080    -2.495041434367451    -1.408090969537081
    H               -0.435162457491920    -2.996302434367450    -1.017000969537081
    C               -2.995583457491920     0.855958565632550     0.387909030462919
    C               -2.206583457491920     2.155958565632550     0.415909030462919
    H               -4.021583457491920     1.041958565632550     0.064909030462919
    H               -2.543583457491920     0.157958565632550    -0.315090969537081
    H               -3.002583457491920     0.415958565632550     1.385909030462919
    H               -1.238583457491920     1.965958565632550     0.882909030462919
    H               -2.785581457491920     2.870878565632550     1.018939030462919
    H               -2.045776457491920     2.561598565632550    -0.593840969537081

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-042GLU-121ALA-1-dimer.npy', np.array(charges))