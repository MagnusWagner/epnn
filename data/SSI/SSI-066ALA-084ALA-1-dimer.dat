import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.147300452425204    -1.257060150519455    -0.961438596698991
    C               -1.082300452425204    -1.296060150519455    -2.473438596698990
    H               -1.924300452425204    -1.932060150519455    -0.595438596698991
    H               -0.186300452425204    -1.560060150519455    -0.539438596698991
    H               -1.373300452425204    -0.243060150519456    -0.628438596698991
    H               -0.313300452425204    -0.604060150519455    -2.811438596698990
    H               -2.043603452425204    -0.965281050519455    -2.893535596698991
    H               -0.801270452425204    -2.302724150519455    -2.816439396698990
    C                0.660699547574796     0.791939849480545     1.351561403301009
    C                1.566699547574796     1.757939849480544     2.086561403301009
    H                0.175699547574796     0.122939849480545     2.063561403301009
    H               -0.097300452425204     1.346939849480544     0.795561403301009
    H                1.247699547574796     0.192939849480544     0.656561403301009
    H                2.067699547574796     2.364939849480545     1.336561403301009
    H                2.311419547574796     1.196943849480545     2.670238403301010
    H                0.963074547574796     2.421127849480544     2.723600403301009

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-066ALA-084ALA-1-dimer.npy', np.array(charges))