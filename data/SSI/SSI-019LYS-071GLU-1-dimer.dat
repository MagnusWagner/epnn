import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -2.061793279245814     1.216971452189944    -1.880625640054646
    N               -0.941793279245814     1.735971452189944    -1.071625640054646
    H               -0.268793279245814     1.007971452189944    -0.834625640054646
    H               -0.446793279245814     2.475971452189944    -1.552625640054646
    H               -1.262793279245814     2.106971452189944    -0.187625640054646
    H               -1.723793279245814     1.028971452189944    -2.905625640054646
    H               -2.861793279245813     1.963971452189944    -1.927625640054646
    H               -2.467607279245813     0.277301452189944    -1.477705640054646
    C                1.432206720754186    -1.171028547810056     2.026374359945354
    C                0.753206720754186    -0.798028547810056     0.720374359945354
    O                0.586206720754186     0.409971452189944     0.493374359945354
    O                0.411206720754186    -1.688028547810056    -0.087625640054646
    H                1.326206720754187    -0.349028547810056     2.723374359945354
    H                2.494206720754187    -1.318028547810056     1.825374359945354
    H                0.995166720754186    -2.075648547810056     2.474321359945354

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-019LYS-071GLU-1-dimer.npy', np.array(charges))