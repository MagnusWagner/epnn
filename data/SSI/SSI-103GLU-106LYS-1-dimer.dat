import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.473559565367998     1.911749441509382     0.125607393514527
    C                0.809559565367998     0.745749441509382    -0.621392606485473
    O                0.831559565367998    -0.348250558490618    -0.021392606485473
    O                0.280559565367998     0.925749441509382    -1.767392606485473
    H                2.555559565367998     1.830749441509381     0.003607393514527
    H                1.262559565367998     1.879749441509381     1.194607393514526
    H                1.147569565367998     2.854299441509382    -0.338442606485473
    C               -2.145440434632002    -1.102250558490618     1.414607393514526
    N               -1.053440434632002    -1.831250558490618     0.723607393514527
    H               -0.216440434632002    -1.273250558490619     0.698607393514526
    H               -0.813440434632002    -2.682250558490618     1.214607393514526
    H               -1.297440434632002    -2.073250558490618    -0.226392606485473
    H               -1.742440434632002    -0.627250558490618     2.314607393514526
    H               -2.914440434632002    -1.813250558490619     1.737607393514526
    H               -2.634070434632002    -0.334910558490619     0.796197393514526

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-103GLU-106LYS-1-dimer.npy', np.array(charges))