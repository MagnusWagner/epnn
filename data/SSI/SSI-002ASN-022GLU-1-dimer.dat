import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                1.642817613960011     0.934614346478915     1.220720198958157
    C                2.200817613960011     1.046614346478915    -0.189279801041843
    O                3.207817613960011     1.707614346478915    -0.454279801041843
    N                1.533817613960011     0.386614346478915    -1.116279801041843
    H                1.868817613960011     0.460614346478915    -2.070279801041843
    H                0.713817613960011    -0.162385653521085    -0.870279801041843
    H                1.334817613960011    -0.097385653521085     1.398720198958157
    H                0.734817613960011     1.527614346478915     1.277720198958157
    H                2.350347613960011     1.240826646478915     2.005340198958157
    C               -2.373182386039989     0.279614346478915     0.742720198958157
    C               -2.134182386039989    -1.084385653521085     0.113720198958157
    O               -0.991182386039989    -1.293385653521085    -0.353279801041843
    O               -3.047182386039989    -1.940385653521085     0.089720198958157
    H               -2.092182386039989     1.037614346478915     0.009720198958157
    H               -1.723182386039989     0.394614346478915     1.613720198958157
    H               -3.414352386039989     0.440074046478915     1.059280198958157

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-002ASN-022GLU-1-dimer.npy', np.array(charges))