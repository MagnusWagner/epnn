import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    1 1
    --
    1 1
    C                1.884334240686460     0.065038264464869     2.047863492579089
    C                0.837334240686460    -0.472961735535131     1.085863492579089
    O                0.670334240686460     0.006038264464869    -0.040136507420911
    N                0.229334240686460    -1.573961735535131     1.452863492579089
    H                2.653334240686461    -0.703961735535131     2.153863492579089
    H                1.426334240686460     0.210038264464869     3.028863492579089
    H               -0.417665759313540    -2.013961735535132     0.815863492579089
    H                0.415334240686460    -1.985961735535131     2.356863492579089
    H                2.360324240686460     0.992937264464869     1.697953492579089
    C               -1.645665759313540     1.640038264464869    -2.514136507420911
    N               -1.666665759313540     0.336038264464869    -1.742136507420911
    H               -2.570665759313540     0.170038264464869    -1.310136507420911
    H               -1.483665759313539    -0.447961735535131    -2.360136507420911
    H               -0.940665759313540     0.322038264464869    -1.024136507420911
    H               -2.305665759313539     1.597038264464869    -3.388136507420911
    H               -0.626665759313540     1.858038264464869    -2.855136507420911
    H               -1.990015759313539     2.435449264464868    -1.836826507420911

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-174ASN-178LYS-1-dimer.npy', np.array(charges))