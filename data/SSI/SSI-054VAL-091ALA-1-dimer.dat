import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.193804382547455    -0.303492657714428     2.122777772506737
    C                0.696195617452545    -1.552492657714427     2.153777772506738
    H                0.387195617452545     0.578507342285573     2.400777772506737
    H               -0.608804382547455    -0.157492657714428     1.130777772506737
    H               -1.026804382547455    -0.422492657714428     2.817777772506737
    H                1.635195617452545    -1.304492657714427     1.659777772506737
    H                0.902795617452545    -1.839442657714427     3.195399772506737
    H                0.227595617452545    -2.366642657714428     1.581439772506737
    C               -0.565804382547455     0.630507342285573    -1.509222227493263
    C                0.059195617452545     1.218507342285573    -2.767222227493262
    H               -0.859804382547455    -0.408492657714427    -1.669222227493263
    H                0.168195617452545     0.677507342285572    -0.704222227493263
    H               -1.439804382547455     1.217507342285573    -1.225222227493263
    H                0.427195617452545     2.218507342285573    -2.526222227493263
    H               -0.675384382547455     1.291216342285572    -3.582762227493263
    H                0.912645617452545     0.598808342285573    -3.079622227493263

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-054VAL-091ALA-1-dimer.npy', np.array(charges))