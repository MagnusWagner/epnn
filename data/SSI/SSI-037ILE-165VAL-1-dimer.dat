import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.173444022285962     0.414201761793393    -2.167476205990996
    C                1.317555977714038     0.706201761793393    -2.009476205990996
    H               -0.334444022285962    -0.392798238206607    -2.879476205990996
    H               -0.598444022285962     0.121201761793393    -1.213476205990996
    H               -0.691444022285962     1.307201761793393    -2.503476205990996
    H                1.821555977714038    -0.205798238206607    -1.699476205990996
    H                1.398555977714038     1.425201761793393    -1.195476205990996
    H                1.788315977714038     1.094471761793393    -2.924696205990997
    C               -0.537444022285962    -0.857798238206607     1.403523794009004
    C               -0.613444022285962    -0.258798238206607     2.760523794009004
    H                0.154555977714038    -0.274798238206607     0.798523794009004
    H               -0.162444022285962    -1.880798238206607     1.453523794009004
    H               -1.526444022285962    -0.853798238206607     0.950523794009004
    H                0.417555977714038    -0.160798238206607     3.100523794009004
    H               -1.080344022285962     0.735601761793393     2.816833794009003
    H               -1.106294022285962    -0.960219238206607     3.449803794009004

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-037ILE-165VAL-1-dimer.npy', np.array(charges))