import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.001093061844803     1.031236317401770    -1.456579395549350
    C                1.109093061844803     0.988236317401770    -2.512579395549350
    H                0.128093061844803     1.902236317401770    -0.812579395549350
    H               -0.970906938155197     1.090236317401770    -1.946579395549350
    H                0.018093061844803     0.126236317401770    -0.852579395549350
    H                1.001093061844803     0.065236317401770    -3.081579395549349
    H                2.101843061844803     0.998886317401770    -2.038979395549350
    H                0.986113061844803     1.828396317401770    -3.211879395549349
    C               -0.991906938155197    -1.305763682598230     1.436420604450650
    C               -0.111906938155197    -0.718763682598230     2.537420604450650
    H               -1.721906938155197    -1.999763682598230     1.852420604450650
    H               -1.533906938155197    -0.498763682598230     0.942420604450650
    H               -0.373906938155197    -1.823763682598230     0.701420604450650
    H               -0.748906938155197    -0.237763682598230     3.281420604450651
    H                0.496093061844803     0.059236317401770     2.076420604450650
    H                0.542333061844803    -1.450223682598230     3.034320604450650

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-055VAL-059ILE-1-dimer.npy', np.array(charges))