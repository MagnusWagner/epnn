import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.176566077099364    -0.275771458520486     1.149707692455474
    C               -1.832566077099363    -1.651771458520486     1.373707692455475
    H               -1.390566077099364     0.081228541479514     0.140707692455474
    H               -1.567566077099364     0.439228541479514     1.872707692455475
    H               -0.096566077099363    -0.362771458520486     1.276707692455474
    H               -2.913566077099363    -1.588771458520486     1.241707692455474
    H               -1.424386077099363    -2.347821458520486     0.626107692455474
    H               -1.604396077099363    -1.990161458520486     2.395197692455474
    C                1.747433922900636     0.244228541479514    -1.269292307544525
    C                1.261433922900637     1.680228541479514    -1.258292307544525
    H                2.457433922900637     0.104228541479514    -2.082292307544525
    H                2.233433922900637     0.018228541479514    -0.319292307544526
    H                0.898433922900637    -0.425771458520486    -1.406292307544525
    H                0.554433922900637     1.807228541479514    -0.443292307544526
    H                0.764903922900636     1.932068541479514    -2.206992307544525
    H                2.091553922900637     2.369828541479515    -1.045332307544526

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-175VAL-268LEU-1-dimer.npy', np.array(charges))