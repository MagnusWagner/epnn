import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.097894621898662     0.164540955122100    -1.505566723403695
    C               -0.228894621898662     0.049540955122100    -3.019566723403695
    O               -1.090894621898663    -0.586459044877900    -0.839566723403695
    H                0.883105378101337    -0.207459044877900    -1.205566723403695
    H               -0.170894621898662     1.212540955122100    -1.211566723403695
    H                0.634105378101338     0.576540955122100    -3.427566723403695
    H               -1.703894621898662     0.057540955122100    -0.426566723403695
    H               -1.158454621898662     0.518439955122100    -3.374611723403695
    H               -0.114594621898662    -0.998702044877900    -3.332809723403695
    C                0.977105378101338    -0.272459044877900     2.116433276596305
    C                0.559105378101338     0.650540955122100     3.262433276596305
    H                1.366105378101338    -1.214459044877900     2.503433276596305
    H                0.105105378101338    -0.501459044877900     1.505433276596305
    H                1.734105378101338     0.211540955122100     1.500433276596305
    H               -0.188894621898662     0.133540955122100     3.851433276596305
    H                1.419975378101338     0.893331955122100     3.902713276596305
    H                0.107145378101338     1.575339955122099     2.874521276596305

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-070SER-082VAL-1-dimer.npy', np.array(charges))