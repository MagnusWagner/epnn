import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.043992439609457     1.743973505601268    -2.207267824335653
    C               -0.280992439609457     0.752973505601268    -1.078267824335653
    O                0.702007560390543     0.191973505601268    -0.545267824335653
    O               -1.460992439609457     0.518973505601268    -0.732267824335653
    H               -0.598992439609457     2.664973505601268    -2.024267824335653
    H               -0.439992439609457     1.296973505601268    -3.121267824335653
    H                1.022557560390543     1.971648505601268    -2.350907824335653
    C                0.546007560390543    -1.023026494398732     2.747732175664347
    N                0.464007560390543    -1.880026494398732     1.533732175664347
    H                1.007007560390543    -2.730026494398732     1.624732175664347
    H               -0.493992439609457    -2.138026494398732     1.327732175664347
    H                0.793007560390543    -1.353026494398732     0.720732175664347
    H               -0.016992439609457    -1.484026494398732     3.562732175664347
    H                0.111007560390543    -0.040026494398732     2.536732175664347
    H                1.583267560390543    -0.899680494398732     3.092522175664346

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-147ASP-188LYS-1-dimer.npy', np.array(charges))