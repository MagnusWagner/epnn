import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.228586194717333     2.276886498995923    -0.647861722859971
    C               -1.739586194717333     3.582886498995923    -0.064861722859971
    H               -0.149586194717333     2.212886498995922    -0.500861722859971
    H               -1.443586194717333     2.222886498995923    -1.716861722859971
    H               -1.681586194717333     1.429886498995923    -0.130861722859971
    H               -1.578586194717333     3.546886498995923     1.010138277140030
    H               -2.802796194717333     3.760676498995922    -0.283903722859971
    H               -1.151146194717332     4.396786498995923    -0.513522722859971
    C                0.776413805282667    -0.563113501004077    -1.045861722859970
    C                1.646413805282667    -2.398113501004077     0.813138277140030
    S                0.215413805282667    -1.357113501004077     0.467138277140029
    H               -0.050586194717333    -0.025113501004077    -1.505861722859971
    H                1.137413805282667    -1.312113501004077    -1.747861722859971
    H                1.585413805282667     0.131886498995923    -0.818861722859970
    H                2.504413805282667    -1.773113501004077     1.063138277140029
    H                1.880413805282667    -2.987113501004077    -0.072861722859971
    H                1.409793805282668    -3.064092501004077     1.656040277140029

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-015THR-021MET-1-dimer.npy', np.array(charges))