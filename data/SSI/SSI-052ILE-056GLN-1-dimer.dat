import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.011479360149392    -1.888883505926596    -1.388932956616555
    C               -0.937520639850608    -3.049883505926596    -1.687932956616555
    H                0.730479360149392    -2.172883505926596    -0.618932956616555
    H                0.544479360149392    -1.591883505926596    -2.288932956616555
    H               -0.540520639850608    -1.008883505926596    -1.061932956616555
    H               -1.678520639850608    -2.718883505926596    -2.417932956616555
    H               -1.449171639850608    -3.378802505926596    -0.771402956616555
    H               -0.378486639850608    -3.908068505926596    -2.089182956616555
    C                0.527479360149392     0.577116494073404     2.034067043383445
    C                0.175479360149392     1.304116494073404     0.751067043383445
    O               -0.927520639850608     1.825116494073404     0.586067043383445
    N                1.108479360149392     1.332116494073404    -0.180932956616555
    H                1.533479360149392     0.858116494073404     2.344067043383445
    H                0.526479360149392    -0.490883505926596     1.828067043383445
    H                0.922479360149392     1.782116494073405    -1.061932956616555
    H                1.937479360149392     0.750116494073404    -0.024932956616555
    H               -0.173145639850608     0.810656494073404     2.849287043383445

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-052ILE-056GLN-1-dimer.npy', np.array(charges))