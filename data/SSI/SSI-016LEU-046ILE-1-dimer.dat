import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.376979751852957     1.640038466554701    -0.607167683451793
    C               -1.437979751852957     2.608038466554701    -1.086167683451792
    H                0.040020248147043     1.089038466554701    -1.454167683451792
    H                0.420020248147043     2.186038466554701    -0.103167683451792
    H               -0.824979751852957     0.941038466554701     0.096832316548208
    H               -1.817979751852957     3.135038466554701    -0.212167683451792
    H               -2.259114751852957     2.034248466554701    -1.540595683451792
    H               -1.007637751852957     3.353058466554701    -1.771554683451793
    C                1.262020248147043    -1.603961533445299     0.403832316548208
    C                0.555020248147043    -2.645961533445299     1.285832316548207
    H                2.248020248147044    -1.390961533445299     0.817832316548208
    H                1.365020248147043    -1.957961533445299    -0.620167683451793
    H                0.694020248147043    -0.679961533445299     0.344832316548208
    H               -0.449979751852957    -2.791961533445299     0.895832316548207
    H                0.485823248147043    -2.284281533445299     2.322364316548208
    H                1.081989248147043    -3.611351533445299     1.267834316548207

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-016LEU-046ILE-1-dimer.npy', np.array(charges))