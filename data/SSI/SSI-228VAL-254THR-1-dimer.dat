import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.363672968670664    -0.653549993398235     0.213701376064133
    C               -1.816672968670664    -1.893549993398235     0.985701376064133
    H               -1.294672968670664    -0.872549993398235    -0.852298623935867
    H               -2.095672968670664     0.142450006601765     0.358701376064133
    H               -0.404672968670664    -0.314549993398235     0.588701376064133
    H               -2.785672968670664    -2.188549993398235     0.579701376064133
    H               -1.122052968670664    -2.734259993398235     0.841761376064133
    H               -1.967762968670664    -1.723839993398235     2.061981376064133
    C                1.716327031329336     0.597450006601765    -0.900298623935867
    C                1.465327031329336     1.955450006601765    -0.295298623935867
    H                2.496327031329336     0.660450006601765    -1.659298623935867
    H                2.042327031329336    -0.086549993398235    -0.118298623935867
    H                0.818327031329336     0.190450006601765    -1.357298623935867
    H                0.746327031329336     1.894450006601765     0.522701376064133
    H                1.114947031329336     2.641820006601765    -1.080236623935867
    H                2.436677031329336     2.321620006601765     0.068571376064133

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-228VAL-254THR-1-dimer.npy', np.array(charges))