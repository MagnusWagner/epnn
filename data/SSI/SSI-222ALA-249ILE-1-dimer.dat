import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.892206898479817    -1.260522592723070     0.698208372376479
    C               -2.313206898479817    -1.057522592723070     1.210208372376479
    H               -0.289206898479817    -1.781522592723070     1.445208372376479
    H               -0.908206898479817    -1.846522592723070    -0.223791627623521
    H               -0.450206898479817    -0.287522592723070     0.494208372376479
    H               -2.881206898479817    -0.538522592723070     0.434208372376479
    H               -2.306421898479817    -0.441635592723070     2.121601372376479
    H               -2.803340898479818    -2.026978592723070     1.383196372376479
    C                2.079793101520182     0.830477407276930    -0.456791627623521
    C                1.131793101520183     1.492477407276930    -1.446791627623521
    H                2.169793101520183     1.430477407276930     0.448208372376479
    H                1.689793101520183    -0.146522592723070    -0.184791627623521
    H                3.061793101520183     0.692477407276930    -0.908791627623521
    H                0.208793101520183     1.763477407276930    -0.933791627623521
    H                0.878793101520183     0.744477407276930    -2.193791627623521
    H                1.556131101520183     2.379859407276930    -1.939224627623521

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-222ALA-249ILE-1-dimer.npy', np.array(charges))