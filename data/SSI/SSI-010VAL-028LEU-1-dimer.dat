import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.598656932408898     0.904501861094892    -1.111286544122758
    C                1.766656932408898    -0.536498138905108    -1.571286544122758
    H                0.544656932408898     1.176501861094892    -1.122286544122759
    H                1.984656932408898     1.015501861094892    -0.098286544122758
    H                2.144656932408898     1.574501861094892    -1.779286544122758
    H                1.250656932408898    -1.189498138905108    -0.871286544122759
    H                1.315506932408898    -0.676678138905108    -2.564666544122758
    H                2.832711932408898    -0.806418138905108    -1.545442544122758
    C               -1.544343067591102    -0.276498138905108     0.592713455877241
    C               -1.829343067591102    -0.097498138905108     2.083713455877242
    H               -1.776343067591102     0.638501861094892     0.050713455877242
    H               -0.487343067591102    -0.500498138905108     0.467713455877242
    H               -2.123343067591102    -1.100498138905108     0.181713455877241
    H               -1.177343067591102     0.706501861094892     2.424713455877241
    H               -2.860023067591102     0.232231861094892     2.281123455877242
    H               -1.548764067591102    -0.998798138905108     2.648459455877242

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-010VAL-028LEU-1-dimer.npy', np.array(charges))