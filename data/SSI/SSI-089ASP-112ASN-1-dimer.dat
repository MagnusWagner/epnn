import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C               -2.634898820511058     0.490072635233543     1.597125336065025
    C               -1.401898820511058    -0.348927364766457     1.921125336065024
    O               -0.686898820511058    -0.750927364766457     0.971125336065024
    O               -1.163898820511058    -0.609927364766457     3.127125336065024
    H               -3.039898820511058     0.920072635233543     2.515125336065025
    H               -3.398898820511058    -0.157927364766457     1.167125336065024
    H               -2.420607820511058     1.297622635233543     0.881625336065024
    C                2.525101179488943     1.029072635233543    -2.560874663934975
    C                1.435101179488942     0.234072635233543    -1.906874663934976
    O                1.272101179488942    -0.945927364766457    -2.188874663934976
    N                0.695101179488942     0.864072635233543    -1.013874663934976
    H                0.089101179488942     0.294072635233543    -0.421874663934976
    H                0.864101179488942     1.842072635233543    -0.826874663934976
    H                2.338101179488942     2.095072635233543    -2.425874663934975
    H                2.488101179488942     0.828072635233543    -3.630874663934975
    H                3.518361179488942     0.764872635233543    -2.168912663934975

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-089ASP-112ASN-1-dimer.npy', np.array(charges))