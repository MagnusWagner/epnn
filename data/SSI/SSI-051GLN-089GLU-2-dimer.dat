import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C               -0.865675094881754    -1.470347391101379    -1.267235366630312
    C               -1.106675094881754    -0.206347391101379    -2.016235366630312
    O               -1.557675094881754    -0.243347391101379    -3.171235366630313
    N               -0.785675094881754     0.912652608898621    -1.398235366630312
    H               -0.963675094881754     1.790652608898620    -1.858235366630313
    H               -0.427675094881754     0.881652608898621    -0.442235366630312
    H               -1.576675094881754    -2.207347391101379    -1.631235366630313
    H               -1.062675094881754    -1.333347391101379    -0.211235366630312
    H                0.178124905118246    -1.798169391101380    -1.381355366630312
    C                2.020324905118246     0.762652608898621     2.860764633369687
    C                1.034324905118246     0.197652608898621     1.889764633369687
    O                0.155324905118246     0.986652608898621     1.405764633369687
    O                1.100324905118246    -1.010347391101379     1.638764633369688
    H                1.543324905118246     0.705652608898621     3.841764633369687
    H                2.161324905118246     1.829652608898620     2.690764633369688
    H                2.970974905118246     0.218619608898621     2.962242633369687

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-051GLN-089GLU-2-dimer.npy', np.array(charges))