import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.312723735204503    -1.809398165070206    -0.724022750837001
    C                0.667276264795497    -2.741398165070206    -1.487022750837002
    H               -0.140723735204503    -0.774398165070206    -1.017022750837001
    H               -1.334723735204503    -2.073398165070206    -0.967022750837001
    H               -0.168723735204503    -1.913398165070206     0.351977249162999
    H                0.521276264795497    -2.578398165070206    -2.554022750837001
    H                1.684845764795497    -2.450664165070207    -1.186979350837001
    H                0.504959264795497    -3.806563165070206    -1.265490750837001
    C               -0.402723735204503     1.669601834929793     0.698977249162999
    C                0.055276264795497     2.876601834929794     1.510977249162998
    H                0.055276264795497     0.754601834929794     1.070977249162999
    H               -1.482723735204503     1.563601834929794     0.793977249162999
    H               -0.152723735204503     1.809601834929794    -0.352022750837001
    H               -0.046723735204503     2.627601834929794     2.567977249162999
    H               -0.610723735204503     3.711601834929794     1.288977249162999
    H                1.086109864795497     3.184494834929794     1.281665249162999

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-046LEU-068ILE-1-dimer.npy', np.array(charges))