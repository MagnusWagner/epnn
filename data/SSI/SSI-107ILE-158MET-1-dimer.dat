import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.680651509544504    -0.597222685351964    -2.218741685066574
    C                0.772651509544504    -1.180222685351964    -3.632741685066574
    H                1.532651509544504     0.054777314648037    -2.027741685066574
    H               -0.238348490455496    -0.022222685351963    -2.107741685066574
    H                0.657651509544504    -1.379222685351963    -1.462741685066574
    H               -0.087348490455496    -1.828222685351963    -3.807741685066574
    H                1.693481509544504    -1.772182685351963    -3.740691685066574
    H                0.766211509544504    -0.368472685351963    -4.375051685066574
    C                1.101651509544504     0.667777314648036     1.077258314933426
    C               -1.263348490455496     0.783777314648037     2.558258314933426
    S               -0.625348490455496     0.130777314648037     1.008258314933426
    H                1.513651509544504     0.484777314648037     2.066258314933426
    H                1.689651509544504     0.127777314648037     0.336258314933426
    H                1.159651509544504     1.736777314648037     0.867258314933426
    H               -0.667348490455496     0.407777314648036     3.391258314933426
    H               -2.280348490455496     0.406777314648037     2.671258314933426
    H               -1.280038490455496     1.883227314648037     2.588738314933426

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-107ILE-158MET-1-dimer.npy', np.array(charges))