import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.840722755734183     1.208944326440648    -0.895349445950290
    C               -1.500722755734183     2.587944326440648    -0.324349445950290
    H               -2.284722755734184     1.311944326440649    -1.888349445950291
    H               -0.928722755734184     0.624944326440648    -0.989349445950290
    H               -2.540722755734184     0.688944326440648    -0.239349445950290
    H               -0.750722755734183     3.051944326440648    -0.961349445950290
    H               -2.416092755734184     3.197944326440648    -0.325079445950290
    H               -1.097392755734183     2.503374326440648     0.695540554049710
    C                2.042277244265817    -0.143055673559352     0.151650554049710
    C                0.818277244265816    -1.030055673559352     0.275650554049710
    O                0.450277244265817    -1.748055673559352    -0.661349445950290
    N                0.133277244265817    -0.956055673559352     1.408650554049710
    H                2.516277244265816    -0.049055673559352     1.131650554049710
    H                1.709277244265817     0.845944326440648    -0.152349445950290
    H               -0.708722755734183    -1.503055673559352     1.492650554049710
    H                0.448277244265817    -0.371055673559352     2.167650554049710
    H                2.781127244265816    -0.516055673559352    -0.572909445950290

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-024LEU-261ASN-1-dimer.npy', np.array(charges))