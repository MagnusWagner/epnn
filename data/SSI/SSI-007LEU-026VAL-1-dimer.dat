import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.274361579254384    -0.816895930739563    -0.980277774911827
    C                1.788361579254384     0.059104069260437    -2.118277774911827
    H                0.280361579254384    -1.208895930739563    -1.184277774911827
    H                1.938361579254384    -1.675895930739563    -0.880277774911827
    H                1.310361579254384    -0.263895930739563    -0.042277774911827
    H                1.852361579254384    -0.562895930739563    -3.006277774911827
    H                1.087481579254384     0.889834069260437    -2.287579774911827
    H                2.795651579254384     0.438814069260437    -1.892033774911827
    C               -1.441638420745616     0.705104069260437     0.863722225088173
    C               -1.619638420745616     0.061104069260437     2.239722225088173
    H               -0.746638420745616     0.137104069260437     0.269722225088173
    H               -2.402638420745616     0.687104069260437     0.347722225088173
    H               -1.119638420745616     1.742104069260437     0.922722225088173
    H               -2.402638420745616     0.595104069260438     2.778722225088173
    H               -0.684638420745616     0.107284069260437     2.817342225088173
    H               -1.925608420745616    -0.985975930739563     2.098282225088173

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-007LEU-026VAL-1-dimer.npy', np.array(charges))