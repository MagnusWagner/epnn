import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.110199214563138    -1.640245815442039     0.521576871772351
    C               -0.517199214563138    -2.986245815442038     0.159576871772351
    H               -0.325199214563138    -0.962245815442038     0.852576871772351
    H               -1.612199214563138    -1.211245815442038    -0.347423128227649
    H               -1.838199214563138    -1.761245815442039     1.325576871772351
    H               -1.336199214563138    -3.650245815442038    -0.126423128227649
    H               -0.006735214563138    -3.413261815442039     1.035406871772351
    H                0.160151785436862    -2.904759815442039    -0.703303128227649
    C                0.422800785436862     1.664754184557962    -0.355423128227649
    C                1.211800785436862     2.964754184557962    -0.327423128227649
    H               -0.603199214563138     1.850754184557962    -0.678423128227649
    H                0.874800785436862     0.966754184557962    -1.058423128227649
    H                0.415800785436862     1.224754184557961     0.642576871772351
    H                2.179800785436862     2.774754184557962     0.139576871772351
    H                0.632802785436862     3.679674184557961     0.275606871772351
    H                1.372607785436862     3.370394184557962    -1.337173128227649

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-041ALA-121ALA-1-dimer.npy', np.array(charges))