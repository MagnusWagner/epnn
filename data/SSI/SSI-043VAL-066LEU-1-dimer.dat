import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.737551134751298    -0.808173410458735    -0.579806224466420
    C                2.644551134751298     0.407826589541265    -0.420806224466420
    H                2.171551134751298    -1.504173410458735    -1.298806224466420
    H                1.634551134751298    -1.304173410458735     0.382193775533580
    H                0.751551134751298    -0.516173410458735    -0.928806224466420
    H                2.205551134751298     1.059826589541265     0.330193775533580
    H                2.738381134751298     0.948576589541265    -1.374107224466420
    H                3.635991134751298     0.093796589541265    -0.062429224466420
    C               -2.053448865248702    -0.129173410458735    -0.180806224466420
    C               -2.322448865248702     0.528826589541265     1.178193775533580
    H               -1.858448865248702    -1.195173410458735    -0.070806224466420
    H               -2.941448865248702    -0.020173410458735    -0.801806224466420
    H               -1.219448865248702     0.366826589541265    -0.672806224466420
    H               -3.223448865248702     0.101826589541265     1.600193775533580
    H               -1.484708865248702     0.366476589541265     1.872339775533580
    H               -2.483948865248702     1.610796589541265     1.063044775533580

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-043VAL-066LEU-1-dimer.npy', np.array(charges))