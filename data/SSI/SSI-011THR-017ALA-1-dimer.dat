import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.407351982994181    -1.575410116462915    -0.426679599365796
    C                0.580351982994181    -3.036410116462915    -0.803679599365796
    H               -0.256648017005819    -1.045410116462915    -1.088679599365796
    H                0.010351982994181    -1.512410116462914     0.587320400634204
    H                1.377351982994181    -1.078410116462915    -0.433679599365796
    H                1.360351982994181    -3.471410116462914    -0.177679599365796
    H                0.874691982994181    -3.123070116462914    -1.860019599365796
    H               -0.348448017005819    -3.600460116462915    -0.632849599365797
    C               -0.631648017005819     1.710589883537085     0.162320400634204
    C               -0.361648017005819     2.904589883537085     1.061320400634204
    H               -1.297648017005819     1.992589883537086    -0.655679599365796
    H                0.308351982994181     1.344589883537086    -0.250679599365796
    H               -1.098648017005819     0.911589883537085     0.739320400634203
    H                0.309351982994181     2.585589883537085     1.860320400634204
    H               -1.309228017005819     3.252469883537085     1.498430400634204
    H                0.136751982994181     3.704339883537086     0.493870400634204

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-011THR-017ALA-1-dimer.npy', np.array(charges))