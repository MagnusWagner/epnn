import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.181521597497364     0.022057636089911    -1.686556047202477
    C               -2.153521597497364    -1.102942363910089    -1.458556047202477
    H               -0.499521597497364     0.098057636089911    -0.847556047202477
    H               -0.609521597497364    -0.167942363910089    -2.594556047202477
    H               -1.726521597497364     0.959057636089911    -1.795556047202477
    H               -1.627521597497364    -2.048942363910089    -1.483556047202478
    H               -2.807521597497364    -1.079942363910089    -2.329556047202477
    H               -2.766361597497364    -1.069449363910089    -0.545706047202477
    C                1.582478402502636     0.852057636089911     0.891443952797523
    C                1.759478402502636     0.233057636089911     2.265443952797523
    H                2.472478402502636     1.422057636089911     0.621443952797523
    H                1.441478402502636     0.084057636089911     0.136443952797523
    H                0.715478402502636     1.511057636089911     0.868443952797523
    H                0.795478402502636    -0.180942363910089     2.562443952797523
    H                2.032238402502636     1.005171636089911     2.999913952797522
    H                2.497498402502636    -0.582613363910089     2.267583952797523

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-061ILE-091ILE-1-dimer.npy', np.array(charges))