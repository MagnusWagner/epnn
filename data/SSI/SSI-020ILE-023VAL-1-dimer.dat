import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.164872848320998     1.656904381304316    -0.608363439608312
    C                0.996872848320998     2.889904381304317    -0.928363439608312
    H               -0.853127151679002     1.752904381304317    -0.991363439608312
    H                0.634872848320998     0.777904381305317    -1.052363439608312
    H                0.123872848320998     1.499904381304316     0.470636560391688
    H                1.931872848320999     2.800904381304317    -0.371363439608312
    H                0.500672848320998     3.819026381305317    -0.611310439608312
    H                1.249762848320999     2.933823381304317    -1.997998539608312
    C               -0.177127151679002    -1.649095618695683     0.620636560391688
    C               -0.995127151679002    -2.895095618694683     0.908636560391688
    H               -0.512127151679002    -0.825095618695683     1.249636560391688
    H                0.873872848320999    -1.839095618695683     0.841636560391688
    H               -0.278127151679002    -1.373095618694684    -0.428363439608312
    H               -0.917127151679002    -3.107095618694683     1.974636560391688
    H               -2.050067151679001    -2.721415618695683     0.649905560391688
    H               -0.579227151679002    -3.749835618695683     0.355061560391688

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-020ILE-023VAL-1-dimer.npy', np.array(charges))