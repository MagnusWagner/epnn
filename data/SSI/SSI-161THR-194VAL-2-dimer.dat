import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.336522922861579     0.776392695372124     1.803721228926347
    C               -1.062477077138421     1.113392695372123     2.314721228926348
    H                0.702522922861579     1.543392695372124     1.121721228926347
    H                1.013522922861579     0.696392695372124     2.644721228926348
    H                0.320522922861579    -0.191607304627876     1.307721228926347
    H               -1.399477077138421     0.300392695372124     2.959721228926348
    H               -1.763507077138421     1.222232695372124     1.474059228926347
    H               -1.027707077138421     2.045292695372123     2.898123228926348
    C                0.178522922861579    -0.472607304627876    -1.487278771073653
    C                0.546522922861579    -1.407607304627876    -2.640278771073652
    H               -0.579477077138421     0.244392695372124    -1.799278771073653
    H               -0.236477077138421    -1.069607304627876    -0.679278771073653
    H                1.053522922861579     0.046392695372124    -1.096278771073653
    H                1.316522922861579    -2.087607304627876    -2.279278771073652
    H                0.939172922861579    -0.857887304627876    -3.508400771073652
    H               -0.328327077138421    -2.005737304627877    -2.935019771073653

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-161THR-194VAL-2-dimer.npy', np.array(charges))