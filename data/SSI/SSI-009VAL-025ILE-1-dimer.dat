import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.777348091925874     0.224930184408076     0.028564640553646
    C               -3.061348091925874     0.185930184408076     0.847564640553646
    H               -1.121348091925874    -0.585069815591924     0.343564640553646
    H               -2.015348091925874     0.087930184408076    -1.026435359446354
    H               -1.269348091925874     1.180930184408076     0.159564640553646
    H               -3.553348091925874    -0.753069815591924     0.605564640553646
    H               -2.839481591925874     0.174550184408076     1.924897640553646
    H               -3.744739091925874     1.001710184408076     0.569199640553646
    C                1.703651908074126    -0.040069815591924    -0.237435359446354
    C                3.143651908074126    -0.353069815591924    -0.636435359446354
    H                1.610651908074126     0.990930184408076     0.104564640553646
    H                0.999651908074126    -0.249069815591924    -1.038435359446354
    H                1.379651908074126    -0.695069815591924     0.561564640553646
    H                3.155651908074126    -1.351069815591924    -1.077435359446354
    H                3.797113908074126    -0.366549815591924     0.248327640553646
    H                3.498401908074126     0.352850184408076    -1.401834359446354

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-009VAL-025ILE-1-dimer.npy', np.array(charges))