import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.698048124151954    -0.370063434522323    -0.637484898094950
    C                2.035048124151954    -1.286063434522323     0.522515101905050
    H                2.336048124151954    -0.539063434522323    -1.501484898094950
    H                0.678048124151954    -0.569063434522323    -0.958484898094950
    H                1.746048124151954     0.658936565477677    -0.304484898094950
    H                1.819048124151954    -2.302063434522323     0.191515101905050
    H                3.098408124151954    -1.258473434522323     0.802685101905050
    H                1.389368124151954    -1.082093434522323     1.389405101905051
    C               -1.485951875848045     1.464936565477677     0.301515101905050
    C               -2.243951875848046     0.205936565477677    -0.189484898094950
    H               -2.158951875848045     2.164936565477677     0.795515101905050
    H               -0.735951875848046     1.164936565477677     1.031515101905050
    H               -0.980951875848046     1.956936565477677    -0.526484898094949
    H               -2.782951875848046    -0.223063434522323     0.654515101905050
    H               -1.512951875848046    -0.533063434522323    -0.511484898094949
    H               -2.933221875848046     0.385556565477677    -1.027724898094950

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-033VAL-048ILE-1-dimer.npy', np.array(charges))