import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.244301041170940    -0.311971369130012    -1.785406315949736
    C               -2.136301041170940     0.662028630869988    -2.568406315949736
    H               -1.486301041170940    -0.245971369130012    -0.726406315949736
    H               -1.425301041170940    -1.331971369130011    -2.122406315949736
    H               -0.195301041170940    -0.062971369130012    -1.941406315949736
    H               -3.171301041170941     0.356028630869988    -2.411406315949736
    H               -2.014751041170940     1.700958630869989    -2.228053315949736
    H               -1.906281041170940     0.581708630869988    -3.641085315949736
    C                0.606698958829060    -0.391971369130012     1.298593684050264
    C                1.370698958829060     0.696028630869988     0.602593684050264
    C                1.443698958829060    -0.686971369130012     2.537593684050264
    H                0.474698958829060    -1.268971369130012     0.662593684050264
    H               -0.367301041170940    -0.006971369130012     1.607593684050264
    H                2.167698958829060     0.258028630869988    -0.000406315949736
    H                0.717698958829060     1.300028630869989    -0.028406315949736
    H                0.790698958829060    -0.985971369130012     3.355593684050264
    H                1.809058958829060     1.301238630869988     1.409783684050264
    H                1.946918958829060     0.267638630869988     2.750893684050264
    H                2.177598958829059    -1.471581369130011     2.301413684050265

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-041LEU-155PRO-1-dimer.npy', np.array(charges))