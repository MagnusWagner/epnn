import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.244174690788677     1.080383962107957    -1.166923844095418
    C               -0.755174690788677     2.179383962107957    -2.142923844095418
    H                0.119825309211323     0.207383962107957    -1.705923844095418
    H                0.568825309211323     1.512383962107956    -0.589923844095418
    H               -1.052174690788677     0.785383962107956    -0.495923844095418
    H               -1.236174690788677     2.957383962107957    -1.550923844095418
    H               -1.470284690788677     1.822183962107957    -2.898593844095418
    H                0.099955309211323     2.645953962107956    -2.653863844095418
    C                0.140825309211323    -1.996616037892043     1.085076155904582
    C                0.855825309211323    -1.269616037892044     2.219076155904582
    H                0.849825309211323    -2.596616037892043     0.512076155904582
    H               -0.608174690788677    -2.667616037892043     1.503076155904582
    H               -0.365174690788677    -1.285616037892044     0.433076155904582
    H                1.494825309211323    -1.988616037892043     2.730076155904582
    H                1.477175309211323    -0.452806037892043     1.823156155904582
    H                0.153685309211323    -0.862436037892043     2.961506155904582

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-089THR-098LEU-1-dimer.npy', np.array(charges))