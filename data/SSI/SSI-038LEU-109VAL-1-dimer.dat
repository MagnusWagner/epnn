import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.490633912263504     0.294542356920918     0.997316200241524
    C               -2.624633912263505    -0.566457643079082     1.548316200241524
    H               -1.385633912263504     0.117542356920918    -0.073683799758476
    H               -1.730633912263504     1.344542356920918     1.163316200241524
    H               -0.554633912263504     0.075542356920918     1.510316200241524
    H               -2.686633912263504    -0.408457643079082     2.623316200241524
    H               -2.448685912263504    -1.632157643079082     1.340182200241524
    H               -3.589053912263505    -0.259564643079082     1.117374200241524
    C                1.672366087736496     0.755542356920918    -1.053683799758476
    C                2.443366087736496    -0.491457643079082    -1.489683799758476
    H                2.324366087736496     1.428542356920918    -0.498683799758476
    H                1.306366087736496     1.291542356920918    -1.929683799758476
    H                0.833366087736496     0.469542356920918    -0.427683799758476
    H                3.339366087736496    -0.139457643079082    -2.002683799758476
    H                2.738026087736496    -1.122980643079082    -0.638594799758476
    H                1.848256087736496    -1.071398643079082    -2.210457799758476

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-038LEU-109VAL-1-dimer.npy', np.array(charges))