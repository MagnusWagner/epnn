import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.664919591460716     1.586627217634388     0.066853634174933
    C                1.065919591460716     0.395627217634387    -0.663146365825067
    O                0.202919591460715     0.605627217634388    -1.527146365825067
    N                1.460919591460715    -0.808372782365612    -0.285146365825067
    H                0.952919591460715     1.913627217634388     0.824853634174933
    H                1.819919591460716     2.409627217634387    -0.631146365825067
    H                1.042919591460715    -1.602372782365612    -0.749146365825067
    H                2.060919591460715    -0.947372782365613     0.513853634174933
    H                2.606119591460716     1.322317217634388     0.571123634174933
    C               -2.175080408539285    -0.425372782365613     0.540853634174933
    C               -2.158080408539284    -1.245372782365612     1.796853634174933
    H               -2.089080408539285     0.644627217634387     0.717853634174933
    H               -1.354080408539285    -0.749372782365612    -0.091146365825067
    H               -3.063080408539284    -0.682372782365612     0.011853634174933
    H               -2.190080408539284    -2.299372782365613     1.513853634174933
    H               -3.014618408539284    -1.041845782365612     2.456333634174933
    H               -1.212298408539285    -1.056500782365613     2.325833634174933

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-016GLN-048ILE-1-dimer.npy', np.array(charges))