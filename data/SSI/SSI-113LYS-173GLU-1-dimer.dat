import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.391943970964481    -1.361744829221089     0.693989650389067
    C                2.080943970964481    -1.776744829221089     1.982989650389067
    N               -0.053056029035519    -1.397744829221089     0.968989650389067
    H                1.700943970964481    -0.346744829221089     0.425989650389067
    H                1.655943970964481    -2.046744829221089    -0.118010349610933
    H                1.865943970964481    -2.826744829221089     2.193989650389067
    H                1.673943970964481    -1.184744829221089     2.806989650389067
    H               -0.293056029035519    -0.800744829221089     1.748989650389067
    H               -0.555056029035519    -1.013744829221089     0.162989650389067
    H               -0.391056029035519    -2.335744829221088     1.146989650389067
    H                3.169023970964481    -1.615273829221089     1.985949650389067
    C               -1.165056029035519     2.319255170778912    -1.758010349610933
    C               -0.824056029035519     1.113255170778911    -0.906010349610933
    O               -0.136056029035519     1.295255170778911     0.120989650389067
    O               -1.244056029035519    -0.018744829221089    -1.258010349610933
    H               -2.140056029035519     2.704255170778912    -1.449010349610933
    H               -1.276056029035519     1.986255170778911    -2.791010349610933
    H               -0.437026029035519     3.140734170778911    -1.686290349610933

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-113LYS-173GLU-1-dimer.npy', np.array(charges))