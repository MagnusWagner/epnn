import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                0.966164143387800    -0.387745034460672    -0.420687102857183
    C                2.052164143387799    -0.413745034460672    -1.482687102857183
    C                1.191164143387799     0.662254965539328     0.657312897142817
    O                0.224164143387799     0.920254965539328     1.412312897142817
    O                2.334164143387799     1.130254965539328     0.834312897142817
    H                0.026164143387799    -0.174745034460672    -0.932687102857183
    H                0.851164143387800    -1.364745034460672     0.043312897142817
    H                3.035164143387799    -0.422745034460672    -1.017687102857183
    H                1.965164143387799     0.489254965539328    -2.088687102857183
    H                1.965693143387799    -1.297750034460672    -2.131577102857183
    C               -2.831835856612201    -0.363745034460672    -0.342687102857183
    C               -3.780835856612201    -1.524745034460671    -0.641687102857183
    H               -2.112835856612200    -0.647745034460672     0.427312897142817
    H               -2.298835856612201    -0.066745034460672    -1.242687102857183
    H               -3.383835856612201     0.516254965539328    -0.015687102857183
    H               -4.521835856612201    -1.193745034460671    -1.371687102857183
    H               -4.292486856612200    -1.853664034460672     0.274842897142817
    H               -3.221801856612201    -2.382930034460672    -1.042937102857183

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-013GLU-052ILE-1-dimer.npy', np.array(charges))