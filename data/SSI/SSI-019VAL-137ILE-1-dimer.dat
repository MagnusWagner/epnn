import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.316355415269549    -0.032863104919570    -0.706509833457016
    C                2.745355415269549     0.411136895080430    -0.570509833457017
    H                0.950355415269549     0.177136895080430    -1.700509833457016
    H                1.280355415269549    -1.080863104919570    -0.468509833457017
    H                0.704355415269549     0.504136895080430     0.016490166542984
    H                3.279355415269549     0.108136895080430    -1.472509833457016
    H                3.212622415269549    -0.081851104919570     0.294720166542983
    H                2.781402415269549     1.506963895080430    -0.481829833457016
    C               -2.119644584730451     0.526136895080430     0.895490166542983
    C               -1.949644584730451    -0.906863104919570     0.379490166542983
    H               -1.421644584730451     0.721136895080430     1.711490166542984
    H               -1.902644584730451     1.239136895080430     0.098490166542984
    H               -3.138644584730451     0.695136895080430     1.239490166542984
    H               -0.978644584730451    -0.984863104919570    -0.083509833457016
    H               -2.712721584730451    -1.177563104919570    -0.365109833457016
    H               -1.963912584730451    -1.597444304919570     1.235580166542983

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-019VAL-137ILE-1-dimer.npy', np.array(charges))