import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.150143513240750    -1.054037858445537    -1.642452695143331
    C                2.385143513240751    -0.884037858445537    -2.518452695143331
    H                1.106143513240750    -2.056037858445537    -1.219452695143331
    H                1.243143513240751    -0.331037858445537    -0.836452695143331
    H                0.247143513240750    -0.844037858445537    -2.216452695143331
    H                2.394143513240750     0.132962141554463    -2.908452695143330
    H                2.383703513240750    -1.601507858445537    -3.352263695143331
    H                3.284803513240750    -1.047897858445537    -1.907087695143331
    C               -1.277856486759249     0.333962141554463     0.943547304856669
    C               -0.959856486759250    -0.230037858445537     2.329547304856669
    C               -1.377856486759250     1.857962141554463     0.946547304856669
    H               -0.531856486759250     0.013962141554463     0.229547304856669
    H               -2.238856486759250    -0.078037858445537     0.630547304856669
    H               -1.003856486759249    -1.320037858445537     2.277547304856669
    H               -1.744856486759250     0.094962141554463     3.015547304856669
    H               -2.031856486759250     2.178962141554462     1.760547304856669
    H               -0.383856486759250     2.283962141554462     1.097547304856669
    H                0.016923513240750     0.068522141554463     2.737914304856669
    H               -1.784956486759250     2.221752141554463    -0.008401695143331

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-007THR-031LYS-1-dimer.npy', np.array(charges))