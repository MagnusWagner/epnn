import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.536627147869732     1.530688070575714     0.161571779184080
    C               -1.810627147869732     2.171688070575715     0.772571779184080
    H               -0.238627147869732     0.656688070575714     0.742571779184080
    H               -0.707627147869732     1.224688070575714    -0.870428220815920
    H                0.290372852130268     2.241688070575714     0.131571779184080
    H               -2.038627147869732     3.077688070575714     0.210571779184080
    H               -1.621364147869732     2.447108070575715     1.820581779184080
    H               -2.676654147869732     1.496448070575714     0.708981779184080
    C                0.599372852130268    -1.833311929424286    -0.986428220815920
    C                1.750372852130267    -1.873311929424286     0.052571779184080
    H                0.599372852130268    -2.723311929424285    -1.600428220815920
    H               -0.354627147869732    -1.792311929424286    -0.458428220815920
    H                0.689372852130268    -0.943311929424286    -1.609428220815920
    H                1.720372852130268    -2.827311929424286     0.580571779184080
    H                1.577372852130268    -1.069311929424286     0.767571779184080
    H                2.730997852130268    -1.738171929424286    -0.427128220815920

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-021ILE-088ILE-1-dimer.npy', np.array(charges))