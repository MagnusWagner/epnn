import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.661627953337988    -0.314731048953736     0.148025607131683
    C               -2.148627953337988    -1.138731048953736    -1.065974392868317
    H               -0.783627953337988    -0.790731048953736     0.587025607131683
    H               -1.412627953337988     0.696268951046264    -0.170974392868317
    H               -2.446627953337988    -0.262731048953736     0.902025607131683
    H               -1.293627953337988    -1.283731048953736    -1.725974392868317
    H               -2.527777953337988    -2.128761048953736    -0.772578392868317
    H               -2.904097953337987    -0.566831048953736    -1.624714392868317
    C                1.298372046662012     1.191268951046264     0.464025607131683
    C                2.508372046662012     0.262268951046264     0.465025607131683
    H                1.626372046662012     2.221268951046264     0.586025607131683
    H                0.794372046662013     1.114268951046264    -0.497974392868317
    H                0.616372046662013     0.930268951046264     1.274025607131683
    H                3.256372046662012     0.645268951046264    -0.231974392868317
    H                2.154372046662012    -0.695731048953736     0.086025607131683
    H                2.962342046662013     0.120268951046264     1.456867607131683

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-032VAL-042ILE-1-dimer.npy', np.array(charges))