import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.687335209233467    -0.077125739008719    -1.828066035854030
    C                1.240335209233467    -1.897125739008719     0.170933964145970
    S                0.311335209233467    -0.847125739008719    -0.951066035854030
    H                2.425335209233467     0.241874260991281    -1.091066035854030
    H                1.316335209233467     0.825874260991281    -2.312066035854029
    H                1.932335209233467    -1.291125739008719     0.756933964145970
    H                0.550335209233467    -2.402125739008719     0.846933964145970
    H                1.797335209233468    -2.646125739008719    -0.392066035854030
    H                2.196285209233467    -0.700997739008719    -2.577569035854030
    C               -2.278664790766532     1.579874260991281     1.338933964145970
    S               -0.623664790766533     0.987874260991281     1.012933964145970
    H               -0.173664790766533     1.035874260991281     2.274933964145970
    H               -2.187664790766533     2.569874260991281     1.792933964145970
    H               -2.752664790766532     0.927874260991281     2.074933964145970
    H               -2.923274790766532     1.669703260991281     0.452139964145970

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-081MET-106CYS-1-dimer.npy', np.array(charges))