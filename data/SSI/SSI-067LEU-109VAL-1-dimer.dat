import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.401960007299096     1.106915055240500    -0.470474791754301
    C               -2.756960007299096     1.749915055240500    -0.764474791754301
    H               -0.598960007299096     1.835915055240500    -0.576474791754301
    H               -1.381960007299095     0.722915055240500     0.548525208245699
    H               -1.229960007299096     0.270915055240500    -1.150474791754301
    H               -2.804960007299096     2.692915055240500    -0.221474791754301
    H               -2.891909007299096     1.950535055240499    -1.837573291754301
    H               -3.584132007299096     1.128265055240500    -0.391194391754301
    C                1.693039992700904    -0.808084944759500     0.835525208245699
    C                2.464039992700904    -2.055084944759500     0.399525208245699
    H                2.345039992700904    -0.135084944759500     1.390525208245699
    H                1.327039992700904    -0.272084944759500    -0.040474791754301
    H                0.854039992700904    -1.094084944759500     1.461525208245699
    H                3.360039992700904    -1.703084944759500    -0.113474791754301
    H                2.758699992700904    -2.686607944759500     1.250614208245699
    H                1.868929992700904    -2.635025944759500    -0.321248791754301

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-067LEU-109VAL-1-dimer.npy', np.array(charges))