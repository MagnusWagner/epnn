import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C               -1.398557219921072     0.454352826642995    -0.669820060908701
    C               -2.647557219921072     0.054352826642995    -1.425820060908701
    C               -1.688557219921072     0.711352826642995     0.790179939091299
    O               -2.807557219921072     1.049352826642995     1.180179939091299
    N               -0.674557219921072     0.543352826642995     1.615179939091299
    H               -0.668557219921072    -0.352647173357005    -0.727820060908701
    H               -0.953557219921072     1.348352826642995    -1.104820060908701
    H               -3.374557219921072     0.865352826642995    -1.373820060908701
    H               -3.082557219921072    -0.828647173357005    -0.957820060908701
    H               -0.808557219921072     0.703352826642995     2.601179939091300
    H                0.253442780078928     0.357352826642995     1.226179939091299
    H               -2.427417219921072    -0.154917173357005    -2.483050060908701
    C                2.725442780078928    -0.596647173357005    -1.750820060908701
    C                2.254442780078928    -0.706647173357005    -0.307820060908701
    O                2.225442780078928    -1.833647173357005     0.236179939091299
    O                1.897442780078928     0.349352826642995     0.270179939091299
    H                3.548442780078928     0.121352826642995    -1.790820060908701
    H                1.915442780078928    -0.177647173357005    -2.346820060908701
    H                3.082302780078928    -1.537527173357005    -2.195110060908701

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-143GLN-147GLU-1-dimer.npy', np.array(charges))