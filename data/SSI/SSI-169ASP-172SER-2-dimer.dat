import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                0.361325091139542     2.100495831193025     1.973033687408158
    C                0.049325091139543     1.678495831193025     0.544033687408158
    O               -0.343674908860457     0.519495831193025     0.296033687408158
    O                0.169325091139542     2.540495831193025    -0.358966312591842
    H               -0.431674908860458     2.766495831193025     2.316033687408158
    H                1.289325091139542     2.675495831193025     1.982033687408158
    H                0.447665091139542     1.268445831193025     2.687341687408157
    C                0.180325091139543    -2.184504168806975    -1.284966312591842
    C               -1.252674908860457    -2.676504168806975    -1.056966312591842
    O                0.809325091139543    -1.808504168806975    -0.087966312591842
    H                0.756325091139542    -2.986504168806975    -1.750966312591842
    H                0.166325091139542    -1.332504168806975    -1.965966312591842
    H               -1.636674908860458    -2.988504168806975    -2.029966312591842
    H                0.389325091139543    -0.946504168806975     0.153033687408158
    H               -1.900864908860458    -1.873044168806975    -0.677095312591842
    H               -1.278524908860458    -3.562004168806975    -0.404872312591842

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-169ASP-172SER-2-dimer.npy', np.array(charges))