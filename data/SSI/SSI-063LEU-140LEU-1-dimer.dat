import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.706172130128794    -0.964707684304085     1.570806159788160
    C                1.227172130128793    -2.334707684304086     1.160806159788160
    H               -0.361827869871206    -0.897707684304086     1.369806159788159
    H                0.872172130128794    -0.813707684304085     2.636806159788160
    H                1.235172130128794    -0.185707684304086     1.021806159788160
    H                2.284172130128793    -2.375707684304085     1.424806159788160
    H                1.100292130128794    -2.478788684304086     0.077689159788160
    H                0.691662130128794    -3.124633684304086     1.707844159788160
    C               -0.387827869871206     1.202292315695914    -1.155193840211840
    C               -1.546827869871206     2.098292315695914    -1.578193840211840
    H               -0.771827869871206     0.375292315695914    -0.560193840211840
    H                0.098172130128794     0.794292315695915    -2.041193840211840
    H                0.339172130128794     1.767292315695914    -0.573193840211840
    H               -2.277827869871206     1.488292315695914    -2.110193840211840
    H               -2.008187869871207     2.544581315695914    -0.684898840211840
    H               -1.185527869871206     2.892580315695915    -2.247944840211840

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-063LEU-140LEU-1-dimer.npy', np.array(charges))