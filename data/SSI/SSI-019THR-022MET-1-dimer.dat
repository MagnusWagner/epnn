import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.999968698232468     1.986576370396617    -2.116644180521095
    O               -0.171031301767532     1.534576370396617    -1.449644180521095
    H               -0.793031301767532     1.244576370396618    -2.130644180521094
    H                0.743968698232468     2.886576370396617    -2.676644180521095
    H                1.750898698232468     2.247956370396618    -1.356526180521095
    H                1.376148698232468     1.244256370396618    -2.835987180521094
    C               -0.262031301767532    -1.583423629603382    -0.353644180521095
    C               -1.089031301767531     0.061576370396618     1.584355819478905
    S                0.284968698232468    -1.048423629603382     1.250355819478905
    H               -0.546031301767532    -0.743423629603382    -0.975644180521095
    H                0.539968698232468    -2.133423629603382    -0.845644180521095
    H               -1.125031301767532    -2.239423629603382    -0.240644180521095
    H               -1.992031301767532    -0.517423629603383     1.758355819478905
    H               -1.241031301767532     0.710576370396617     0.722355819478905
    H               -0.859321301767532     0.671476370396617     2.470497819478905

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-019THR-022MET-1-dimer.npy', np.array(charges))