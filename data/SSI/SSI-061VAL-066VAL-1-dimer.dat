import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.638688730384672     1.500183313404191    -0.492197425361775
    C               -1.727688730384672     2.527183313404191    -0.220197425361775
    H               -1.045688730384672     0.503183313404191    -0.340197425361775
    H               -0.319688730384672     1.598183313404191    -1.521197425361775
    H                0.233311269615328     1.653183313404191     0.139802574638225
    H               -1.303688730384672     3.519183313404191    -0.386197425361775
    H               -2.087548730384672     2.459803313404191     0.817092574638225
    H               -2.562644730384672     2.386463313404191    -0.922367425361775
    C                0.881311269615328    -1.415816686595809     0.041802574638225
    C                1.487311269615328    -2.613816686595809     0.681802574638225
    H                1.588311269615328    -0.910816686595809    -0.617197425361775
    H                0.043311269615328    -1.731816686595809    -0.574197425361775
    H                0.523311269615328    -0.721816686595809     0.799802574638225
    H                1.901311269615328    -3.253816686595809    -0.097197425361775
    H                2.298215269615328    -2.299386686595809     1.355272574638225
    H                0.704756269615328    -3.175356686595808     1.213102574638225

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-061VAL-066VAL-1-dimer.npy', np.array(charges))