import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C               -0.431164270774800    -1.181832257414812     0.101930840856221
    C               -1.147164270774800    -2.309832257414811     0.791930840856221
    C               -1.374164270774800    -0.189832257414812    -0.568069159143779
    O               -2.500164270774801    -0.595832257414812    -0.960069159143779
    O               -0.987164270774800     0.993167742585188    -0.715069159143779
    H                0.152835729225200    -0.677832257414812     0.866930840856221
    H                0.223835729225200    -1.617832257414812    -0.655069159143779
    H               -0.409164270774800    -2.985832257414812     1.228930840856221
    H               -1.710164270774800    -2.878832257414812     0.050930840856221
    H               -1.826844270774800    -1.950472257414812     1.578626550856221
    C                2.378835729225199     1.390167742585188     0.129930840856221
    C                2.726835729225200    -0.078832257414812     0.381930840856221
    O                1.142835729225200     1.715167742585188     0.722930840856221
    H                3.156835729225199     2.018167742585188     0.564930840856221
    H                2.331835729225199     1.578167742585188    -0.945069159143779
    H                1.986835729225200    -0.691832257414812    -0.105069159143779
    H                1.255835729225200     2.547167742585188     1.214930840856221
    H                2.741815729225199    -0.299722257414812     1.459420440856221
    H                3.667615729225200    -0.347002257414812    -0.121075159143779

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-010GLU-032SER-1-dimer.npy', np.array(charges))