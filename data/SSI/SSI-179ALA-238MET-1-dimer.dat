import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.402331419124022     1.746477106159048     2.669116814408649
    C                1.370331419124021     0.608477106159048     3.710116814408650
    H                0.428331419124022     2.208477106159048     2.625116814408650
    H                2.132331419124021     2.503477106159048     2.948116814408650
    H                1.640331419124022     1.338477106159049     1.688116814408649
    H                2.323331419124022     0.087477106159049     3.601116814408650
    H                0.536281419124022    -0.075702893840951     3.495046814408650
    H                1.348841419124022     0.998087106159049     4.738576814408649
    C               -0.110668580875978    -0.027522893840951    -0.270883185591350
    C               -1.701668580875978    -0.139522893840951    -2.491883185591350
    S               -0.436668580875978    -1.067522893840951    -1.707883185591351
    H               -1.004668580875978     0.066477106159049     0.344116814408649
    H                0.673331419124022    -0.482522893840951     0.333116814408649
    H                0.214331419124022     0.959477106159048    -0.600883185591351
    H               -1.897668580875978    -0.567522893840951    -3.473883185591350
    H               -1.325668580875978     0.871477106159049    -2.640883185591350
    H               -2.650738580875978    -0.092812893840951    -1.937733185591351

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-179ALA-238MET-1-dimer.npy', np.array(charges))