import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.199559668234386    -1.899306738616080    -0.542555412497943
    C                1.515559668234386    -1.375306738616080    -1.125555412497943
    H                0.272559668234386    -1.848306738616080     0.544444587502056
    H               -0.626440331765614    -1.255306738616080    -0.800555412497943
    H               -0.035440331765614    -2.951306738616080    -0.660555412497943
    H                1.289559668234386    -0.679306738616080    -1.925555412497943
    H                2.054539668234386    -2.223096738616080    -1.573619412497944
    H                2.099369668234386    -0.854376738616080    -0.352381012497944
    C               -0.544440331765614     1.111693261383920     1.279444587502056
    C               -1.165440331765614     2.161693261383920     0.374444587502057
    H               -1.242440331765614     0.845693261383920     2.075444587502057
    H               -0.318440331765614     0.232693261383920     0.709444587502057
    H                0.371559668234386     1.503693261383920     1.723444587502057
    H               -0.429440331765614     2.435693261383920    -0.381555412497943
    H               -1.451309331765614     3.049553261383920     0.957527287502057
    H               -2.046453331765614     1.758983261383920    -0.146748812497943

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-119LEU-137ALA-1-dimer.npy', np.array(charges))