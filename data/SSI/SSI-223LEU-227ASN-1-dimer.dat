import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.841758382609845    -1.396979571808439     1.360372607062901
    C               -3.116758382609845    -0.566979571808439     1.337372607062902
    H               -1.703758382609845    -1.831979571808439     2.350372607062901
    H               -1.913758382609845    -2.200979571808439     0.632372607062902
    H               -1.019758382609845    -0.744979571808439     1.137372607062901
    H               -3.921758382609846    -1.108979571808439     1.833372607062901
    H               -2.944628382609845     0.408200428191561     1.816322607062901
    H               -3.437888382609845    -0.304949571808439     0.318442607062902
    C                1.224241617390155     1.824020428191561    -0.003627392937098
    C                1.270241617390155     0.466020428191561    -0.767627392937098
    O                1.526241617390155     0.398020428191561    -2.000627392937099
    N                1.034241617390155    -0.629979571808439    -0.024627392937098
    H                1.112241617390155    -1.526979571808439    -0.474627392937098
    H                0.921241617390155    -0.557979571808438     0.973372607062902
    H                2.216241617390155     2.020020428191561     0.403372607062902
    H                0.517241617390155     1.749020428191561     0.824372607062901
    H                0.920731617390155     2.653270428191561    -0.659547392937098

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-223LEU-227ASN-1-dimer.npy', np.array(charges))