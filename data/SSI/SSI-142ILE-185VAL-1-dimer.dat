import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.897596219572414     1.095311294537554    -1.257221550913467
    C               -0.255403780427586     2.101311294537554    -1.272221550913468
    H                1.686596219572414     1.413311294537554    -1.943221550913468
    H                1.321596219572414     1.021311294537554    -0.256221550913467
    H                0.554596219572414     0.096311294537554    -1.532221550913467
    H               -1.086403780427586     1.682311294537554    -0.705221550913467
    H               -0.591763780427586     2.292291294537554    -2.301971550913468
    H                0.067116219572414     3.040211294537554    -0.798471550913467
    C               -0.874403780427586    -1.078688705462446     1.179778449086533
    C                0.228596219572414    -2.118688705462446     1.351778449086533
    H               -1.397403780427587    -0.915688705462446     2.123778449086533
    H               -0.442403780427586    -0.129688705462446     0.867778449086533
    H               -1.583403780427586    -1.411688705462446     0.421778449086533
    H                0.754596219572414    -2.176688705462446     0.398778449086533
    H               -0.191273780427586    -3.108337705462445     1.584808449086532
    H                0.951196219572414    -1.794667705462446     2.115238449086533

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-142ILE-185VAL-1-dimer.npy', np.array(charges))