import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.519400732945358    -1.991930915642502    -0.147708729418458
    C                1.707400732945358    -1.774930915642502     0.759291270581542
    H               -0.302599267054642    -1.326930915642502     0.104291270581542
    H                0.820400732945358    -1.792930915642502    -1.176708729418458
    H                0.181400732945358    -3.024930915642503    -0.093708729418458
    H                2.167400732945358    -0.814930915642503     0.522291270581542
    H                2.443400732945358    -2.550930915642503     0.543291270581542
    H                1.454510732945359    -1.818849915642502     1.828926270581542
    C               -0.582599267054642     1.527069084357497    -0.701708729418458
    C               -1.650599267054641     2.236069084357498     0.093291270581542
    H               -1.011599267054642     0.742069084357497    -1.323708729418458
    H               -0.079599267054642     2.250069084357498    -1.344708729418458
    H                0.156400732945358     1.098069084357498    -0.025708729418458
    H               -1.153599267054642     2.991069084357498     0.695291270581542
    H               -2.195779267054641     1.560503084357497     0.768856930581542
    H               -2.404169267054641     2.732062084357498    -0.536090729418458

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-020ILE-032THR-1-dimer.npy', np.array(charges))