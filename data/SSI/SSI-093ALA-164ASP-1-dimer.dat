import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C               -0.300973100898249    -1.429524699161192    -2.000963204296774
    C                1.162026899101751    -1.671524699161192    -1.556963204296774
    H               -0.705973100898249    -2.330524699161192    -2.459963204296774
    H               -0.905973100898249    -1.181524699161192    -1.128963204296774
    H               -0.344973100898249    -0.601524699161192    -2.710963204296774
    H                1.555026899101751    -0.756524699161192    -1.116963204296774
    H                1.768316899101751    -1.924955699161192    -2.439113204296774
    H                1.212506899101751    -2.468520699161192    -0.800493204296774
    C               -0.296973100898249     2.071475300838808     0.242036795703226
    C               -0.215973100898249     0.728475300838808     0.954036795703226
    O               -1.255973100898249     0.141475300838808     1.304036795703226
    O                0.893026899101751     0.215475300838808     1.132036795703226
    H               -0.790973100898248     1.901475300838808    -0.716963204296774
    H                0.701026899101751     2.461475300838808     0.029036795703226
    H               -0.873623100898249     2.820691300838808     0.804306795703226

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-093ALA-164ASP-1-dimer.npy', np.array(charges))