import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.518763497650959     1.545645609688562    -1.124155625700718
    C                0.223763497650959     0.493645609688562    -2.194155625700719
    H                0.750763497650959     2.512645609688562    -1.570155625700718
    H               -0.364236502349041     1.677645609688562    -0.510155625700718
    H                1.350763497650959     1.221645609688562    -0.500155625700718
    H                0.133763497650959    -0.479354390311438    -1.715155625700718
    H                1.045521497650959     0.450625609688562    -2.924129525700718
    H               -0.722951502349041     0.726645609688562    -2.703508525700718
    C                0.055763497650959    -1.424354390311438     1.169844374299282
    C               -0.799236502349041    -0.618354390311438     2.145844374299282
    H               -0.453236502349041    -1.506354390311438     0.220844374299282
    H                0.996763497650959    -0.901354390311438     1.007844374299282
    H                0.257763497650959    -2.414354390311438     1.568844374299282
    H               -0.205236502349041    -0.434354390311438     3.041844374299282
    H               -1.714869502349041    -1.157339390311438     2.430644374299281
    H               -1.063544502349041     0.344595609688562     1.684464374299282

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-119THR-123THR-1-dimer.npy', np.array(charges))