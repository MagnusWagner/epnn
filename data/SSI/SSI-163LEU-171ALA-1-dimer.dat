import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.145529119920029     1.281426825323689     0.346788433949146
    C               -1.350529119920029     2.164426825323689     1.559788433949146
    H               -1.426529119920029     0.252426825323689     0.565788433949146
    H               -1.753529119920029     1.627426825323689    -0.477211566050854
    H               -0.106529119920029     1.320426825323689     0.022788433949146
    H               -1.040529119920029     3.184426825323689     1.349788433949146
    H               -0.688439119920029     1.697026605323689     2.303548433949146
    H               -2.417319119920029     2.135516625323689     1.826488433949146
    C                0.943470880079971    -1.815573174676311    -0.241211566050854
    C                1.550470880079971    -1.622573174676311    -1.655211566050854
    H                1.435470880079971    -1.161573174676311     0.480788433949146
    H               -0.112529119920029    -1.562573174676311    -0.281211566050854
    H                1.052470880079971    -2.850573174676311     0.077788433949146
    H                1.015470880079971    -2.260573174676311    -2.361211566050854
    H                2.615930880079972    -1.895787174676311    -1.643031566050854
    H                1.451260880079971    -0.577940174676311    -1.985211566050854

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-163LEU-171ALA-1-dimer.npy', np.array(charges))