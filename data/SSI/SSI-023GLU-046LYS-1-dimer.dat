import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.155065152378073    -0.583800529646475     1.079773608504205
    C                1.196065152378073    -0.407800529646475    -0.436226391495795
    O                0.143065152378073    -0.060800529646475    -1.010226391495795
    O                2.254065152378073    -0.629800529646475    -1.066226391495795
    H                0.509065152378073    -1.433800529646475     1.304773608504205
    H                0.702065152378073     0.303199470353525     1.525773608504205
    H                2.135705152378073    -0.747710529646475     1.550393608504205
    C               -2.202934847621927     1.533199470353525     0.929773608504205
    N               -2.166934847621927     0.102199470353525     0.416773608504205
    H               -2.929934847621926    -0.089800529646475    -0.221226391495795
    H               -1.300934847621927    -0.074800529646475    -0.093226391495795
    H               -2.213934847621926    -0.545800529646475     1.203773608504205
    H               -1.825934847621927     2.210199470353525     0.155773608504205
    H               -1.552934847621927     1.626199470353525     1.807773608504205
    H               -3.223744847621927     1.843939470353525     1.196943608504205

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-023GLU-046LYS-1-dimer.npy', np.array(charges))