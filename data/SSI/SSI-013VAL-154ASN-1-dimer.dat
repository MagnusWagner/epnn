import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.893097466507828    -1.986409287553069    -0.737357127057418
    C                1.534097466507828    -1.643409287553070    -2.074357127057417
    H                1.416097466507829    -1.486409287553070     0.079642872942582
    H               -0.135902533492172    -1.640409287553070    -0.774357127057418
    H                0.884097466507828    -3.062409287553070    -0.565357127057418
    H                1.029097466507828    -2.218409287553070    -2.850357127057418
    H                2.605707466507829    -1.891700287553070    -2.071477127057418
    H                1.388107466507828    -0.578109287553070    -2.306357127057418
    C                0.051097466507828     0.693590712446930     1.981642872942582
    C               -0.672902533492172     0.887590712446930     0.669642872942582
    O               -1.562902533492172     0.116590712446930     0.318642872942582
    N               -0.304902533492172     1.927590712446930    -0.064357127057418
    H                0.329097466507828     1.671590712446930     2.381642872942582
    H                0.968097466507828     0.137590712446930     1.785642872942582
    H               -0.792902533492172     2.107590712446930    -0.927357127057418
    H                0.411097466507828     2.557590712446930     0.267642872942582
    H               -0.558242533492172     0.162855712446930     2.727992872942583

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-013VAL-154ASN-1-dimer.npy', np.array(charges))