import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.331816014626437     1.257973882571167    -1.677409617109135
    C                0.275816014626437     2.361973882571167    -1.570409617109135
    H                2.218816014626437     1.647973882571167    -2.177409617109136
    H                1.617816014626437     0.920973882571167    -0.684409617109135
    H                0.949816014626437     0.405973882571167    -2.236409617109135
    H               -0.624183985373563     1.910973882571167    -1.162409617109135
    H                0.048266014626437     2.829083882571167    -2.539961617109135
    H                0.545156014626437     3.095623882571167    -0.796321617109135
    C               -0.345183985373563    -1.959026117428833    -0.166409617109135
    C               -0.457183985373563    -0.875026117428833     0.856590382890865
    O               -1.565183985373563    -0.436026117428833     1.178590382890865
    N                0.669816014626437    -0.435026117428833     1.391590382890865
    H                0.482816014626437    -2.626026117428833     0.078590382890865
    H               -0.176183985373563    -1.516026117428833    -1.147409617109135
    H                0.620816014626437     0.284973882571167     2.098590382890865
    H                1.556816014626437    -0.832026117428833     1.117590382890865
    H               -1.294143985373563    -2.514566117428833    -0.137405617109135

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-002LEU-006GLN-1-dimer.npy', np.array(charges))