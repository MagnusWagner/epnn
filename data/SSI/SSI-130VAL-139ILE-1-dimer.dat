import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.104190843978244    -0.498558157194894    -1.677075952717503
    C               -1.116809156021755    -1.409558157194894    -1.538075952717503
    H               -0.164809156021756     0.554441842805106    -1.640075952717503
    H                0.799190843978244    -0.718558157194894    -0.866075952717503
    H                0.626190843978244    -0.687558157194894    -2.606075952717504
    H               -1.562809156021756    -1.253558157194894    -0.556075952717503
    H               -1.851729156021756    -1.166986157194894    -2.319777952717503
    H               -0.818199156021756    -2.465852157194894    -1.609310952717503
    C                0.164190843978244     1.342441842805106     1.049924047282497
    C                0.852190843978245     0.567441842805106     2.159924047282497
    H                0.756190843978244     1.393441842805106     0.144924047282497
    H               -0.802809156021756     0.889441842805106     0.830924047282497
    H               -0.008809156021756     2.364441842805105     1.385924047282497
    H                0.734190843978244    -0.496558157194894     1.954924047282497
    H                0.323190843978244     0.777441842805106     3.087924047282496
    H                1.925400843978244     0.788817942805106     2.255924047282496

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-130VAL-139ILE-1-dimer.npy', np.array(charges))