import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.774920362976507    -0.352197334292319    -0.461333809152736
    C                2.373920362976508    -1.733197334292319    -0.232333809152736
    H                0.701920362976507    -0.424197334292319    -0.571333809152736
    H                2.023920362976507     0.312802665707681     0.365666190847264
    H                2.182920362976507     0.064802665707681    -1.383333809152737
    H                3.446920362976507    -1.664197334292319    -0.416333809152736
    H                1.951580362976507    -2.479805334292319    -0.920963809152736
    H                2.237160362976507    -2.056949334292319     0.810006190847264
    C               -1.357079637023493     0.856802665707681     0.458666190847264
    C               -2.801079637023492     1.224802665707681     0.238666190847264
    H               -1.236079637023493    -0.220197334292319     0.347666190847264
    H               -0.728079637023493     1.387802665707681    -0.257333809152736
    H               -1.056079637023493     1.144802665707681     1.466666190847264
    H               -2.912079637023492     2.300802665707681     0.378666190847264
    H               -3.465239637023493     0.703523665707681     0.943756190847264
    H               -3.035909637023492     0.975928665707681    -0.806763809152736

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-055THR-072THR-1-dimer.npy', np.array(charges))