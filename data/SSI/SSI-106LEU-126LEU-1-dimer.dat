import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.728910276019900    -1.446712232074171     0.574124214416241
    C                1.122910276019900    -2.644712232074171     1.426124214416241
    H                0.121910276019900    -1.760712232074171    -0.275875785583759
    H                0.132910276019900    -0.767712232074171     1.174124214416241
    H                1.613910276019900    -0.930712232074171     0.223124214416241
    H                1.939910276019900    -2.357712232074171     2.085124214416241
    H                1.409900276019900    -3.480647232074171     0.771260614416241
    H                0.296160276019900    -2.950329232074171     2.084211214416241
    C               -0.991089723980100     1.347287767925829    -0.708875785583759
    C               -0.861089723980100     2.744287767925829    -1.296875785583759
    H               -2.025089723980100     1.154287767925829    -0.421875785583759
    H               -0.670089723980100     0.607287767925829    -1.438875785583760
    H               -0.353089723980100     1.269287767925829     0.167124214416241
    H                0.190910276019900     2.903287767925829    -1.525875785583759
    H               -1.205309723980100     3.478717767925829    -0.553822785583759
    H               -1.447759723980100     2.833157767925829    -2.223117785583760

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-106LEU-126LEU-1-dimer.npy', np.array(charges))