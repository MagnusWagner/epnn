import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                0.595129588840864     1.243324721444769     1.305136649645739
    C                0.111129588840864     0.357324721444769     2.452136649645740
    C                0.421129588840864     2.721324721444769     1.581136649645740
    H                1.654129588840864     1.035324721444769     1.139136649645740
    H                0.051129588840864     1.002324721444769     0.393136649645740
    H                0.650129588840864     0.650324721444769     3.356136649645740
    H               -0.638870411159136     2.982324721444769     1.581136649645740
    H                0.860129588840864     2.947324721444769     2.551136649645739
    H                0.351429588840864    -0.692195278555231     2.226816649645739
    H               -0.958870411159136     0.502454721444769     2.662006649645739
    H                0.952599588840864     3.315704721444769     0.823340649645740
    C               -0.322870411159136    -0.719675278555231    -2.725863350354261
    C               -0.280870411159136    -1.111675278555231    -1.260863350354261
    O               -1.331870411159136    -1.025675278555231    -0.579863350354261
    O                0.815129588840864    -1.464675278555231    -0.777863350354260
    H               -0.180870411159136    -1.611675278555231    -3.339863350354260
    H                0.496129588840864    -0.026675278555231    -2.933863350354260
    H               -1.271000411159136    -0.236995278555231    -3.005273350354261

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-030LYS-085GLU-1-dimer.npy', np.array(charges))