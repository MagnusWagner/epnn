import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.283186626589060    -1.270579300076604    -0.736580102857049
    C                1.214813373410941    -1.186579300076604    -0.671580102857049
    C               -0.591186626589060    -2.761579300076604    -0.676580102857049
    H               -0.631186626589060    -0.854579300076604    -1.681580102857049
    H               -0.757186626589060    -0.751579300076604     0.094419897142951
    H                1.548813373410940    -0.397579300076604    -1.337580102857049
    H                1.554813373410940    -1.028579300076604     0.352419897142951
    H               -1.558186626589060    -2.987579300076604    -1.127580102857049
    H               -0.573186626589060    -3.092579300076604     0.362419897142951
    H                1.563643373410941    -2.157789300076604    -1.052460102857049
    H                0.239743373410940    -3.227019300076603    -1.226960102857049
    C               -0.475186626589060     1.912420699923396     0.837419897142951
    C                0.113813373410940     3.231420699923397     1.201419897142951
    H                0.281813373410940     1.132420699923396     0.903419897142951
    H               -1.256186626589059     1.669420699923396     1.560419897142951
    H               -0.920186626589059     1.906420699923396    -0.155580102857049
    H               -0.691186626589059     3.958420699923396     1.306419897142951
    H                0.787103373410940     3.558150699923396     0.395236897142951
    H                0.660623373410940     3.164230699923396     2.153513897142951

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-045PRO-100VAL-1-dimer.npy', np.array(charges))