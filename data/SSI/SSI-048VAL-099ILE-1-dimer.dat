import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.885573924352405    -1.368560132889528     0.681374148116119
    C                1.211573924352406    -1.868560132889528     1.956374148116119
    H                1.568573924352406    -1.966560132889528    -0.173625851883881
    H                1.622573924352406    -0.329560132889528     0.504374148116119
    H                2.969573924352405    -1.410560132889528     0.781374148116119
    H                0.133573924352405    -1.830560132889528     1.799374148116119
    H                1.502211924352405    -2.901146132889528     2.199884148116119
    H                1.433243924352406    -1.214451132889528     2.812534148116118
    C               -0.955426075647595     0.811439867110472    -0.435625851883881
    C               -1.713426075647595     2.149439867110472    -0.439625851883881
    C               -0.489426075647595     0.332439867110472    -1.797625851883881
    H               -0.092426075647595     0.911439867110472     0.219374148116119
    H               -1.601426075647594     0.033439867110472    -0.029625851883881
    H               -2.621426075647595     2.051439867110472    -1.021625851883881
    H                0.326573924352405     0.954439867110472    -2.163625851883881
    H               -0.123426075647595    -0.691560132889528    -1.711625851883881
    H               -1.313426075647594     0.350439867110472    -2.508625851883881
    H               -1.977536075647595     2.426503467110471     0.591624148116119
    H               -1.098790075647595     2.947539267110472    -0.881505851883881

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-048VAL-099ILE-1-dimer.npy', np.array(charges))