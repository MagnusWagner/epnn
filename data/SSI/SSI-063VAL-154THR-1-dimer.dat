import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.215996028184685    -1.724100076865016     1.105875834466175
    C               -0.691996028184685    -1.200100076865016     2.455875834466176
    H               -0.951996028184685    -1.502100076865016     0.332875834466175
    H                0.731003971815315    -1.252100076865016     0.844875834466175
    H               -0.060996028184685    -2.802100076865016     1.161875834466175
    H                0.099003971815315    -1.387100076865016     3.182875834466175
    H               -1.595576028184685    -1.740960076865016     2.773695834466175
    H               -0.862836028184685    -0.114990076865016     2.397975834466175
    C                0.355003971815315     0.925899923134984    -1.245124165533825
    C                0.552003971815315     2.001899923134984    -2.315124165533824
    H                1.265003971815315     0.768899923134984    -0.670124165533825
    H               -0.442996028184685     1.231899923134984    -0.568124165533825
    H                0.074003971815315    -0.016100076865016    -1.718124165533825
    H               -0.362996028184685     2.052899923134984    -2.894124165533825
    H                1.375833971815315     1.729449923134984    -2.991194165533825
    H                0.744263971815315     2.989439923134984    -1.870384165533825

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-063VAL-154THR-1-dimer.npy', np.array(charges))