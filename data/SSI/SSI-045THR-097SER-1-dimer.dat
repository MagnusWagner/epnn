import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.624075247557476     2.479060527490812    -0.133696482455054
    C               -1.367075247557476     2.646060527490812     1.192303517544946
    H               -0.913075247557476     1.543060527490812    -0.606696482455054
    H               -0.891075247557476     3.301060527490812    -0.795696482455054
    H                0.453924752442524     2.497060527490812     0.018303517544946
    H               -1.160075247557475     3.638060527490813     1.597303517544946
    H               -1.048425247557476     1.878730527490812     1.913193517544946
    H               -2.448065247557476     2.563440527490812     1.006213517544946
    C                0.661924752442524    -1.114939472509188    -0.451696482455054
    C                0.885924752442524    -2.193939472509188    -1.507696482455054
    O                0.476924752442524    -1.681939472509188     0.833303517544946
    H                1.519924752442525    -0.451939472509188    -0.444696482455054
    H               -0.223075247557476    -0.536939472509188    -0.719696482455054
    H                1.015924752442524    -1.692939472509188    -2.468696482455054
    H               -0.419075247557476    -2.056939472509188     0.864303517544946
    H                0.013564752442524    -2.861219472509188    -1.568766482455054
    H                1.808694752442524    -2.753519472509188    -1.294696482455054

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-045THR-097SER-1-dimer.npy', np.array(charges))