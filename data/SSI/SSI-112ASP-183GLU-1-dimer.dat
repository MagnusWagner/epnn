import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -2 1
    --
    -2 1
    C               -1.170073152259899     0.589042865555129     0.993204094535468
    C               -2.255073152259899     0.977042865555129     1.996204094535468
    C                0.225926847740101     0.594042865555129     1.595204094535468
    O                0.526926847740101     1.491042865555129     2.417204094535468
    O                1.043926847740101    -0.277957134444871     1.236204094535468
    H               -1.402073152259899    -0.391957134444871     0.580204094535468
    H               -1.198073152259899     1.317042865555129     0.181204094535468
    H               -2.024073152259898     1.979042865555129     2.359204094535468
    H               -2.273953152259899     0.279352865555129     2.846424094535468
    H               -3.210213152259898     1.035472865555129     1.453714094535468
    C                0.296926847740101    -1.336957134444871    -3.393795905464532
    C                0.401926847740101    -0.807957134444871    -1.969795905464532
    O                0.383926847740101     0.429042865555129    -1.783795905464532
    O                0.505926847740101    -1.639957134444871    -1.046795905464532
    H               -0.518073152259899    -2.058957134444871    -3.459795905464532
    H                1.229926847740101    -1.851957134444871    -3.632795905464532
    H                0.114746847740101    -0.523657134444871    -4.111675905464533

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-112ASP-183GLU-1-dimer.npy', np.array(charges))