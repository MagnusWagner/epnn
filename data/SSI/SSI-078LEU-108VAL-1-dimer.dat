import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.587825715520690    -1.576583133041001    -0.731611086716997
    C               -1.827825715520690    -1.959583133041001     0.079388913283003
    H               -0.628825715520690    -2.020583133041001    -1.727611086716997
    H               -0.463825715520690    -0.516583133041001    -0.777611086716997
    H                0.316174284479310    -1.940583133041001    -0.238611086716997
    H               -2.713825715520690    -1.986583133041001    -0.538611086716997
    H               -1.679428715520690    -2.960533133041001     0.510757373283003
    H               -1.964179715520690    -1.241933133041001     0.901815913283003
    C                0.752174284479310     1.711416866958999    -0.284611086716997
    C                1.653174284479310     1.824416866958999     0.934388913283003
    H                0.665174284479310     2.682416866958999    -0.769611086716997
    H                1.178174284479310     1.012416866958999    -1.004611086716997
    H               -0.245825715520690     1.409416866958999     0.028388913283003
    H                2.550174284479310     2.362416866958999     0.637388913283003
    H                1.135964284479310     2.375867866958999     1.733386913283003
    H                1.972924284479310     0.828222866958999     1.274032913283003

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-078LEU-108VAL-1-dimer.npy', np.array(charges))