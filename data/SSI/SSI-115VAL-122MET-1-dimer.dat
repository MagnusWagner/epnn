import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.110630908277917     2.221028231990412     2.192407048994841
    C                2.549630908277917     1.972028231990412     1.784407048994841
    H                0.959630908277917     3.281028231990412     2.400407048994841
    H                0.434630908277917     1.932028231990412     1.390407048994841
    H                0.862630908277917     1.638028231990412     3.079407048994841
    H                2.688630908277917     0.895028231990412     1.699407048994841
    H                3.260560908277916     2.370408231990412     2.523237048994841
    H                2.775280908277917     2.418338231990412     0.804667048994841
    C                0.147630908277917    -0.269971768009588    -0.219592951005159
    C               -2.386369091722083    -1.058971768009588    -0.926592951005159
    S               -0.650369091722083    -1.371971768009588    -1.357592951005159
    H               -0.032369091722083    -0.587971768009588     0.806407048994841
    H                1.221630908277917    -0.277971768009588    -0.403592951005159
    H               -0.234369091722083     0.739028231990412    -0.367592951005159
    H               -3.002369091722084    -1.553971768009588    -1.673592951005159
    H               -2.582369091722083     0.012028231990412    -0.965592951005159
    H               -2.645159091722083    -1.444301768009588     0.070677048994841

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-115VAL-122MET-1-dimer.npy', np.array(charges))