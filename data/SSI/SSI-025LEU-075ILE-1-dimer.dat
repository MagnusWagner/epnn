import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.706351471717670     1.373266504909093     1.106816191622076
    C               -0.824351471717670     2.421266504909093    -0.000183808377924
    H               -1.046351471717670     1.782266504909093     2.058816191622075
    H               -1.337351471717670     0.516266504909093     0.865816191622075
    H                0.327648528282330     1.037266504909093     1.199816191622076
    H               -1.811351471717670     2.866266504909093     0.064816191622076
    H               -0.073921471717670     3.210141504909093     0.156456191622076
    H               -0.721901471717670     1.980392504909093    -1.002743808377925
    C                1.397648528282330    -1.483733495090907    -0.414183808377925
    C                0.135648528282330    -2.315733495090907    -0.693183808377924
    H                2.271648528282330    -2.135733495090907    -0.421183808377925
    H                1.527648528282330    -0.713733495090907    -1.173183808377924
    H                1.333648528282330    -0.977733495090907     0.548816191622076
    H               -0.742351471717670    -1.694733495090907    -0.511183808377925
    H                0.097508528282330    -3.190694495090907    -0.027613808377924
    H                0.144238528282330    -2.621223495090907    -1.749873808377925

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-025LEU-075ILE-1-dimer.npy', np.array(charges))