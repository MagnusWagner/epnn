import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.868383070380425     0.827470002718187     0.933934042701588
    C                1.637383070380425     1.476470002718187     2.065934042701588
    H                1.536383070380425     0.618470002718187     0.097934042701588
    H                0.433383070380425    -0.109529997281813     1.282934042701588
    H                0.060383070380425     1.477470002718188     0.600934042701588
    H                0.963383070380425     1.680470002718187     2.895934042701588
    H                2.127343070380424     2.399090002718187     1.721385042701588
    H                2.424123070380424     0.793300002718187     2.418515042701588
    C               -0.555616929619575    -0.961529997281813    -1.765065957298412
    C               -1.957616929619575    -1.340529997281813    -1.240065957298412
    H               -0.546616929619575    -0.984529997281813    -2.855065957298412
    H               -0.293616929619575     0.041470002718187    -1.433065957298412
    H                0.185383070380425    -1.666529997281813    -1.385065957298412
    H               -1.895616929619575    -1.428529997281813    -0.153065957298412
    H               -2.247586929619576    -2.317874997281812    -1.653239957298412
    H               -2.658026929619575    -0.525659997281813    -1.475456957298412

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-008LEU-017ALA-1-dimer.npy', np.array(charges))