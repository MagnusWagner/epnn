import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.121542704441867     2.392655383492734    -1.389095464131541
    C                0.232457295558133     0.970655383492735    -0.941095464131541
    O               -0.646542704441867     0.346655383492734    -0.408095464131541
    O                1.361457295558133     0.474655383492734    -1.092095464131541
    H               -0.309542704441867     3.018655383492734    -0.514095464131541
    H               -1.008542704441867     2.385655383492734    -2.027095464131540
    H                0.740658295558133     2.769109383492734    -1.959085464131540
    C               -0.167542704441867    -1.925344616507266     2.530904535868459
    N               -0.566542704441867    -1.932344616507266     1.086904535868459
    H               -0.153542704441867    -1.162344616507266     0.556904535868459
    H               -0.330542704441867    -2.807344616507266     0.637904535868459
    H               -1.565542704441867    -1.803344616507266     0.992904535868459
    H                0.763457295558133    -2.482344616507266     2.674904535868459
    H               -0.946542704441867    -2.355344616507266     3.167904535868459
    H                0.009931295558133    -0.870438616507266     2.787177535868460

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-028GLU-097LYS-1-dimer.npy', np.array(charges))