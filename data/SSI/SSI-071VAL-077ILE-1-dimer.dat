import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.419764950448137     1.415064247030616    -1.370892041312117
    C                0.933764950448137     1.312064247030616    -2.863892041312117
    H                1.959764950448137     2.344064247030616    -1.194892041312116
    H                0.548764950448137     1.430064247030616    -0.723892041312117
    H                2.053764950448137     0.566064247030616    -1.113892041312116
    H                0.249764950448137     2.136064247030616    -3.041892041312117
    H                1.744644950448137     1.402164247030616    -3.601702041312117
    H                0.396824950448137     0.373134247030616    -3.064162041312116
    C               -0.603235049551863    -0.838935752969384     0.921107958687883
    C               -2.038235049551863    -1.312935752969384     1.184107958687884
    C                0.250764950448137    -0.642935752969384     2.198107958687884
    H               -0.101235049551863    -1.540935752969384     0.254107958687883
    H               -0.638235049551863     0.126064247030616     0.429107958687883
    H               -2.469235049551863    -0.712935752969384     1.985107958687883
    H                0.382764950448137    -1.585935752969384     2.726107958687884
    H                1.231764950448137    -0.272935752969384     1.907107958687883
    H               -0.226235049551863     0.084064247030616     2.854107958687883
    H               -2.646575049551863    -1.173685752969384     0.278277958687883
    H               -2.043905049551863    -2.369415752969384     1.490414958687884

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-071VAL-077ILE-1-dimer.npy', np.array(charges))