import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.774821541987267    -1.846862875887104     0.359989671569250
    C                0.328821541987267    -3.129862875887103    -0.347010328430750
    H                1.573821541987267    -1.328862875887104    -0.169010328430750
    H               -0.082178458012733    -1.181862875887103     0.466989671569250
    H                1.124821541987267    -2.113862875887103     1.356989671569250
    H               -0.339178458012733    -3.674862875887103     0.319989671569250
    H                1.186771541987267    -3.772262875887103    -0.594470328430750
    H               -0.235788458012733    -2.872662875887103    -1.255340328430750
    C               -0.310178458012733     1.784137124112897    -0.201010328430750
    C               -0.788178458012733     3.195137124112897     0.182989671569250
    H                0.620821541987267     1.843137124112896    -0.770010328430750
    H               -0.144178458012733     1.186137124112897     0.695989671569250
    H               -1.067178458012733     1.293137124112897    -0.814010328430750
    H               -1.682178458012733     3.110137124112896     0.804989671569250
    H               -1.017928458012733     3.765347124112897    -0.729190328430750
    H               -0.000568458012733     3.716137124112897     0.747109671569250

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-184THR-220ALA-1-dimer.npy', np.array(charges))