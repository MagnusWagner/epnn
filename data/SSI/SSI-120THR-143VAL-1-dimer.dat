import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.146490153113355    -0.755689018362057     1.822671628199737
    C               -0.736509846886645    -1.794689018362057     2.517671628199737
    H                0.384490153113355     0.065310981637943     2.496671628199738
    H                1.073490153113355    -1.219689018362057     1.492671628199738
    H               -0.379509846886645    -0.359689018362057     0.954671628199737
    H               -0.868509846886644    -2.636689018362057     1.845671628199738
    H               -1.722179846886644    -1.370930018362057     2.760330628199737
    H               -0.239714846886645    -2.144458018362057     3.434653728199737
    C                0.340490153113355     1.196310981637943    -1.412328371800262
    C                0.254490153113355     1.355310981637943    -2.928328371800263
    H                1.168490153113356     1.781310981637943    -1.014328371800262
    H               -0.587509846886645     1.544310981637943    -0.956328371800262
    H                0.472490153113355     0.148310981637943    -1.142328371800262
    H               -0.562509846886645     0.730310981637943    -3.268328371800263
    H                1.191041153113355     1.049527981637943    -3.417582371800262
    H                0.010867153113355     2.397560981637943    -3.182042371800263

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-120THR-143VAL-1-dimer.npy', np.array(charges))