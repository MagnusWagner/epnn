import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.337722453665537     0.294513822043169    -1.355428192552485
    C                1.323722453665537     1.074513822043168    -2.672428192552484
    H                0.432722453665538    -0.295486177956831    -1.241428192552485
    H                2.192722453665538    -0.382486177956831    -1.341428192552485
    H                1.420722453665537     0.983513822043169    -0.514428192552485
    H                1.242722453665537     0.355513822043169    -3.487428192552485
    H                0.461294453665538     1.756353822043169    -2.708688192552485
    H                2.268892453665537     1.622393822043169    -2.800793192552484
    C               -0.910277546334462    -0.663486177956831     1.387571807447515
    C               -1.754277546334462    -0.704486177956831     2.644571807447516
    H               -0.361277546334462    -1.598486177956832     1.269571807447515
    H               -1.543277546334463    -0.517486177956831     0.516571807447515
    H               -0.204277546334462     0.164513822043169     1.445571807447515
    H               -2.277277546334462     0.246513822043169     2.733571807447515
    H               -1.095545546334463    -0.838819177956831     3.515221807447515
    H               -2.500388546334462    -1.508604177956831     2.562637807447516

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-032VAL-068LEU-1-dimer.npy', np.array(charges))