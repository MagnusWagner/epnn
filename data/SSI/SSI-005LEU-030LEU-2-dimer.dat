import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.845209582281861     0.417273884077550     1.790657696652149
    C               -0.080209582281862    -0.833726115922450     2.236657696652150
    H               -1.503209582281862     0.756273884077550     2.591657696652149
    H               -0.139209582281862     1.214273884077550     1.555657696652149
    H               -1.444209582281861     0.201273884077550     0.907657696652150
    H                0.607790417718139    -1.103726115922450     1.437657696652149
    H               -0.793529582281861    -1.659486115922450     2.375596696652150
    H                0.526640417718138    -0.635996115922450     3.132555696652149
    C                0.517790417718138     0.871273884077550    -1.641342303347850
    C                0.407790417718139    -0.459726115922450    -2.379342303347850
    H                1.079790417718138     0.740273884077550    -0.717342303347850
    H                1.009790417718138     1.601273884077550    -2.271342303347850
    H               -0.478209582281862     1.250273884077550    -1.410342303347851
    H               -0.104209582281862    -0.275726115922450    -3.323342303347850
    H               -0.172509582281862    -1.166586115922450    -1.768118303347850
    H                1.409150417718138    -0.863726115922450    -2.589247303347851

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-005LEU-030LEU-2-dimer.npy', np.array(charges))