import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.160317868705816    -1.374310698210791    -0.894405093363083
    C                0.939317868705816    -0.287310698210791    -1.928405093363083
    H                1.539317868705816    -2.282310698210790    -1.366405093363083
    H                1.866317868705816    -1.023310698210791    -0.146405093363083
    H                0.229317868705816    -1.597310698210791    -0.383405093363083
    H                0.630317868705816     0.633689301789209    -1.443405093363083
    H                0.150827868705816    -0.584882098210791    -2.635325093363083
    H                1.871167868705816    -0.104881198210791    -2.483725093363083
    C               -1.024682131294184     0.148689301789209     1.773594906636917
    C               -1.075682131294184     1.511689301789209     1.055594906636917
    H               -1.205682131294184     0.253689301789209     2.832594906636916
    H               -1.767682131294184    -0.528310698210791     1.349594906636917
    H               -0.037682131294184    -0.288310698210791     1.629594906636917
    H               -0.817682131294184     1.360689301789209     0.010594906636917
    H               -0.363412131294184     2.230752301789209     1.486424906636917
    H               -2.086452131294184     1.945294301789209     1.073904906636917

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-025ALA-037ALA-1-dimer.npy', np.array(charges))