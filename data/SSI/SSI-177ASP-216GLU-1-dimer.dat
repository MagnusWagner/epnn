import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -2 1
    --
    -2 1
    C                1.981038462948189    -0.271082631757394    -1.862241975156157
    C                0.504038462948189     0.082917368242606    -1.921241975156158
    O                0.158038462948189     1.279917368242606    -1.980241975156158
    O               -0.354961537051811    -0.827082631757394    -1.910241975156157
    H                2.204038462948189    -1.011082631757394    -2.633241975156158
    H                2.201038462948189    -0.712082631757394    -0.889241975156157
    H                2.642568462948189     0.596217368242606    -2.004251975156158
    C               -0.549961537051811     1.028917368242606     1.604758024843842
    C                0.922038462948189     1.349917368242606     1.690758024843842
    C               -0.813961537051811    -0.464082631757394     1.500758024843843
    O                0.026038462948189    -1.293082631757394     1.917758024843843
    O               -1.923961537051811    -0.837082631757394     1.032758024843843
    H               -1.046961537051811     1.420917368242606     2.495758024843842
    H               -0.982961537051811     1.514917368242606     0.727758024843843
    H                1.427038462948189     0.899917368242606     0.834758024843843
    H                1.329038462948189     0.926917368242606     2.602758024843843
    H                1.144988462948189     2.426557368242606     1.724558024843843

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-177ASP-216GLU-1-dimer.npy', np.array(charges))