import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.119855971112273    -0.213369400210912    -1.979202071819855
    C               -1.299855971112273     0.086630599789088    -2.852202071819855
    H                0.229144028887727    -1.202369400210912    -2.222202071819855
    H                0.667144028887727     0.531630599789087    -2.101202071819855
    H               -0.451855971112273    -0.223369400210912    -0.943202071819855
    H               -1.944855971112273     0.776630599789088    -2.309202071819855
    H               -1.882695971112273    -0.809399400210912    -3.111878071819855
    H               -1.003845971112273     0.569900599789087    -3.794977071819856
    C                0.349144028887727    -0.167369400210912     1.779797928180145
    C                1.083144028887727     0.290630599789088     3.050797928180145
    H                0.444144028887727    -1.243369400210913     1.668797928180145
    H               -0.706855971112273     0.094630599789088     1.829797928180145
    H                0.762144028887727     0.334630599789087     0.904797928180145
    H                1.059144028887727     1.380630599789088     3.097797928180145
    H                2.128704028887727    -0.050649400210912     3.069017928180145
    H                0.549944028887727    -0.117489400210912     3.922077928180145

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-020LEU-038ILE-1-dimer.npy', np.array(charges))