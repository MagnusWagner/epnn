import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.004177161380014    -1.614255134749395    -1.152851491829717
    C               -1.398822838619986    -1.246255134749395    -1.616851491829717
    H                0.684177161380014    -0.795255134749395    -1.382851491829717
    H                0.006177161380014    -1.780255134749395    -0.078851491829717
    H                0.345177161380014    -2.519255134749395    -1.656851491829717
    H               -1.695822838619986    -0.323255134749395    -1.121851491829717
    H               -1.370902838619986    -1.088735134749395    -2.705156491829717
    H               -2.110132838619986    -2.039562134749394    -1.343545491829716
    C                0.077177161380014     1.181744865250606     1.016148508170283
    C                1.316177161380014     1.677744865250606     1.749148508170284
    H                0.183177161380014     1.342744865250605    -0.057851491829717
    H               -0.060822838619986     0.121744865250605     1.222148508170283
    H               -0.800822838619986     1.718744865250605     1.376148508170284
    H                1.193177161380014     1.464744865250605     2.809148508170283
    H                1.430667161380014     2.761794865250605     1.601746508170283
    H                2.211327161380014     1.148694865250605     1.390228508170283

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-003LEU-033LEU-1-dimer.npy', np.array(charges))