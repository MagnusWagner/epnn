import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                1.517206752452605    -2.377994857859059     0.869586300274484
    C                0.125206752452605    -2.120994857859059     1.349586300274484
    O               -0.608793247547395    -3.046994857859059     1.692586300274484
    N               -0.264793247547395    -0.864994857859059     1.359586300274484
    H               -1.181793247547395    -0.629994857859059     1.694586300274484
    H                0.383206752452604    -0.133994857859059     1.085586300274484
    H                1.959206752452605    -1.470994857859059     0.454586300274484
    H                1.435206752452605    -3.114994857859059     0.071586300274484
    H                2.149806752452605    -2.786224857859059     1.671556300274484
    C               -0.487793247547396     3.250005142140941    -2.117413699725516
    C               -0.158793247547395     2.016005142140941    -1.277413699725516
    O               -1.022793247547396     1.642005142140941    -0.443413699725516
    O                0.930206752452605     1.423005142140941    -1.435413699725516
    H               -0.366793247547396     4.142005142140941    -1.499413699725516
    H               -1.544793247547395     3.208005142140941    -2.390413699725515
    H                0.119346752452605     3.386035142140941    -3.024540699725516

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-026ASN-058GLU-1-dimer.npy', np.array(charges))