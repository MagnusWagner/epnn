import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C               -0.364318047330663    -1.012496599202204     0.230261431741875
    C               -0.503318047330663    -2.449496599202204    -0.254738568258125
    C               -1.391318047330663    -0.028496599202204    -0.305738568258125
    O               -2.078318047330664    -0.361496599202204    -1.292738568258125
    O               -1.484318047330663     1.088503400797796     0.270261431741875
    H               -0.371318047330663    -0.997496599202204     1.321261431741875
    H                0.614681952669337    -0.648496599202204    -0.082738568258125
    H               -0.508318047330664    -2.446496599202205    -1.345738568258125
    H               -1.438018047330663    -2.893476599202204     0.118391431741875
    H                0.351481952669337    -3.054326599202204     0.082151431741875
    C                2.221681952669337     1.775503400797795     0.596261431741875
    C                3.471681952669337     0.920503400797796     0.749261431741875
    H                1.799681952669336     1.639503400797796    -0.397738568258125
    H                1.475681952669337     1.444503400797795     1.317261431741875
    H                2.444681952669337     2.827503400797795     0.778261431741875
    H                3.166681952669337    -0.099496599202204     0.536261431741875
    H                4.251931952669336     1.217913400797796     0.033191431741875
    H                3.861521952669337     0.932013400797796     1.777801431741875

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-157ASP-202VAL-1-dimer.npy', np.array(charges))