import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.380579171210859     1.887343580119966    -1.700987059729700
    C                0.581579171210859     3.085343580119966    -2.624987059729700
    H                1.173579171210859     1.158343580119966    -1.871987059729700
    H                0.415579171210859     2.222343580119966    -0.664987059729700
    H               -0.590420828789141     1.427343580119966    -1.882987059729700
    H               -0.252420828789141     3.771343580119966    -2.514987059729699
    H                0.675789171210859     2.761724580119966    -3.672077059729700
    H                1.496339171210858     3.620620580119966    -2.330547059729700
    C               -0.501420828789141    -0.381656419880034     2.202012940270300
    C               -0.251420828789141    -1.340656419880034     1.081012940270301
    O               -0.648420828789141    -2.498656419880034     1.162012940270300
    N                0.380579171210859    -0.872656419880034     0.015012940270300
    H                0.547579171210859    -1.500656419880034    -0.756987059729700
    H                0.688579171210859     0.084343580119966    -0.012987059729700
    H                0.117579171210859     0.509343580119966     2.083012940270300
    H               -0.197420828789141    -0.871656419880034     3.128012940270300
    H               -1.564050828789141    -0.104259419880034     2.264142940270300

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-111LEU-116ASN-1-dimer.npy', np.array(charges))