import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.206975821262646    -0.474529929730403    -0.619261898207047
    C               -2.758975821262646    -0.290529929730403    -0.751261898207047
    H               -0.942975821262646    -0.508529929730403     0.428738101792953
    H               -0.919975821262646    -1.417529929730403    -1.076261898207047
    H               -0.672975821262646     0.339470070269597    -1.106261898207047
    H               -3.248975821262646    -1.095529929730403    -0.202261898207047
    H               -3.024975821262646    -0.430529929730403    -1.800261898207047
    H               -3.157575821262646     0.678010070269597    -0.415032898207047
    C                1.902024178737354    -0.371529929730403     0.791738101792953
    C                2.074024178737354     1.144470070269597     0.587738101792953
    H                0.977024178737354    -0.595529929730403     1.314738101792953
    H                1.901024178737354    -0.864529929730403    -0.180261898207047
    H                2.729024178737354    -0.765529929730403     1.382738101792953
    H                1.400024178737354     1.435470070269597    -0.216261898207047
    H                1.750434178737354     1.696060070269597     1.482745101792953
    H                3.089704178737354     1.434870070269597     0.281050101792953

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-112ILE-125VAL-1-dimer.npy', np.array(charges))