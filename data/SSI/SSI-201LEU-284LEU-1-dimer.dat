import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.612292413915849    -1.658520628130004    -0.605583532667949
    C                1.124292413915849    -3.080520628130004    -0.845583532667949
    H                0.433292413915849    -1.153520628130004    -1.554583532667949
    H               -0.317707586084151    -1.691520628130004    -0.041583532667949
    H                1.346292413915849    -1.112520628130004    -0.013583532667949
    H                1.366292413915849    -3.548520628130004     0.103416467332051
    H                1.989822413915849    -3.049890628130004    -1.523758532667949
    H                0.313602413915849    -3.643940628130005    -1.330693532667949
    C               -0.335707586084151     1.839479371869996     0.629416467332051
    C               -1.394707586084151     2.899479371869996     0.822416467332051
    H                0.654292413915849     2.289479371869996     0.593416467332051
    H               -0.362707586084151     1.144479371869996     1.466416467332051
    H               -0.511707586084151     1.287479371869996    -0.294583532667949
    H               -1.244707586084151     3.389479371869996     1.782416467332051
    H               -1.334887586084151     3.624569371869996    -0.002609532667949
    H               -2.405337586084151     2.465409371869996     0.807801467332051

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-201LEU-284LEU-1-dimer.npy', np.array(charges))