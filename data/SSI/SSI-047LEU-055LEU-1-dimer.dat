import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.738533818159591    -0.762111656400236     1.111700970937874
    C               -1.473533818159591    -1.852111656400236     1.883700970937874
    H                0.196466181840409    -1.152111656400236     0.706700970937874
    H               -1.370533818159591    -0.430111656400236     0.289700970937874
    H               -0.515533818159591     0.087888343599764     1.755700970937874
    H               -2.460533818159591    -1.517111656400236     2.172700970937874
    H               -0.920309818159591    -2.076275056400236     2.807656970937873
    H               -1.579931818159591    -2.746722656400236     1.252550970937874
    C                0.439466181840409     1.502888343599764    -1.208299029062126
    C                1.775466181840409     1.109888343599764    -1.788299029062127
    H                0.098466181840409     2.424888343599764    -1.675299029062126
    H               -0.285533818159591     0.714888343599764    -1.407299029062126
    H                0.525466181840409     1.645888343599764    -0.131299029062126
    H                2.149466181840409     0.243888343599764    -1.256299029062126
    H                2.444966181840409     1.971193343599764    -1.647160729062126
    H                1.683436181840409     0.850922343599764    -2.853413029062126

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-047LEU-055LEU-1-dimer.npy', np.array(charges))