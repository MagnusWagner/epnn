import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.320205742228156     0.210868242555072    -1.428693695020603
    C               -1.329205742228156     1.307868242555072    -2.485693695020602
    H               -0.650205742228156    -0.601131757444928    -1.708693695020603
    H               -0.970205742228156     0.635868242555072    -0.489693695020603
    H               -2.331205742228156    -0.170131757444928    -1.289693695020603
    H               -0.308205742228156     1.657868242555072    -2.647693695020603
    H               -1.900205742228156     2.132868242555072    -2.060693695020603
    H               -1.769080742228156     0.995718242555072    -3.444373695020603
    C                1.123794257771844    -0.502131757444928     1.264306304979397
    C                1.519794257771844    -1.019131757444928     2.646306304979397
    H                0.414794257771844     0.319868242555072     1.369306304979397
    H                2.008794257771844    -0.145131757444928     0.736306304979397
    H                0.666794257771844    -1.305131757444928     0.684306304979397
    H                2.262794257771844    -1.807131757444928     2.509306304979397
    H                0.646641257771844    -1.459481757444928     3.149986304979397
    H                1.998624257771844    -0.223961757444928     3.236576304979397

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-020ILE-309ALA-1-dimer.npy', np.array(charges))