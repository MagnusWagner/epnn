import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.503864512213900    -0.738450083773533     1.531286331380111
    C                1.638864512213900    -1.620450083773533     2.044286331380111
    H                0.898864512213900     0.169549916226467     1.075286331380112
    H               -0.068135487786100    -1.286450083773533     0.782286331380112
    H               -0.161135487786100    -0.471450083773533     2.352286331380112
    H                1.191864512213900    -2.549450083773533     2.401286331380112
    H                2.144364512213900    -1.132750083773533     2.890816331380111
    H                2.338634512213900    -1.875105083773533     1.234666331380112
    C               -1.359135487786100     0.974549916226467    -1.118713668619888
    C               -0.771135487786100     1.392549916226467    -2.454713668619889
    H               -0.776135487786100     1.390549916226467    -0.296713668619888
    H               -2.384135487786100     1.339549916226467    -1.040713668619888
    H               -1.371135487786100    -0.113450083773533    -1.041713668619888
    H               -1.422135487786100     0.977549916226467    -3.224713668619889
    H                0.234784512213900     0.967493916226467    -2.586823668619889
    H               -0.774035487786100     2.486329916226467    -2.571493668619889

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-040VAL-063VAL-1-dimer.npy', np.array(charges))