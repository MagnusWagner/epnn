import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                2.650429232871931    -0.785695430321766    -1.720901645994176
    N                1.302429232871931    -0.955695430321766    -1.120901645994176
    H                0.575429232871931    -0.968695430321766    -1.825901645994176
    H                1.240429232871931    -1.824695430321767    -0.603901645994176
    H                1.062429232871931    -0.203695430321766    -0.467901645994176
    H                2.882429232871931    -1.664695430321767    -2.330901645994176
    H                3.413429232871931    -0.719695430321766    -0.937901645994176
    H                2.721179232871931     0.101236569678234    -2.367701645994176
    C               -2.050570767128069     0.543304569678234     1.848098354005824
    C               -0.992570767128069     0.471304569678234     0.719098354005824
    O                0.212429232871931     0.430304569678234     0.944098354005824
    O               -1.365570767128069     0.459304569678234    -0.457901645994176
    H               -2.714570767128069    -0.320695430321766     1.775098354005824
    H               -2.649570767128069     1.436304569678233     1.669098354005824
    H               -1.650440767128069     0.599019569678234     2.871228354005824

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-144LYS-161GLU-1-dimer.npy', np.array(charges))