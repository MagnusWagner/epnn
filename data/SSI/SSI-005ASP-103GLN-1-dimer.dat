import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                2.035359656147723    -1.520195332208248     0.760820163684514
    C                1.818359656147723    -0.168195332208248     1.426820163684514
    O                0.655359656147723     0.281804667791752     1.516820163684514
    O                2.814359656147723     0.457804667791752     1.851820163684514
    H                2.730359656147723    -1.375195332208248    -0.067179836315486
    H                1.096359656147723    -1.892195332208248     0.346820163684514
    H                2.458079656147723    -2.261578332208249     1.454834163684514
    C               -3.146640343852277     0.170804667791752    -1.997179836315486
    C               -1.756640343852277     0.205804667791752    -1.398179836315486
    O               -0.847640343852277    -0.499195332208248    -1.837179836315486
    N               -1.572640343852277     1.034804667791752    -0.390179836315486
    H               -0.723640343852277     0.886804667791752     0.147820163684514
    H               -2.375640343852277     1.520804667791752    -0.001179836315486
    H               -3.325640343852277     1.162804667791752    -2.408179836315486
    H               -3.870640343852277    -0.016195332208248    -1.202179836315486
    H               -3.255770343852277    -0.599577332208248    -2.774741836315485

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-005ASP-103GLN-1-dimer.npy', np.array(charges))