import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.121011777938035     1.426984699731008     0.940741156490450
    C               -1.071011777938035     2.485984699731008     0.413741156490450
    H                0.784988222061965     1.393984699731008     0.336741156490450
    H                0.142988222061965     1.634984699731008     1.977741156490450
    H               -0.671011777938035     0.491984699731008     0.912741156490450
    H               -2.036011777938036     2.337984699731008     0.896741156490450
    H               -1.200389777938035     2.409076699731008    -0.675908843509550
    H               -0.706292777938035     3.488238499731009     0.682941156490450
    C                0.835988222061965    -1.267015300268992    -0.479258843509550
    C                0.365988222061965    -2.649015300268991    -0.871258843509550
    H                1.918988222061965    -1.181015300268992    -0.569258843509550
    H                0.362988222061965    -0.531015300268992    -1.130258843509550
    H                0.571988222061965    -1.068015300268992     0.540741156490450
    H                0.487988222061965    -2.737015300268991    -1.951258843509550
    H               -0.703011777938035    -2.740015300268992    -0.678258843509550
    H                0.928281222061965    -3.462728300268992    -0.389908843509550

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-018LEU-039ILE-1-dimer.npy', np.array(charges))