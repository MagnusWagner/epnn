import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.156568637759246     1.791659453780807    -0.628789693698981
    C                1.868568637759246     1.665659453780808     0.749210306301019
    H                1.484568637759246     1.000659453780808    -1.305789693698981
    H                0.082568637759246     1.678659453780807    -0.487789693698981
    H                1.347568637759246     2.756659453780808    -1.082789693698981
    H                1.750568637759246     0.648659453780808     1.122210306301019
    H                2.931428637759247     1.914729453780807     0.613937306301019
    H                1.444648637759246     2.375949453780808     1.474315306301019
    C               -1.001431362240754    -1.158340546219192    -0.023789693698981
    C               -2.019431362240754    -2.305340546219192    -0.095789693698981
    H               -0.801431362240754    -0.758340546219192    -1.018789693698981
    H               -1.391431362240754    -0.357340546219192     0.606210306301019
    H               -0.066431362240754    -1.494340546219193     0.428210306301019
    H               -2.161431362240754    -2.739340546219192     0.888210306301019
    H               -1.705051362240754    -3.084400546219192    -0.805876693698981
    H               -2.966471362240754    -1.865800546219192    -0.442074693698981

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-174VAL-203VAL-1-dimer.npy', np.array(charges))