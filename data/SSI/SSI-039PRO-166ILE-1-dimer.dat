import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.021003277009559     1.440926137576468    -0.363665932784951
    C                0.009996722990441     1.181926137576468     1.180334067215049
    C               -1.170003277009559     2.421926137576469    -0.475665932784951
    H               -0.253003277009559     0.511926137576468    -0.874665932784951
    H                0.876996722990441     1.878926137576468    -0.798665932784951
    H               -0.709003277009559     0.407926137576468     1.463334067215049
    H                0.999996722990441     0.884926137576468     1.511334067215049
    H               -1.188003277009559     2.994926137576468    -1.400665932784951
    H               -0.283133277009559     2.141386137576469     1.631464067215048
    H               -0.993143277009559     3.078086137576468     0.389304067215049
    H               -2.127923277009558     1.889426137576468    -0.381695932784951
    C               -0.131003277009559    -2.256073862423531    -0.007665932784951
    C                1.317996722990441    -2.698073862423532    -0.364665932784951
    H               -0.118003277009559    -1.625073862423532     0.879334067215049
    H               -0.565003277009559    -1.699073862423532    -0.837665932784951
    H               -0.750003277009559    -3.132073862423531     0.188334067215049
    H                1.926996722990441    -1.816073862423532    -0.573665932784951
    H                1.297996722990441    -3.326073862423531    -1.257665932784951
    H                1.813986722990441    -3.268283862423532     0.434624067215049

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-039PRO-166ILE-1-dimer.npy', np.array(charges))