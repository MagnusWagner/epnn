import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.844393803716362     0.427463249570025    -0.817373151132191
    C               -2.009393803716362     1.812463249570025    -1.408373151132191
    H               -1.367393803716362     0.506463249570025     0.157626848867809
    H               -2.824393803716363    -0.031536750429975    -0.679373151132191
    H               -1.238393803716362    -0.200536750429975    -1.472373151132192
    H               -2.590393803716362     2.418463249570025    -0.714373151132191
    H               -1.028323803716362     2.277482249570025    -1.585183151132191
    H               -2.560463803716362     1.698922249570025    -2.353583151132191
    C                1.382606196283638    -0.865536750429975     0.636626848867809
    C                2.478606196283638    -1.366536750429975     1.587626848867808
    H                1.801606196283638    -0.157536750429975    -0.080373151132191
    H                0.955606196283638    -1.706536750429975     0.089626848867809
    H                0.580606196283638    -0.383536750429975     1.190626848867808
    H                2.006606196283638    -2.014536750429975     2.326626848867809
    H                2.965886196283638    -0.524406050429975     2.100826848867809
    H                3.210646196283638    -1.976208750429975     1.037696848867809

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-054LEU-069VAL-1-dimer.npy', np.array(charges))