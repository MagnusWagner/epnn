import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.103661609535503     1.067423815363923    -0.188608347761005
    C               -1.481661609535503     2.517423815363922    -0.176608347761005
    H               -1.309661609535503     0.628423815363923    -1.164608347761005
    H               -0.037661609535503     0.970423815363923     0.009391652238995
    H               -1.662661609535503     0.526423815363923     0.575391652238995
    H               -0.876661609535503     3.034423815363923    -0.922608347761005
    H               -2.543761609535503     2.645733815363922    -0.432508347761005
    H               -1.241651609535503     2.947133815363922     0.807131652238995
    C                1.331338390464497    -1.462576184636078     0.874391652238995
    C                1.251338390464497    -2.126576184636078    -0.506608347761005
    H                1.993338390464497    -0.598576184636078     0.846391652238995
    H                0.341338390464497    -1.125576184636078     1.178391652238995
    H                1.699338390464497    -2.164576184636078     1.617391652238995
    H                0.980338390464497    -1.355576184636077    -1.228608347761005
    H                2.221368390464496    -2.558486184636077    -0.793838347761005
    H                0.467848390464497    -2.898516184636078    -0.522478347761005

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-031VAL-071VAL-1-dimer.npy', np.array(charges))