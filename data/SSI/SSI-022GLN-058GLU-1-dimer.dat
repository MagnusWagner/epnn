import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                0.093110377933962     0.837568598008099     1.613178005211541
    C                1.306110377933962     0.343568598008099     2.398178005211541
    C               -0.895889622066038     1.628568598008099     2.477178005211541
    H                0.414110377933962     1.432568598008100     0.758178005211541
    H               -0.438889622066038    -0.040431401991901     1.274178005211541
    H                0.931110377933962    -0.231431401991901     3.248178005211541
    H               -1.208889622066038     0.984568598008099     3.301178005211541
    H               -0.422889622066038     2.496568598008099     2.921178005211541
    H                1.885670377933962     1.193338598008099     2.788058005211541
    H                1.909990377933962    -0.352221401991901     1.797168005211541
    H               -1.786169622066038     1.965318598008099     1.925808005211541
    C               -0.424889622066038     0.466568598008099    -2.426821994788459
    C               -0.095889622066038    -0.767431401991901    -1.586821994788459
    O                0.993110377933962    -1.360431401991901    -1.744821994788459
    O               -0.959889622066038    -1.141431401991901    -0.752821994788459
    H               -0.303889622066038     1.358568598008099    -1.808821994788459
    H               -1.481889622066038     0.424568598008099    -2.699821994788459
    H                0.182250377933962     0.602598598008099    -3.333948994788459

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-022GLN-058GLU-1-dimer.npy', np.array(charges))