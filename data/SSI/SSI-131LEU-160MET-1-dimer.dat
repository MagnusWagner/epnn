import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.850668425516331    -1.838927970594395    -0.490143460207771
    C                2.925668425516330    -2.908927970594394    -0.629143460207771
    H                2.080668425516331    -1.120927970594395     0.287856539792229
    H                1.702668425516331    -1.326927970594395    -1.440143460207771
    H                0.915668425516331    -2.330927970594394    -0.223143460207771
    H                2.485668425516331    -3.772927970594395    -1.126143460207771
    H                3.283958425516331    -3.220167970594394     0.363206539792229
    H                3.763528425516331    -2.555466970594394    -1.248058460207771
    C               -0.839331574483669    -0.004927970594395     1.197856539792229
    C               -1.807331574483669     2.502072029405606     0.423856539792229
    S               -0.982331574483669     1.052072029405605    -0.275143460207771
    H               -1.811331574483669    -0.102927970594395     1.679856539792229
    H               -0.488331574483669    -0.993927970594395     0.909856539792229
    H               -0.130331574483669     0.435072029405605     1.897856539792229
    H               -2.720331574483669     2.180072029405605     0.925856539792229
    H               -2.090331574483669     3.153072029405605    -0.405143460207771
    H               -1.185841574483670     3.079072029405605     1.124445539792229

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-131LEU-160MET-1-dimer.npy', np.array(charges))