import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.834889578401457     0.286070992644764     0.653724181061790
    C               -1.113889578401456    -0.450929007355236     1.766724181061790
    H               -2.879889578401456     0.430070992644764     0.930724181061790
    H               -1.409889578401456     1.278070992644764     0.502724181061790
    H               -1.803889578401456    -0.291929007355236    -0.269275818938210
    H               -0.092889578401456    -0.680929007355236     1.489724181061790
    H               -1.630719578401456    -1.400475007355236     1.969824181061790
    H               -1.065819578401456     0.216222192644764     2.639994181061790
    C                0.973110421598544    -0.065929007355236    -0.666275818938210
    C                1.971110421598544     0.224070992644764    -1.757275818938210
    H                0.364110421598544    -0.938929007355236    -0.891275818938210
    H                1.530110421598544    -0.250929007355236     0.249724181061790
    H                0.370110421598544     0.828070992644764    -0.553275818938210
    H                2.685110421598544    -0.598929007355236    -1.829275818938210
    H                2.518110421598543     1.119070992644764    -1.477275818938210
    H                1.469820421598544     0.370580492644764    -2.725385818938210

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-123ALA-158ILE-1-dimer.npy', np.array(charges))