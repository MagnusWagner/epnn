import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.686075256025661     1.472212678672422    -0.598120169758319
    C               -0.169924743974339     2.550212678672422    -1.286120169758319
    H                1.281075256025661     0.931212678672422    -1.335120169758319
    H                1.344075256025661     1.953212678672422     0.117879830241681
    H                0.057075256025661     0.773212678672422    -0.050120169758319
    H               -0.735924743974338     3.090212678672422    -0.528120169758319
    H               -0.862074743974338     2.094052678672422    -2.009206069758319
    H                0.488995256025661     3.254492678672422    -1.815098869758319
    C               -0.237924743974339    -1.576787321327578     1.571879830241681
    C               -0.281924743974339    -2.453787321327578     0.311879830241681
    H               -0.359924743974339    -2.188787321327578     2.464879830241681
    H                0.716075256025661    -1.050787321327578     1.623879830241681
    H               -1.044924743974339    -0.845787321327578     1.530879830241681
    H               -0.147924743974339    -1.800787321327578    -0.544120169758319
    H               -1.256604743974339    -2.956527321327578     0.226657830241681
    H                0.564125256025662    -3.156687321327578     0.323331830241681

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-176THR-180LEU-1-dimer.npy', np.array(charges))