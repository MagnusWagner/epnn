import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                0.338639528535767     0.424011151774169    -0.181957663371828
    C                1.849639528535768     0.538011151774169     0.071042336628172
    C               -0.277360471464233     1.651011151774169    -0.848957663371828
    O                0.469639528535767     2.548011151774169    -1.300957663371827
    O               -1.523360471464232     1.706011151774169    -0.931957663371828
    H                0.176639528535767    -0.435988848225831    -0.834957663371828
    H               -0.177360471464233     0.221011151774169     0.757042336628172
    H                2.356639528535768     0.726011151774169    -0.875957663371827
    H                2.189639528535767    -0.433988848225831     0.426042336628172
    H                2.152269528535767     1.302091151774169     0.802212336628172
    C               -0.030360471464233    -2.909988848225831     1.091042336628173
    C               -0.823360471464233    -3.802988848225831     2.032042336628172
    H               -0.548360471464233    -2.792988848225831     0.142042336628173
    H                0.082639528535767    -1.929988848225831     1.552042336628173
    H                0.962639528535767    -3.325988848225831     0.919042336628172
    H               -1.815360471464233    -3.371988848225831     2.158042336628172
    H               -0.894550471464233    -4.816878848225831     1.611382336628173
    H               -0.349390471464233    -3.838388848225831     3.024062336628172

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-024GLU-041LEU-1-dimer.npy', np.array(charges))