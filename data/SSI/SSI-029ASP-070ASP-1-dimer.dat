import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -2 1
    --
    -2 1
    C                0.680965495645087     3.178486696947607     1.641322019921900
    C               -0.061034504354913     1.851486696947607     1.669322019921900
    O                0.253965495645087     1.019486696947607     0.796322019921900
    O               -0.944034504354913     1.659486696947607     2.529322019921900
    H                0.558965495645087     3.587486696947607     0.636322019921900
    H                1.747965495645087     3.041486696947608     1.788322019921900
    H                0.297861495645087     3.918246696947607     2.359642019921900
    C                0.601965495645087    -0.705513303052393    -1.643677980078100
    C                0.994965495645087    -1.147513303052393    -3.062677980078099
    C               -0.275034504354913    -1.704513303052393    -0.872677980078100
    O               -0.501034504354913    -2.840513303052393    -1.342677980078100
    O               -0.746034504354913    -1.357513303052393     0.238322019921900
    H                1.509965495645087    -0.564513303052393    -1.064677980078100
    H                0.091965495645087     0.255486696947607    -1.724677980078100
    H                1.821965495645087    -0.504513303052393    -3.336677980078100
    H                0.174574495645087    -0.996703303052393    -3.779767980078100
    H                1.419515495645087    -2.160513303052393    -3.122607980078100

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-029ASP-070ASP-1-dimer.npy', np.array(charges))