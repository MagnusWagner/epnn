import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.934873764463822    -0.255315381811701    -1.630184098292340
    C               -0.875873764463822    -1.429315381811701    -2.597184098292340
    H               -0.855873764463822    -0.626315381811701    -0.608184098292340
    H               -0.116873764463822     0.435684618188299    -1.835184098292340
    H               -1.882873764463822     0.271684618188299    -1.746184098292340
    H               -1.032873764463822    -1.040315381811701    -3.604184098292340
    H               -1.673530764463822    -2.153915381811701    -2.376491098292340
    H                0.121742235536178    -1.892465381811701    -2.581337098292340
    C                1.104126235536178     0.347684618188299     1.562815901707660
    C                0.704126235536178     1.327684618188299     2.673815901707660
    H                0.895126235536178    -0.681315381811701     1.857815901707660
    H                0.549126235536178     0.579684618188299     0.657815901707660
    H                2.168126235536178     0.444684618188299     1.339815901707660
    H                0.735126235536178     2.334684618188299     2.253815901707660
    H                1.439159635536178     1.293494618188299     3.491469301707661
    H               -0.316672764463822     1.144684618188299     3.040531501707660

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-042ALA-082ILE-1-dimer.npy', np.array(charges))