import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.526621074421503     1.654719577232893     0.229692006444264
    C                1.804621074421503     1.693719577232893    -1.266307993555736
    H                2.364621074421503     1.207719577232893     0.761692006444264
    H                1.390621074421503     2.663719577232893     0.603692006444264
    H                0.622621074421503     1.078719577232893     0.414692006444264
    H                2.736621074421503     2.234719577232893    -1.426307993555735
    H                1.919397074421503     0.670059577232893    -1.652242993555736
    H                0.996748074421503     2.221972577232893    -1.793839993555736
    C               -1.167378925578497    -1.096280422767107     0.496692006444264
    C               -2.161378925578497    -2.258280422767108     0.539692006444264
    H               -0.941378925578497    -0.821280422767107    -0.529307993555736
    H               -1.602378925578497    -0.228280422767107     0.990692006444264
    H               -0.247378925578497    -1.371280422767107     1.013692006444264
    H               -3.012378925578497    -1.990280422767107    -0.085307993555736
    H               -1.700633925578497    -3.178330422767107     0.150826006444264
    H               -2.556059925578497    -2.414568422767107     1.554483006444265

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-006VAL-053LEU-1-dimer.npy', np.array(charges))