import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.607987537860222     0.264986011413982    -1.172270818054933
    C                3.088987537860222    -0.098013988586018     0.032729181945067
    S                1.342987537860222    -0.450013988586018     0.308729181945067
    H                1.190987537860222    -0.013013988586018    -2.053270818054933
    H               -0.388012462139778    -0.140013988586018    -1.309270818054933
    H                0.541987537860222     1.349986011413982    -1.081270818054933
    H                3.481987537860222    -0.842013988586018    -0.659270818054933
    H                3.618987537860222    -0.175013988586018     0.977729181945067
    H                3.235217537860222     0.909636011413982    -0.383510818054933
    C               -2.950012462139778     0.485986011413982    -0.393270818054933
    C               -3.649012462139778     0.263986011413982     0.949729181945067
    H               -3.689012462139778     0.628986011413982    -1.184270818054933
    H               -2.308012462139778     1.367986011413982    -0.342270818054933
    H               -2.324012462139778    -0.362013988586018    -0.657270818054933
    H               -2.883012462139778     0.253986011413982     1.724729181945067
    H               -4.175752462139778    -0.701693988586018     0.948299181945067
    H               -4.351852462139779     1.081456011413982     1.168249181945067

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-157MET-181ILE-1-dimer.npy', np.array(charges))