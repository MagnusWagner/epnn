import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C               -1.704344332224086     0.080459694521288    -3.525666973524101
    C               -0.872344332224086     0.529459694521288    -2.328666973524101
    O               -1.163344332224086     0.117459694521288    -1.189666973524101
    O                0.100655667775914     1.288459694521288    -2.535666973524101
    H               -1.153344332224086    -0.712540305478712    -4.026666973524101
    H               -1.826344332224086     0.904459694521288    -4.231666973524101
    H               -2.690334332224086    -0.309770305478712    -3.233176973524101
    C                1.303655667775914    -1.868540305478712     2.708333026475899
    C                0.917655667775914    -0.427540305478712     2.426333026475899
    O                1.244655667775914     0.485459694521288     3.185333026475899
    N                0.226655667775914    -0.206540305478712     1.323333026475899
    H               -0.089344332224086     0.715459694521288     1.105333026475899
    H               -0.239344332224086    -0.980540305478712     0.861333026475899
    H                2.209655667775913    -2.099540305478712     2.151333026475899
    H                0.516655667775914    -2.524540305478712     2.347333026475899
    H                1.466635667775914    -2.063970305478712     3.778495026475899

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-113ASP-195GLN-1-dimer.npy', np.array(charges))