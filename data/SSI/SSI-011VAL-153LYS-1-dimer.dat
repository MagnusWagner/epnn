import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.974408480160831    -0.901869095255873     0.209392171995695
    C                3.222408480160832    -1.404869095255873     0.941392171995695
    H                1.396408480160831    -1.751869095255873    -0.152607828004305
    H                1.347408480160831    -0.328869095255873     0.889392171995695
    H                2.265408480160831    -0.282869095255873    -0.639607828004305
    H                2.893408480160832    -1.985869095255873     1.804392171995695
    H                3.846794480160832    -0.567329095255873     1.285882171995695
    H                3.807563480160832    -2.081113095255872     0.300852171995695
    C               -1.335591519839169     0.434130904744127    -0.228607828004305
    C               -1.233591519839168     1.442130904744127    -1.358607828004305
    C               -2.717591519839169     0.460130904744127     0.409392171995695
    H               -1.086591519839168    -0.566869095255873    -0.582607828004305
    H               -0.631591519839169     0.708130904744127     0.557392171995695
    H               -1.705591519839169     2.372130904744127    -1.039607828004305
    H               -1.749591519839168     1.067130904744127    -2.243607828004305
    H               -2.700591519839168    -0.173869095255873     1.301392171995695
    H               -2.938591519839169     1.483130904744127     0.733392171995695
    H               -0.182731519839169     1.652880904744127    -1.606167828004305
    H               -3.490601519839168     0.102160904744127    -0.286537828004305

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-011VAL-153LYS-1-dimer.npy', np.array(charges))