import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.477119477850741    -1.736429501145862    -1.162168510033005
    C                0.711880522149259    -1.714429501145862    -2.132168510033004
    H               -0.233119477850741    -1.184429501145862    -0.257168510033005
    H               -1.364119477850741    -1.298429501145862    -1.617168510033005
    H               -0.737119477850741    -2.761429501145862    -0.896168510033005
    H                0.478880522149259    -2.396429501145862    -2.947168510033005
    H                1.637670522149259    -2.051469501145862    -1.642968510033005
    H                0.853760522149259    -0.707679501145862    -2.552068510033005
    C               -0.388119477850741     1.212570498854138     1.145831489966995
    C                0.157880522149259     2.236570498854138     2.154831489966996
    H               -0.428119477850741     0.222570498854138     1.601831489966995
    H               -1.387119477850741     1.497570498854138     0.814831489966995
    H                0.261880522149259     1.181570498854138     0.271831489966995
    H                0.037880522149259     3.226570498854138     1.711831489966995
    H                1.231080522149260     2.079120498854138     2.337731489966995
    H               -0.405399477850741     2.212920498854138     3.099331489966996

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-062ILE-067ILE-1-dimer.npy', np.array(charges))