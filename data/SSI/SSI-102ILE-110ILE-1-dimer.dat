import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.669756867891946    -0.212231969412763    -2.104116639237100
    C                0.298243132108054     0.800768030587237    -2.698116639237100
    H               -0.299756867891946    -1.226231969412763    -2.228116639237100
    H               -0.786756867891946    -0.015231969412763    -1.041116639237100
    H               -1.641756867891946    -0.119231969412763    -2.587116639237100
    H                1.265243132108054     0.676768030587237    -2.209116639237100
    H               -0.053756867891946     1.790768030587237    -2.430116639237101
    H                0.433723132108054     0.704718030587237    -3.785506639237100
    C                0.075243132108054    -0.035231969412763     1.684883360762900
    C                0.293243132108054    -0.564231969412763     3.105883360762900
    H                0.244243132108054    -0.822231969412763     0.957883360762900
    H               -0.931756867891946     0.362768030587237     1.571883360762900
    H                0.779243132108054     0.773768030587237     1.486883360762900
    H                0.077243132108054     0.258768030587237     3.789883360762900
    H                1.340093132108054    -0.862421969412763     3.264583360762900
    H               -0.389956867891946    -1.392091969412763     3.346503360762900

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-102ILE-110ILE-1-dimer.npy', np.array(charges))