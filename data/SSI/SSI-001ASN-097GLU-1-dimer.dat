import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                2.634654108810941     1.991906713131949     0.276864065004000
    C                2.417654108810940     0.550906713131949    -0.080135934996000
    O                3.385654108810940    -0.146093286868051     0.039864065004000
    N                1.193654108810940     0.233906713131949    -0.472135934996000
    H                0.991654108810940    -0.636093286868051    -0.907135934996000
    H                0.433654108810940     0.892906713131949    -0.439135934996000
    H                1.957654108810940     2.248906713131949     1.094864065004000
    H                2.378654108810940     2.609906713131949    -0.586135934996000
    H                3.674544108810940     2.175586713131949     0.584900865004000
    C               -2.350345891189059    -0.415093286868051     1.505864065004000
    C               -2.393345891189059    -0.679093286868051    -0.012135934996000
    O               -1.564345891189060    -0.082093286868051    -0.738135934996000
    O               -3.249345891189059    -1.461093286868051    -0.497135934996000
    H               -3.068345891189060     0.374906713131949     1.740864065004000
    H               -1.361345891189060    -0.058093286868051     1.801864065004000
    H               -2.602165891189060    -1.296463286868051     2.113953065004000

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-001ASN-097GLU-1-dimer.npy', np.array(charges))