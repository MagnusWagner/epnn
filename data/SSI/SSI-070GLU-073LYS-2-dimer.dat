import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.057419436321385    -0.259759683298959    -2.287037068386303
    C                0.148580563678615     0.489240316701041    -1.705037068386303
    O                0.521580563678615     0.250240316701041    -0.524037068386303
    O                0.723580563678615     1.324240316701041    -2.432037068386303
    H               -1.958419436321385     0.185240316701041    -1.861037068386303
    H               -1.000419436321385    -1.307759683298959    -1.995037068386303
    H               -1.147359436321385    -0.199069683298959    -3.381677068386303
    C               -0.007419436321385     0.021240316701041     2.273962931613697
    C               -1.441419436321385    -0.568759683298959     2.131962931613697
    N                0.998580563678615    -1.084759683298959     2.257962931613697
    H                0.179580563678615     0.754240316701041     1.489962931613697
    H                0.048580563678615     0.553240316701041     3.228962931613697
    H               -2.140419436321385     0.267240316701041     2.208962931613698
    H               -1.630419436321385    -1.227759683298959     2.981962931613698
    H                1.020580563678615    -1.521759683298959     1.343962931613697
    H                1.926580563678615    -0.722759683298959     2.434962931613697
    H                0.798580563678615    -1.788759683298959     2.956962931613697
    H               -1.660639436321385    -1.121379683298959     1.206462931613697

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-070GLU-073LYS-2-dimer.npy', np.array(charges))