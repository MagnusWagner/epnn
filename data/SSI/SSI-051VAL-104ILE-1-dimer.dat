import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.210074227726341    -1.159540395201002    -1.235901915523425
    C                0.440074227726341    -2.228540395201002    -2.303901915523425
    H                0.927074227726341    -0.345540395201002    -1.346901915523425
    H               -0.791925772273659    -0.746540395201002    -1.349901915523425
    H                0.287074227726341    -1.583540395201002    -0.234901915523425
    H                0.310074227726341    -1.770540395201002    -3.283901915523425
    H                1.454899227726341    -2.648418395201002    -2.241991915523425
    H               -0.307465772273659    -3.028552395201002    -2.198241915523425
    C               -0.324925772273659     1.620459604798998     1.007098084476575
    C               -0.324925772273659     1.769459604798998     2.536098084476575
    H               -0.366925772273659     2.596459604798998     0.527098084476575
    H                0.594074227726341     1.122459604798998     0.698098084476575
    H               -1.176925772273659     1.019459604798998     0.687098084476575
    H                0.532074227726341     2.373459604798998     2.839098084476575
    H               -0.209925772273659     0.772459604798998     2.949098084476575
    H               -1.255636772273659     2.216944604798998     2.914959084476575

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-051VAL-104ILE-1-dimer.npy', np.array(charges))