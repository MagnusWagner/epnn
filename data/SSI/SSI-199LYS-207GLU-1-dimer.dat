import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -2.112219984803890    -1.923028295966452    -1.155042680325147
    N               -0.992219984803890    -1.063028295966452    -1.753042680325148
    H               -0.659219984803890    -0.406028295966452    -1.042042680325148
    H               -0.210219984803890    -1.637028295966452    -2.046042680325147
    H               -1.318219984803890    -0.539028295966452    -2.554042680325148
    H               -1.660219984803890    -2.531028295966452    -0.364042680325148
    H               -2.465219984803890    -2.632028295966452    -1.910042680325147
    H               -2.997389984803890    -1.454808295966452    -0.699809680325148
    C                1.904780015196110     0.720971704033548    -0.131042680325148
    C                0.762780015196110     0.795971704033548     0.871957319674852
    O               -0.371219984803890     0.494971704033548     0.441957319674852
    O                0.998780015196110     1.190971704033548     2.023957319674853
    H                1.737780015196110     1.459971704033548    -0.910042680325148
    H                1.871780015196110    -0.262028295966452    -0.606042680325148
    H                2.915010015196110     0.850131704033548     0.284594319674852

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-199LYS-207GLU-1-dimer.npy', np.array(charges))