import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.813458716178646    -1.212078506916040     1.187663239192839
    C                2.217458716178646    -1.858078506916040     1.059663239192839
    H                0.041458716178646    -1.902078506916040     0.847663239192839
    H                0.613458716178646    -0.973078506916040     2.233663239192839
    H                0.767458716178646    -0.297078506916040     0.600663239192839
    H                2.252458716178646    -2.757078506916040     1.670663239192839
    H                2.426155716178646    -2.111747106916039     0.009854739192839
    H                2.950348716178646    -1.130154606916040     1.437815239192839
    C               -1.629541283821354     0.767921493083960    -0.966336760807161
    C               -1.396541283821354     2.296921493083961    -1.284336760807161
    H               -1.463541283821354     0.577921493083960     0.094663239192839
    H               -2.658541283821354     0.509921493083960    -1.210336760807161
    H               -0.974541283821354     0.141921493083960    -1.565336760807161
    H               -1.542541283821354     2.459921493083961    -2.351336760807161
    H               -0.378971783821354     2.587655493083961    -0.984293360807161
    H               -2.090770283821354     2.957147493083960    -0.743829860807161

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-034VAL-046LEU-1-dimer.npy', np.array(charges))