import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.665001509375366     1.673038801971648     0.634536949027946
    C                0.811001509375366     2.253038801970649    -0.810463050972054
    H                1.422001509375366     2.091038801971648     1.290536949027946
    H               -0.322998490624634     1.904038801971648     1.035536949027946
    H                0.798001509375366     0.626038801971648     0.632536949027946
    H                0.037001509375366     1.818038801971648    -1.446463050972054
    H                1.805491509375366     2.057238801971648    -1.237853050972054
    H                0.654431509375366     3.341838801971649    -0.809023050972054
    C               -0.507998490624634    -1.395961198028352    -0.365463050972054
    C               -0.967998490624634    -2.531961198028351     0.542536949027946
    H               -1.240998490624634    -0.588961198028351    -0.351463050972054
    H                0.448001509375366    -1.057961198028351    -0.027463050972054
    H               -0.386998490624634    -1.757961198028352    -1.382463050972054
    H               -0.220998490624634    -3.326961198028352     0.522536949027946
    H               -1.931098490624634    -2.927361198028352     0.187486949027946
    H               -1.061908490624634    -2.157061198028351     1.572426949027946

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-253ALA-261THR-1-dimer.npy', np.array(charges))