import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C               -0.386069625367888    -2.551377099694534    -0.633516605028827
    C                0.068930374632112    -3.863377099694534    -0.009516605028827
    H               -1.364069625367888    -2.259377099694535    -0.253516605028827
    H                0.345930374632113    -1.806377099694534    -0.344516605028827
    H               -0.407069625367887    -2.618377099694534    -1.718516605028827
    H                0.994930374632113    -4.184377099694534    -0.488516605028827
    H               -0.706942625367888    -4.631348099694534    -0.144575605028827
    H                0.250620374632113    -3.717019099694534     1.065453394971173
    C                0.563930374632112     0.997622900305466    -0.774516605028827
    C                1.986930374632112     1.018622900305466    -0.229516605028827
    C               -0.469069625367888     1.410622900305465     0.264483394971173
    O               -0.279069625367887     1.110622900305465     1.462483394971173
    O               -1.483069625367888     2.036622900305466    -0.113516605028827
    H                0.542930374632112     1.724622900305465    -1.588516605028827
    H                0.306930374632112     0.042622900305466    -1.216516605028827
    H                2.064930374632112     0.254622900305466     0.531483394971173
    H                2.183930374632112     1.993622900305465     0.216483394971173
    H                2.742900374632112     0.828550000305466    -1.005647605028827

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-011LEU-071GLU-1-dimer.npy', np.array(charges))