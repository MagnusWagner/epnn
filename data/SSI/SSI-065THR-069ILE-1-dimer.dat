import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.565031864591064    -0.808891562170449    -1.482553728497754
    C               -1.543031864591064    -0.085891562170449    -2.425553728497755
    H               -1.061031864591064    -1.646891562170449    -0.992553728497754
    H                0.278968135408936    -1.187891562170449    -2.060553728497754
    H               -0.177031864591064    -0.125891562170449    -0.730553728497754
    H               -1.035031864591064     0.757108437829551    -2.895553728497755
    H               -2.398251864591063     0.281348437829551    -1.839263728497754
    H               -1.908851864591063    -0.754271562170449    -3.218925728497755
    C                1.560968135408936     0.586108437829551     1.394446271502246
    C                0.546968135408936     0.314108437829551     2.516446271502246
    H                2.516968135408936     0.898108437829551     1.810446271502246
    H                1.716968135408936    -0.325891562170449     0.817446271502246
    H                1.175968135408936     1.366108437829551     0.738446271502246
    H                0.959968135408936    -0.425891562170449     3.198446271502245
    H               -0.342031864591064    -0.116891562170449     2.055446271502245
    H                0.274908135408936     1.216248437829551     3.084011471502246

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-065THR-069ILE-1-dimer.npy', np.array(charges))