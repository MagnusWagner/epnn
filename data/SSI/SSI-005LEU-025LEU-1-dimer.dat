import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.479366708725539     0.250204103496270    -1.100179330096278
    C                2.113366708725539     1.633204103496270    -1.247179330096278
    H                1.827366708725539    -0.224795896503730    -0.181179330096278
    H                0.395366708725539     0.357204103496270    -1.059179330096278
    H                1.727366708725539    -0.380795896503730    -1.952179330096278
    H                1.772366708725539     2.024204103496270    -2.194179330096278
    H                3.209816708725540     1.555089103496270    -1.288367330096278
    H                1.807186708725539     2.329791103496270    -0.452809330096278
    C               -1.720633291274461    -1.255795896503730     0.466820669903722
    C               -1.865633291274461    -0.631795896503730     1.885820669903722
    H               -0.736633291274461    -1.713795896503730     0.359820669903722
    H               -2.493633291274461    -2.008795896503730     0.311820669903722
    H               -1.837633291274461    -0.472795896503730    -0.282179330096278
    H               -2.852633291274461    -0.186795896503730     1.950820669903722
    H               -1.115203291274461     0.157079103496270     2.042460669903722
    H               -1.780733291274461    -1.385778896503730     2.682250669903722

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-005LEU-025LEU-1-dimer.npy', np.array(charges))