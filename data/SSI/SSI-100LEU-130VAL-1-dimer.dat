import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.478191203849159    -0.676476722077686     1.412446858494513
    C                0.455191203849159    -1.082476722077686     2.889446858494512
    H               -0.496808796150841    -0.288476722077686     1.115446858494513
    H                1.231191203849159     0.097523277922314     1.263446858494513
    H                0.745191203849159    -1.522476722077686     0.779446858494513
    H                1.421191203849159    -1.514476722077686     3.139446858494513
    H               -0.336758796150841    -1.819392722077686     3.088866858494512
    H                0.287101203849159    -0.201602722077686     3.526476858494513
    C               -0.261808796150841     0.145523277922314    -2.202553141505487
    C               -0.676808796150841     1.613523277922314    -2.103553141505487
    H                0.316191203849159    -0.037476722077686    -3.108553141505487
    H                0.368191203849159    -0.108476722077686    -1.349553141505487
    H               -1.139808796150841    -0.500476722077686    -2.194553141505488
    H               -1.122808796150842     1.769523277922314    -1.121553141505487
    H               -1.411728796150841     1.856095277922314    -2.885255141505487
    H                0.201191203849159     2.268605277922314    -2.203505141505487

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-100LEU-130VAL-1-dimer.npy', np.array(charges))