import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C               -0.391379100847150    -0.085143785191400    -2.368233406693896
    C               -1.189379100847150    -0.733143785191400    -1.259233406693896
    C               -1.843379100847150    -1.133143785191400     0.811766593306104
    C               -2.326379100847150    -1.492143785191400    -1.310233406693896
    N               -0.914379100847150    -0.534143785191400     0.081766593306104
    N               -2.710379100847150    -1.724143785191399    -0.011233406693896
    H               -1.832379100847150    -1.104143785191400     1.896766593306104
    H               -0.281379100847150    -0.812143785191400    -3.156233406693896
    H                0.598620899152850     0.143856214808600    -1.957233406693896
    H               -3.519379100847150    -2.255143785191399     0.269766593306104
    H               -2.891379100847150    -1.872143785191400    -2.151233406693897
    H               -0.893078100847150     0.777666214808600    -2.830683406693896
    C                2.780620899152850     2.178856214808600    -0.015233406693896
    C                2.124620899152850     1.277856214808601     1.016766593306104
    O                1.843620899152850     0.116856214808600     0.654766593306104
    O                1.964620899152850     1.719856214808600     2.179766593306104
    H                2.299620899152850     2.028856214808600    -0.979233406693896
    H                3.837620899152850     1.920856214808600    -0.095233406693896
    H                2.670370899152850     3.243396214808601     0.238906593306104

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-020HIE-062ASP-2-dimer.npy', np.array(charges))