import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                0.206309807954595    -2.381925132593181    -0.257100770979296
    C               -0.105690192045405    -2.024925132593181     1.190899229020704
    O               -0.156690192045405    -2.896925132593180     2.060899229020704
    N               -0.319690192045405    -0.745925132593180     1.463899229020704
    H               -0.516690192045405    -0.484925132593180     2.414899229020704
    H               -0.244690192045405    -0.028925132593180     0.742899229020704
    H                1.184309807954595    -2.863925132593180    -0.279100770979296
    H                0.280309807954595    -1.478925132593180    -0.862100770979296
    H               -0.532710192045405    -3.070869132593181    -0.692070770979296
    C               -0.723690192045405     2.756074867406820    -2.036100770979296
    C                0.132309807954595     1.947074867406820    -1.062100770979296
    O               -0.116690192045405     1.983074867406820     0.162899229020704
    O                1.084309807954595     1.284074867406819    -1.532100770979296
    H               -1.016690192045405     2.130074867406819    -2.882100770979296
    H               -0.114690192045405     3.576074867406819    -2.420100770979296
    H               -1.623895192045405     3.181844867406820    -1.568820770979296

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-038GLN-042ASP-1-dimer.npy', np.array(charges))