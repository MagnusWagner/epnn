import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.697526408790669     0.355241066421904    -1.416546532859431
    C               -0.591526408790669     0.374241066421904    -2.943546532859432
    H               -0.093526408790669    -0.451758933578096    -0.999546532859431
    H               -0.333526408790669     1.300241066421904    -1.014546532859431
    H               -1.736526408790668     0.217241066421904    -1.121546532859431
    H                0.454473591209331     0.366241066421904    -3.209546532859431
    H               -1.043968408790669    -0.521248933578096    -3.394546532859432
    H               -1.066818408790669     1.276651066421904    -3.355566532859431
    C                0.032473591209331     0.090241066421904     2.160453467140568
    C                1.252473591209331    -0.823758933578096     2.207453467140569
    H               -0.076526408790669     0.640241066421904     3.094453467140569
    H                0.161473591209331     0.816241066421904     1.359453467140569
    H               -0.868526408790669    -0.492758933578096     1.965453467140569
    H                2.131473591209331    -0.236758933578096     2.470453467140568
    H                1.393473591209331    -1.208758933578096     1.198453467140569
    H                1.127409591209331    -1.657518933578096     2.913993467140569

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-117VAL-166ILE-1-dimer.npy', np.array(charges))