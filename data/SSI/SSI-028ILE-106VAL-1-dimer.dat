import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.541193490429345     0.767154672155118     0.224178933342480
    C               -1.965193490429345     1.698154672155118     1.329178933342480
    H               -0.787193490429345     1.249154672155118    -0.396821066657520
    H               -1.151193490429345    -0.146845327844882     0.664178933342480
    H               -2.396193490429344     0.498154672155118    -0.394821066657520
    H               -1.096193490429345     2.029154672155118     1.891178933342480
    H               -2.609193490429344     1.123154672155118     1.996178933342480
    H               -2.516643490429344     2.562444672155118     0.930551933342480
    C                1.217806509570656    -0.706845327844882    -0.916821066657520
    C                2.291806509570656    -1.753845327844882    -0.639821066657520
    H                1.581806509570655     0.120154672155118    -1.506821066657520
    H                0.366806509570655    -1.163845327844882    -1.422821066657521
    H                0.909806509570655    -0.301845327844882     0.042178933342480
    H                2.615806509570656    -2.171845327844882    -1.594821066657520
    H                3.151406509570656    -1.278995327844882    -0.144230066657520
    H                1.892566509570656    -2.573835327844882    -0.024827066657520

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-028ILE-106VAL-1-dimer.npy', np.array(charges))