import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.474776489303646    -1.076627891064817     0.306746994678896
    C                2.933776489303646    -0.532627891064817     0.445746994678896
    H                1.462776489303646    -2.163627891064817     0.343746994678896
    H                0.864776489303646    -0.683627891064817     1.117746994678896
    H                1.049776489303647    -0.753627891064817    -0.643253005321104
    H                3.254776489303647    -0.774627891064817     1.459746994678896
    H                3.640792489303646    -1.023931891064817    -0.238905005321104
    H                2.977111489303646     0.562312108935183     0.349686994678896
    C               -1.507223510696354     0.554372108935183    -0.330253005321104
    C               -2.904223510696354     1.061372108935183    -0.429253005321104
    H               -1.283223510696354     0.172372108935183     0.662746994678896
    H               -1.367223510696354    -0.242627891064817    -1.060253005321104
    H               -0.800223510696354     1.348372108935183    -0.570253005321104
    H               -3.115223510696354     1.378372108935183    -1.450253005321104
    H               -3.099513510696353     1.889263108935183     0.268211994678896
    H               -3.550143510696353     0.214123108935183    -0.155479005321104

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-048VAL-093THR-1-dimer.npy', np.array(charges))