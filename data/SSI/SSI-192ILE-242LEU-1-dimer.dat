import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.135187031719915     1.504222568656310    -0.193697666835917
    C                1.015187031719915     2.815222568656309    -0.977697666835917
    H                1.968187031719915     1.520222568656310     0.509302333164082
    H                0.220187031719915     1.324222568656310     0.370302333164083
    H                1.239187031719915     0.656222568656310    -0.869697666835917
    H                0.167187031719915     2.740222568656310    -1.658697666835917
    H                1.915697031719915     3.004465568656309    -1.580417666835918
    H                0.836807031719915     3.655561568656310    -0.290667666835917
    C               -0.708812968280085    -1.495777431343690     0.469302333164083
    C               -1.433812968280085    -2.821777431343691     0.699302333164083
    H               -0.363812968280085    -1.430777431343690    -0.563697666835917
    H               -1.388812968280085    -0.666777431343690     0.671302333164083
    H                0.147187031719915    -1.417777431343690     1.141302333164083
    H               -1.772812968280085    -2.841777431343691     1.734302333164083
    H               -0.748702968280085    -3.665046431343690     0.527482333164083
    H               -2.312552968280085    -2.901268431343690     0.042412333164083

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-192ILE-242LEU-1-dimer.npy', np.array(charges))