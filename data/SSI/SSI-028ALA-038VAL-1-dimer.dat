import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.575369986722162     0.022340562521970    -1.048773029232902
    C                1.327369986722162    -1.205659437478030    -1.925773029232903
    H                2.442369986722162     0.579340562521970    -1.403773029232902
    H                0.703369986722162     0.676340562521970    -1.085773029232902
    H                1.756369986722162    -0.285659437478030    -0.020773029232902
    H                0.431369986722162    -1.725659437478030    -1.578773029232903
    H                2.195618986722162    -1.878259437478030    -1.864493029232902
    H                1.166571986722162    -0.879039437478030    -2.963783029232902
    C               -1.009630013277838     1.181340562521970     1.259226970767098
    C               -1.895630013277838     0.002340562521970     1.714226970767097
    H               -0.974630013277838     1.964340562521970     2.018226970767097
    H                0.005369986722162     0.815340562521970     1.130226970767098
    H               -1.369630013277838     1.597340562521970     0.315226970767098
    H               -1.517630013277838    -0.372659437478030     2.662226970767098
    H               -2.944337013277838     0.312110562521970     1.833636970767097
    H               -1.864808013277838    -0.807849437478030     0.970826970767097

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-028ALA-038VAL-1-dimer.npy', np.array(charges))