import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C                1.093214510082131    -1.400117555514506    -0.737677337765917
    C                1.137214510082131    -0.987117555514506    -2.182677337765917
    C                2.532214510082131    -1.729117555514506    -0.371677337765917
    H                0.463214510082131    -2.287117555514506    -0.656677337765917
    H                0.696214510082131    -0.606117555514506    -0.109677337765917
    H                0.203214510082131    -1.227117555514506    -2.696677337765917
    H                1.311214510082131     0.088882444485494    -2.252677337765917
    H                3.021214510082131    -0.872117555514506     0.093322662234083
    H                1.987605510082131    -1.520537555514506    -2.632452737765917
    H                3.002459510082131    -1.977010555514506    -1.334703337765917
    H                2.538026510082132    -2.601639555514506     0.298152662234083
    C               -1.029785489917869     0.644882444485494     2.210322662234083
    C               -1.196785489917869     1.045882444485494     0.748322662234083
    O               -0.497785489917869     1.977882444485494     0.285322662234083
    O               -2.046785489917869     0.432882444485494     0.063322662234083
    H               -0.782785489917869    -0.415117555514506     2.278322662234083
    H               -1.983785489917869     0.790882444485494     2.721322662234083
    H               -0.268986489917869     1.247480444485494     2.728068662234083

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-001PRO-046ASP-1-dimer.npy', np.array(charges))