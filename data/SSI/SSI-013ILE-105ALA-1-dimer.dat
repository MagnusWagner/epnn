import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.472817005709779     0.970844657011386    -0.453573101207085
    C               -2.075817005709779     2.120844657011386    -1.236573101207085
    H               -2.151817005709779     0.119844657011386    -0.431573101207085
    H               -0.535817005709779     0.672844657011386    -0.924573101207085
    H               -1.266817005709779     1.281844657011386     0.570426898792915
    H               -2.201817005709779     1.820844657011386    -2.278573101207085
    H               -1.351817005709779     2.934844657011386    -1.216573101207085
    H               -3.043097005709779     2.454484657011386    -0.832766101207085
    C                1.300182994290221    -0.953155342988614     0.778426898792915
    C                2.240182994290221    -2.143155342988615     0.912426898792915
    H                0.336182994290221    -1.273155342988614     0.381426898792915
    H                1.150182994290221    -0.491155342988614     1.754426898792915
    H                1.736182994290221    -0.213155342988614     0.104426898792915
    H                3.183182994290221    -1.794155342988614     1.338426898792915
    H                2.437012994290221    -2.578285342988614    -0.078492101207085
    H                1.806882994290221    -2.879775342988614     1.604990898792915

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-013ILE-105ALA-1-dimer.npy', np.array(charges))