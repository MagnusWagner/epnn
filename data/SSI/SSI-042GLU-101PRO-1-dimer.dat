import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    -1 1
    --
    -1 1
    C               -1.793525943195679    -1.089875765779181    -2.058500289515378
    C               -0.606525943195680    -0.267875765779181    -1.612500289515378
    O                0.454474056804320    -0.834875765779181    -1.290500289515378
    O               -0.773525943195680     0.983124234220819    -1.596500289515378
    H               -2.175525943195680    -0.689875765779181    -3.000500289515378
    H               -2.575525943195680    -1.000875765779181    -1.308500289515378
    H               -1.552576943195680    -2.153223765779181    -2.204220289515378
    C                0.459474056804320     0.517124234220819     1.783499710484622
    C                0.486474056804320     0.944124234220819     3.228499710484622
    C                1.755474056804320    -0.239875765779181     1.547499710484622
    H                0.441474056804321     1.406124234220819     1.151499710484622
    H               -0.407525943195680    -0.109875765779181     1.570499710484622
    H                0.248474056804320     2.006124234220819     3.322499710484622
    H               -0.207525943195680     0.342124234220819     3.810499710484622
    H                2.145474056804321    -0.050875765779181     0.547499710484622
    H                1.575474056804321    -1.306875765779181     1.656499710484622
    H                1.511800056804321     0.734126234220819     3.567039710484623
    H                2.471205056804320     0.094132234220819     2.313119710484622

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-042GLU-101PRO-1-dimer.npy', np.array(charges))