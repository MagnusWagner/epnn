import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.921878939757113     1.297171747481545     1.667901984608676
    C                1.333878939757113     0.137171747481545     2.565901984608676
    H                1.046878939757113     1.049171747481545     0.618901984608676
    H               -0.119121060242887     1.542171747481545     1.858901984608676
    H                1.531878939757113     2.171171747481545     1.895901984608676
    H                0.660878939757113    -0.699828252518455     2.379901984608676
    H                1.171878939757113     0.452171747481545     3.594901984608676
    H                2.370795939757113    -0.202978252518455     2.427693984608676
    C               -0.784121060242887     0.093171747481545    -1.480098015391324
    C               -1.962121060242887    -0.867828252518455    -1.394098015391324
    O                0.426878939757113    -0.587828252518455    -1.232098015391324
    H               -0.760121060242887     0.569171747481545    -2.457098015391324
    H               -0.903121060242887     0.868171747481545    -0.723098015391324
    H               -1.893121060242887    -1.574828252518455    -2.219098015391324
    H                0.777878939757113    -0.948828252518455    -2.069098015391324
    H               -2.906352060242888    -0.311108252518455    -1.486255015391324
    H               -1.913121060242887    -1.439978252518455    -0.455886015391324

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-005ILE-054SER-1-dimer.npy', np.array(charges))