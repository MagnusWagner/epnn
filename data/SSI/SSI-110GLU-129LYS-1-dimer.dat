import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                2.402876064664747    -1.036650786704940     0.066840884353774
    C                1.018876064664747    -0.723650786704940    -0.471159115646226
    O                0.647876064664747     0.471349213295060    -0.477159115646226
    O                0.304876064664747    -1.647650786704940    -0.908159115646226
    H                2.412876064664747    -1.084650786704940     1.132840884353775
    H                3.063876064664747    -0.223650786704940    -0.225159115646226
    H                2.813356064664748    -1.967130786704940    -0.352345115646226
    C               -2.502123935335253     1.905349213295060     0.547840884353775
    N               -1.592123935335253     0.857349213295060     1.072840884353775
    H               -2.068123935335253    -0.016650786704940     1.282840884353775
    H               -0.862123935335252     0.633349213295060     0.393840884353774
    H               -1.127123935335253     1.159349213295060     1.921840884353775
    H               -3.091123935335252     1.505349213295060    -0.284159115646226
    H               -1.911123935335253     2.745349213295060     0.170840884353774
    H               -3.179683935335253     2.278078213295061     1.330137884353774

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-110GLU-129LYS-1-dimer.npy', np.array(charges))