import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.060718569045619     1.405328107068020     0.213774546759657
    C                2.146718569045619     2.475328107068020     0.235774546759657
    H                1.318718569045619     0.592328107068020     0.892774546759657
    H                0.113718569045619     1.842328107068020     0.532774546759657
    H                0.928718569045619     1.012328107068020    -0.793225453240343
    H                1.875718569045619     3.246328107068020    -0.486225453240343
    H                3.116748569045619     2.043418107068020    -0.051455453240343
    H                2.204068569045619     2.951338107068020     1.225784546759657
    C               -1.303281430954381    -1.252671892931980    -0.079225453240343
    C               -1.899281430954381    -2.631671892931980    -0.372225453240343
    H               -0.849281430954381    -0.841671892931980    -0.982225453240343
    H               -2.085281430954381    -0.574671892931980     0.260774546759657
    H               -0.551281430954381    -1.300671892931980     0.707774546759657
    H               -2.374281430954381    -2.998671892931981     0.534774546759657
    H               -1.095101430954381    -3.327621892931980    -0.653185453240343
    H               -2.660501430954381    -2.600851892931980    -1.165695453240343

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-071VAL-083ILE-1-dimer.npy', np.array(charges))