import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.369128791879857     1.491261228309670    -1.176018951046264
    C                0.190871208120142     2.380261228309671    -0.071018951046264
    H               -0.993128791879858     0.705261228309670    -0.749018951046264
    H               -0.976128791879858     2.082261228309670    -1.858018951046264
    H                0.448871208120142     1.042261228309670    -1.740018951046264
    H                0.803871208120142     3.156261228309670    -0.521018951046264
    H                0.796471208120142     1.761023228309670     0.607061048953736
    H               -0.634288791879858     2.859203228309671     0.476451048953736
    C                0.705871208120142    -1.769738771690330     0.210981048953736
    C               -0.531128791879858    -2.098738771690330     1.035981048953736
    H                0.430871208120142    -1.377738771690330    -0.767018951046264
    H                1.339871208120142    -1.071738771690330     0.742981048953736
    H                1.319871208120142    -2.659738771690329     0.099981048953736
    H               -1.232128791879857    -1.265738771690330     0.985981048953736
    H               -1.001878791879858    -3.007852771690330     0.633611048953736
    H               -0.260418791879858    -2.259718771690329     2.089931048953736

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-054LEU-091LEU-1-dimer.npy', np.array(charges))