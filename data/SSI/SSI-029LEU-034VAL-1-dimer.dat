import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.693567091500996    -0.396489732906301    -1.012013788969554
    C               -2.784567091500997     0.624510267093699    -1.308013788969554
    H               -1.686567091500996    -0.673489732906301     0.040986211030446
    H               -1.884567091500996    -1.296489732906301    -1.597013788969554
    H               -0.716567091500996    -0.003489732906301    -1.294013788969554
    H               -3.744567091500997     0.255510267093699    -0.950013788969554
    H               -2.500497091500996     1.564618267093699    -0.812533788969554
    H               -2.868027091500996     0.845649267093699    -2.382323788969554
    C                1.583432908499004     0.105510267093699     0.809986211030446
    C                2.897432908499004    -0.326489732906301     1.502986211030446
    H                1.801432908499004     0.704510267093699    -0.075013788969554
    H                1.037432908499004    -0.784489732906301     0.497986211030446
    H                0.949432908499004     0.677510267093699     1.485986211030446
    H                2.599432908499004    -0.919489732906301     2.367986211030446
    H                3.448282908499003     0.537825267093699     1.902386211030446
    H                3.532252908499004    -0.992011732906301     0.899586211030446

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-029LEU-034VAL-1-dimer.npy', np.array(charges))