import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.277421635623120     1.040384784347049    -0.049178282152971
    C                1.739421635623120     2.260384784347049     0.764821717847029
    H                0.361421635623120     1.288384784347049    -0.590178282152971
    H                2.051421635623120     0.758384784347049    -0.764178282152971
    H                1.083421635623120     0.200384784347049     0.617821717847029
    H                2.656421635623120     2.009384784347049     1.301821717847029
    H                0.957324635623120     2.534544784347049     1.488121717847029
    H                1.910396635623120     3.079384784347049     0.050661717847029
    C               -1.111578364376880    -1.833615215652951    -0.996178282152971
    C               -1.903578364376880    -1.467615215652951     0.282821717847029
    H               -1.451578364376880    -2.798615215652951    -1.377178282152971
    H               -1.266578364376880    -1.071615215652951    -1.759178282152970
    H               -0.046578364376880    -1.891615215652951    -0.773178282152971
    H               -1.556578364376880    -0.503615215652951     0.659821717847029
    H               -1.743421364376880    -2.227115215652951     1.062251717847029
    H               -2.975754364376880    -1.372405215652951     0.056161717847029

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-033LEU-059ILE-1-dimer.npy', np.array(charges))