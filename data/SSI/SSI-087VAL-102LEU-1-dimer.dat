import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -1.200906259170312     1.137377732443951     0.261983653711772
    C               -1.412906259170312     2.640377732443952     0.156983653711772
    H               -0.490906259170312     0.919377732443951     1.059983653711772
    H               -2.145906259170312     0.647377732443951     0.500983653711772
    H               -0.826906259170312     0.752377732443951    -0.686016346288228
    H               -1.758906259170312     2.988377732443952     1.130983653711772
    H               -0.490456259170312     3.173647732443952    -0.116360346288228
    H               -2.181566259170312     2.890267732443951    -0.589152346288228
    C                1.081093740829688    -1.434622267556049     0.349983653711772
    C                1.536093740829688    -2.340622267556048    -0.773016346288228
    H               -0.006906259170312    -1.370622267556049     0.352983653711772
    H                1.366093740829688    -1.865622267556049     1.301983653711772
    H                1.516093740829688    -0.441622267556048     0.236983653711772
    H                2.605093740829688    -2.198622267556048    -0.924016346288228
    H                0.988313740829688    -2.124852267556049    -1.702201346288228
    H                1.385773740829688    -3.399982267556048    -0.517749346288228

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-087VAL-102LEU-1-dimer.npy', np.array(charges))