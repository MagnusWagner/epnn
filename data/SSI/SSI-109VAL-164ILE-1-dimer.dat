import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.345049510853220     1.240239716603523    -1.120627261924385
    C                2.333049510853220     0.870239716603523    -0.013627261924385
    H                1.735049510853220     2.082239716603523    -1.695627261924385
    H                1.215049510853220     0.390239716603523    -1.791627261924385
    H                0.371049510853220     1.518239716603523    -0.730627261924385
    H                1.941049510853220     0.017239716603523     0.539372738075615
    H                2.467439510853220     1.715879716603523     0.676902738075615
    H                3.298329510853220     0.595469716603523    -0.463897261924385
    C               -1.563950489146780    -0.362760283396477     0.710372738075615
    C               -2.106950489146780    -1.748760283396477     0.433372738075615
    H               -0.922950489146780    -0.069760283396477    -0.114627261924385
    H               -2.386950489146780     0.349239716603523     0.785372738075615
    H               -0.988950489146780    -0.367760283396477     1.631372738075615
    H               -2.382950489146780    -1.807760283396477    -0.621627261924385
    H               -3.026950489146780    -1.849760283396477     0.999372738075615
    H               -1.404920489146780    -2.561110283396477     0.672632738075615

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-109VAL-164ILE-1-dimer.npy', np.array(charges))