import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.351799959651839     2.322213638857123    -2.582892725916729
    C               -0.474799959651839     0.954213638857123    -1.934892725916729
    O               -1.417799959651839     0.690213638857123    -1.194892725916729
    N                0.471200040348161     0.072213638857123    -2.209892725916729
    H               -1.234799959651839     2.434213638857123    -3.205892725916729
    H                0.521200040348161     2.366213638857123    -3.234892725916729
    H                0.401200040348161    -0.834786361142877    -1.775892725916729
    H                1.285200040348161     0.319213638857123    -2.758892725916728
    H               -0.288448959651839     3.125613638857123    -1.834203725916729
    C               -0.418799959651839     0.280213638857123     1.756107274083271
    C                1.299200040348161    -1.499786361142877     2.944107274083271
    S                0.373200040348161    -1.295786361142877     1.421107274083271
    H                0.074200040348161     0.788213638857123     2.584107274083271
    H               -0.328799959651839     0.930213638857123     0.892107274083271
    H               -1.470799959651839     0.124213638857123     1.992107274083271
    H                2.059200040348161    -0.719786361142877     2.972107274083271
    H                1.798200040348161    -2.469786361142877     2.950107274083271
    H                0.658220040348161    -1.404396361142877     3.832957274083272

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-022GLN-046MET-1-dimer.npy', np.array(charges))