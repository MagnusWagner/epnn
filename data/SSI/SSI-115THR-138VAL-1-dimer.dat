import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C               -0.551682366085908     0.499611221788559    -1.775384627663213
    C               -1.025682366085908    -0.111388778211441    -3.115384627663213
    H               -1.417682366085908     0.816611221788559    -1.194384627663213
    H                0.000317633914092    -0.247388778211441    -1.205384627663213
    H                0.089317633914092     1.363611221788560    -1.953384627663213
    H               -1.725682366085908    -0.917388778211441    -2.891384627663213
    H               -0.168408366085908    -0.526776778211441    -3.665415627663213
    H               -1.537190366085908     0.643144221788559    -3.731046627663213
    C                0.696317633914092     0.190611221788559     1.784615372336787
    C                0.880317633914092    -0.573388778211441     3.108615372336787
    H                1.540317633914092    -0.017388778211441     1.126615372336787
    H               -0.205682366085908    -0.133388778211441     1.266615372336787
    H                0.646317633914092     1.263611221788560     1.973615372336787
    H                0.883317633914092    -1.633388778211440     2.865615372336787
    H                0.058184633914092    -0.349236778211441     3.804215372336787
    H                1.845558633914092    -0.326851778211441     3.575015372336787

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-115THR-138VAL-1-dimer.npy', np.array(charges))