import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.452107942855818    -0.543973736400569    -1.275357721961782
    C                0.862107942855817    -1.845973736400569    -1.891357721961782
    H               -0.603892057144182    -0.638973736400569    -1.036357721961782
    H                1.041107942855817    -0.380973736400569    -0.373357721961782
    H                0.580107942855817     0.271026263599431    -1.979357721961782
    H                0.577107942855818    -2.669973736400569    -1.234357721961782
    H                1.951107942855818    -1.829973736400569    -1.924357721961782
    H                0.447997942855818    -1.998125736400569    -2.899007721961782
    C               -0.585892057144182     1.481026263599431     0.884642278038218
    C               -0.725892057144182     0.915026263599431     2.280642278038218
    H                0.463107942855818     1.536026263599431     0.594642278038218
    H               -1.180892057144183     0.887026263599431     0.202642278038218
    H               -1.010892057144183     2.482026263599431     0.826642278038218
    H                0.198107942855818     0.404026263599431     2.557642278038218
    H               -1.526892057144183     0.176026263599431     2.257642278038218
    H               -0.965032057144182     1.689171263599431     3.024622278038218

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-022ILE-074ILE-1-dimer.npy', np.array(charges))