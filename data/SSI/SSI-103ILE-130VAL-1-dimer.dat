import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                1.008815635311292    -1.842293140340097    -0.695605648124243
    C                0.526815635311292    -2.799293140340097     0.400394351875757
    H                1.212815635311292    -2.393293140340097    -1.616605648124243
    H                0.256815635311292    -1.082293140340097    -0.903605648124243
    H                1.905815635311292    -1.312293140340097    -0.381605648124243
    H                0.434815635311292    -2.236293140340097     1.329394351875757
    H                1.250535635311292    -3.615886140340097     0.539708351875757
    H               -0.455084364688708    -3.222968140340097     0.142754351875757
    C               -0.561184364688708     1.585706859659903     0.096394351875757
    C               -0.976184364688708     3.053706859659903     0.195394351875757
    H                0.016815635311292     1.402706859659903    -0.809605648124243
    H                0.068815635311292     1.331706859659903     0.949394351875757
    H               -1.439184364688708     0.939706859659903     0.104394351875757
    H               -1.422184364688708     3.209706859659903     1.177394351875757
    H               -1.711104364688708     3.296278859659903    -0.586307648124243
    H               -0.098184364688708     3.708788859659903     0.095442351875757

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-103ILE-130VAL-1-dimer.npy', np.array(charges))