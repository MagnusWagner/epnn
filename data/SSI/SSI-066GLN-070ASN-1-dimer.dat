import numpy as np
set {scf_type pk
basis cc-pvdz
d_convergence 10
gdma_switch   0
gdma_limit    0
gdma_origin   [ 0.0,  0.0,  0.0 ]
}
molecule test {
    units Angstrom
    0 1
    --
    0 1
    C                0.410065358481544     0.156270271879638    -2.544279918963669
    C               -0.210934641518456    -1.143729728120362    -2.062279918963668
    O               -0.531934641518456    -2.026729728120361    -2.858279918963669
    N               -0.389934641518456    -1.279729728120362    -0.757279918963669
    H               -0.780934641518456    -2.144729728120362    -0.417279918963669
    H               -0.182934641518456    -0.535729728120362    -0.100279918963669
    H                1.340065358481544    -0.083729728120362    -3.062279918963668
    H                0.671065358481544     0.789270271879638    -1.695279918963669
    H               -0.245874641518456     0.705878571879638    -3.235419918963669
    C               -0.623934641518456     1.881270271879638     2.937720081036332
    C                0.180065358481544     0.998270271879638     2.003720081036331
    O               -0.083934641518456    -0.193729728120362     1.860720081036332
    N                1.186065358481544     1.575270271879638     1.366720081036331
    H               -0.738934641518456     2.866270271879638     2.491720081036331
    H               -0.039934641518456     2.000270271879638     3.851720081036331
    H                1.798065358481544     1.006270271879639     0.801720081036331
    H                1.413065358481544     2.542270271879638     1.548720081036332
    H               -1.607014641518456     1.459232971879638     3.193520081036331

}
e, wfn = energy('scf', return_wfn=True)
gdma(wfn)
dmavals = variable('DMA DISTRIBUTED MULTIPOLES')
charges = np.array(dmavals)
print(charges)
np.save('SSI-066GLN-070ASN-1-dimer.npy', np.array(charges))